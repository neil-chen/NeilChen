<?php

/**
 * Author : Neil
 * Implementation of hook_menu()
 * @return array $items
 */
function termdisplay_menu() {
  $items = array();
  $items['group/%'] = array(
    'page callback' => 'termdisplay_vocabulary',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['mpper/%'] = array(
    'page callback' => 'termdisplay_term_list',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['mpp/%'] = array(
    'page callback' => 'termdisplay_node_list',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * menu callback group/%
 * @param int $vid
 * @return string $output
 */
function termdisplay_vocabulary($vid) {
  $terms = _taxonomy_get_real_tree($vid);
  $output = theme('term_list', $terms);
  return $output;
}

/**
 * menu callback mpper/%
 * @param int $tid
 * @return string
 */
function termdisplay_term_list($tid) {
  $terms = taxonomy_get_children($tid);
  $output = theme('term_list', $terms);
  return $output;
}

function termdisplay_node_list($tid) {
  $result = db_query("SELECT n.nid, n.title, n.status FROM {term_node} tn JOIN {node} n ON tn.nid = n.nid WHERE tn.tid = %d", $tid);
  $items = array();
  while ($row = db_fetch_object($result)) {
    $items[$row->nid]->nid = $row->nid;
    $items[$row->nid]->name = $row->title;
    $items[$row->nid]->status = $row->title;
  }
  $output = theme('term_list', $items);
  return $output;
}

/**
 * Implementation of hook_theme()
 * @return array 
 */
function termdisplay_theme() {
  return array(
    'term_list' => array(
      'arguments' => array('terms' => array()),
      'template' => 'term-list',
    ),
  );
}

/**
 * Implementation of hook_form_alter()
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function termdisplay_form_alter(&$form, $form_state, $form_id) {
  $tid = arg(5);
  $status = taxonomy_get_term($tid)->status;
  if ($form_id == 'taxonomy_form_term') {
    $form['identification']['status'] = array(
      '#type' => 'select',
      '#title' => t('Display'),
      '#default_value' => $status,
      '#options' => array(
        '1' => 'Show',
        '0' => 'Hide',
      ),
      '#description' => t('This term display?'),
    );
    $form['#submit'][] = 'termdisplay_form_submit';
  }
}

/**
 * Implementation of hook_form_submit()
 * @param array $form
 * @param array $form_state
 */
function termdisplay_form_submit($form, &$form_state) {
  term_data_set('status', $form_state['values']['status'], $form['#term']['tid']);
}

/**
 * Update set status field
 * @param string $field
 * @param string $value
 * @param int $id
 */
function term_data_set($field, $value, $id) {
  db_query("UPDATE {term_data} SET %s = '%s' WHERE tid = %d", $field, $value, $id);
}

/**
 * _taxonomy_get_real_tree
 * @param int $vid
 * @return array $result_tree
 */
function _taxonomy_get_real_tree($vid) {
  $result_tree = array();
  $terms = array();
  foreach (taxonomy_get_tree($vid) as $term) {
    if (isset($terms[$term->tid])) {
      $term->children = $terms[$term->tid]->children;
      $terms[$term->tid] = $term;
    } else {
      $terms[$term->tid] = $term;
    }
    if ($term->depth === 0) {
      $result_tree[$term->tid] = &$terms[$term->tid];
      continue;
    }
    foreach ($term->parents as $tid) {
      if ($tid) {
        if (!isset($terms[$tid])) {
          $terms[$tid] = new stdClass();
        }
        $terms[$tid]->children[$term->tid] = &$terms[$term->tid];
      }
    }
  }
  return $result_tree;
}
