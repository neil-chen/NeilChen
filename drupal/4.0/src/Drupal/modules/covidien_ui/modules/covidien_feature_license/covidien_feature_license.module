<?php

/**
 * Implement hook_menu
 */
function covidien_feature_license_menu() {
  $items = array();
  // URL to access add new User
  $items ['feature_license/list'] = array(
    'page callback' => 'feature_license_list',
    'access callback' => 'covidien_feature_license_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['feature_license/add'] = array(
    'page callback' => 'feature_license_add',
    'access callback' => 'covidien_feature_license_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['feature_license/save'] = array(
    'page callback' => 'feature_license_save',
    'access callback' => 'covidien_feature_license_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['feature_license/edit'] = array(
    'page callback' => 'feature_license_edit',
    'access callback' => 'covidien_feature_license_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['feature_license/update'] = array(
    'page callback' => 'feature_license_update',
    'access callback' => 'covidien_feature_license_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['feature_license/delete'] = array(
    'page callback' => 'feature_license_delete',
    'access callback' => 'covidien_feature_license_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['feature_license/admin/%/regulatory_approval'] = array(
    'page callback' => 'feature_license_regulatory_approval',
    'access callback' => 'covidien_feature_license_check_access',
    'file' => 'includes/feature_license_regulatory.inc',
    'type' => MENU_CALLBACK,
  );
  $items ['feature_license/regulatory_approval/add'] = array(
    'page callback' => 'feature_license_regulatory_approval_add',
    'access callback' => 'covidien_feature_license_check_access',
    'file' => 'includes/feature_license_regulatory.inc',
    'type' => MENU_CALLBACK,
  );


  return $items;
}

/**
 * Implements hook_theme()
 */
function covidien_feature_license_theme() {
  return array(
    'feature_license_list' => array(
      'template' => 'feature_license_list',
      'arguments' => array(
        'form' => NULL,
        'get' => NULL
      )
    ),
    'feature_license_form' => array(
      'template' => 'feature_license_form',
      'arguments' => array(
        'form' => NULL,
        'get' => NULL
      )
    ),
    'feature_license_regulatory_form' => array(
      'template' => 'feature_license_regulatory',
      'arguments' => array(
        'form' => NULL,
        'get' => NULL
      )
    ),
    'feature_license_add_exclusions_form' => array(
      'template' => 'feature_license_add_regulatory',
      'arguments' => array(
        'form' => NULL,
        'get' => NULL
      )
    )
  );
}

function covidien_feature_license_check_access() {
  return covidien_cot_admin_access_callback('feature');
}

function feature_license_list() {
  $output = theme('feature_license_list');
  return $output;
}

function feature_license_add() {
  //   $output = theme('feature_license_form');
  //   return $output;
  drupal_set_title(t('Add New Feature License to Catalog'));

  feature_license_form_validate(&$form_stats);
  feature_license_form_submit(&$form_stats);

  return drupal_get_form('feature_license_form');
}

function feature_license_edit() {
  drupal_set_title(t('Edit a New Feature Catalog'));
  //   $output = theme('feature_license_form');
  //   return $output;

  feature_license_form_validate(&$form_stats);
  feature_license_form_submit(&$form_stats);

  return drupal_get_form('feature_license_form');
}

function feature_license_form() {
  $form = array();

  $form['#id'] = "feature-license-form";

  $device_form = field_device_type_select();

  $device_form['select_device_type']['#attributes'] = array('onchange' => 'changeDeviceType()');
  $device_form['select_device_type']['#id'] = "select_device_type";
  $device_form['select_device_type']['#name'] = "select_device_type";

  $form['select_device_type'] = $device_form['select_device_type'];

  unset($form['select_device_type']['default_value']);
  unset($form['select_device_type']['value']);

  $form['feature_name'] = array(
    '#type' => 'textfield',
    '#id' => 'feature_name',
    '#required' => TRUE,
    '#name' => 'feature_name',
    '#attributes' => array('placeholder' => 'Enter Feature Name'),
  );
  $form['feature_description'] = array(
    '#type' => 'textfield',
    '#id' => 'feature_description',
    '#required' => TRUE,
    '#name' => 'feature_description',
    '#attributes' => array('placeholder' => 'Enter Feature Description'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#id' => 'btn_submit',
    '#value' => arg(2) ? t('Save Changes') : t('Add New Feature'),
    '#attributes' => array('onclick' => 'return save_feature()'),
    //    '#attributes' => array('class' => 'non_active_blue', 'onclick' => 'return save_feature()'),
    '#submit' => array('feature_license_form_submit'),
  );

  $form['delete_feature'] = array(
    '#type' => 'button',
    '#id' => 'btn_submit',
    '#value' => t('Delete this Feature'),
    '#attributes' => array('onclick' => 'return delete_feature()'),
  );
  $form['#theme'] = array('feature_license_form');
  $form['#validate'] = array('feature_license_form_validate');
  $form['#submit'] = array('feature_license_form_submit');

  return $form;
}

function feature_license_form_validate(&$form_state) {
  if (!$_POST['op']) {
    return false;
  }

  module_load_include('module', 'covidien_ui');

  if (!covidien_ui_input_validate($_POST['feature_name'], true)) {
    form_set_error('feature_name', 'Invalid feature name.');
  }
  if (!covidien_ui_input_validate($_POST['feature_description'])) {
    form_set_error('feature_description', 'Invalid feature description.');
  }
}

function feature_license_form_submit(&$form_state) {
  if (count(form_get_errors()) || !$_POST['op']) {
    return false;
  }
  $id = arg(2);

  if ($id) {
    feature_license_update();
  } else {
    feature_license_save();
  }

  drupal_goto('feature_license/list');
}

function feature_license_save() {
  $feature_name = check_plain($_POST['feature_name']);
  $device_type = check_plain($_POST['select_device_type']);
  $description = check_plain($_POST['feature_description']);
  $chk_component_nid = check_plain($_POST['chk_component_nid']);

  // add feature_catalog to node
  $node = new stdClass();
  $node->type = 'feature_catalog';
  $node->uid = 1;
  $node->format = 0;
  $node->title = $feature_name;
  node_save($node);

  $feature_id = $node->nid;
  // add a new feature catalog
  $insert_feature_catalog_sql = "INSERT INTO {feature_catalog} (nid, name,device_type,description,delete_flag ) " . "VALUES (%d,'%s',%d,'%s',0 );";
  @db_query($insert_feature_catalog_sql, $feature_id, $feature_name, $device_type, $description);

  $insert_feature_config_sql = "INSERT INTO {feature_relation} ( id, feature_nid, component_nid ) VALUES( %d, %d, %d )";

  if (!empty($chk_component_nid)) {
    foreach ($chk_component_nid as $component_nids) {
      foreach ($component_nids as $component_nid) {
        // add feature_relation to node
        $node = new stdClass();
        $node->type = 'feature_relation';
        $node->uid = 1;
        $node->format = 0;
        $node->title = $feature_name;
        node_save($node);

        db_query($insert_feature_config_sql, $node->nid, $feature_id, $component_nid);
      }
    }
  }

  global $user;
  logUserActivity("Add Feature License", "Feature - " . $feature_name . " Added", '', '', '', $user->uid, ip_address(), time());

//	$targetUrl = str_replace('save', 'list', $_SERVER ['REQUEST_URI']);
//	header("Location: " . $targetUrl);
}

function feature_license_update() {
  $feature_id = check_plain($_POST['nid']);
  $feature_name = check_plain($_POST['feature_name']);
  $description = check_plain($_POST['feature_description']);
  $chk_component_nid = check_plain($_POST['chk_component_nid']);

  $update_feature_sql = "update {feature_catalog} set name='%s',description='%s' where nid=%d";
  db_query($update_feature_sql, $feature_name, $description, $feature_id);

  // delete old relations
  db_query("DELETE FROM {feature_relation} where feature_nid = %d ", $feature_id);
  $insert_feature_config_sql = "INSERT INTO {feature_relation} ( id, feature_nid, component_nid ) VALUES( %d, %d, %d )";

  if (!empty($chk_component_nid)) {
    foreach ($chk_component_nid as $component_nids) {
      foreach ($component_nids as $component_nid) {
        // add feature_relation to node
        $node = new stdClass();
        $node->type = 'feature_relation';
        $node->uid = 1;
        $node->format = 0;
        $node->title = $feature_name;
        node_save($node);

        db_query($insert_feature_config_sql, $node->nid, $feature_id, $component_nid);
      }
    }
  }


  global $user;
  module_load_include("module", "covidien_activity");
  logUserActivity("Update Feature License", "Feature - " . $feature_name . " Updated", ' ', ' ', ' ', $user->uid, ip_address(), time());

  $targetUrl = str_replace('update', 'list', $_SERVER ['REQUEST_URI']);
  header("Location: " . $targetUrl);
}

function feature_license_delete() {
  $id = check_plain($_POST['nid']);
  $feature_name = check_plain($_POST['feature_name']);

  $sql_feature_nid = "select count(feature_nid) count from feature_device where feature_nid=%d ";

  $count_result = db_fetch_array(db_query($sql_feature_nid));

  $count = $count_result['count'];


  if ($count == 0) {
    db_query("delete from {feature_catalog} where nid=%d", $id);
//  $delete_feature_catalog_sql = "update {feature_catalog} set delete_flag=%d where nid=%d";
//  db_query($delete_feature_catalog_sql, 1, $id);

    db_query("DELETE FROM {feature_relation} where feature_nid = %d ", $id);

    $delete_feature_device_sql = "update {feature_device} set delete_flag=%d where id=%d";
    db_query($delete_feature_device_sql, 1, $id);

    global $user;
    logUserActivity("Delete Feature License", "Feature - " . $feature_name . " DELETED", '', '', '', $user->uid, ip_address(), time());
  }



  $targetUrl = str_replace('delete', 'list', $_SERVER ['REQUEST_URI']);
  header("Location: " . $targetUrl);
}

function covidien_theme_preprocess_feature_license_list(&$vars) {
  // pagesize need to customize
  $pageSize = 10;
  // sql extends start
  $device_type_id = check_plain($_GET['device_type_id']);
  $product_line = check_plain($_GET['product_line']);
  $hardware_type = check_plain($_GET['hardware_type']);
  $hardware_id = check_plain($_GET['hardware_id']);
  $hardware_version = check_plain($_GET['hardware_version']);
  $search_name = check_plain($_GET['search_name']);
  if (!isset($product_line)) {
    $product_line = $_SESSION ['default_cot'];
  } else {
    $_SESSION ['default_cot'] = $product_line;
  }
  // sql need to customize
  // 1 –permanent; 0 –temporary. ; SELECT vid , title FROM node WHERE TYPE="devicetype" ORDER BY title
  $args = array();
  $sql = "select a.nid, a.name , b.title as device_type , a.description
	          from {feature_catalog} a join {node} b 
	            on a.device_type=b.nid AND b.TYPE='devicetype' 
	          join content_field_device_product_line d 
	            on d.nid=a.device_type 
	          where d.field_device_product_line_nid= %d 
                and a.delete_flag = 0 ";
  $args[] = $product_line;
  if (isset($device_type_id) && $device_type_id != 'All') {
    $sql .= ' and a.device_type = %d ';
    $args[] = $device_type_id;
  }
  if (!empty($search_name)) {
    $sql .= " AND a.name like '%%%s%%'";
    $args [] = $search_name;
  }
  // table head need to customize
  $header = array(
    array(
      'data' => t('Feature Name'),
      'field' => 'name',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Device Type'),
      'field' => 'device_type',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Description'),
      'field' => 'description',
      'sort' => 'asc'
    )
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY b.changed DESC ";
  $count_query_sql = ' SELECT COUNT(*) as total FROM (' . $sql . ') AS result ';
  $result = pager_query($sql, $pageSize, 0, $count_query_sql, $args);
  while ($row = db_fetch_object($result)) {
    $rows [$row->nid] ['feature_name'] = l($row->name, "feature_license/edit/$row->nid");
    $rows [$row->nid] ['device_type'] = $row->device_type;
    $rows [$row->nid] ['description'] = $row->description;
  }
  $vars ['result_table'] = '';
  $vars ['result_table'] .= theme_table($header, $rows);
  $vars ['result_table'] .= theme('pager', NULL, 10);
  $form_device_type = field_device_type_select($device_type_id);
  $form_device_type['select_device_type']['#id'] = 'sel_device_type';
  $form_device_type['select_device_type']['#name'] = 'sel_device_type';
  $vars['select_device_type'] = drupal_render($form_device_type['select_device_type']);
  $vars ['device_type_id'] = $device_type_id;
  drupal_set_title(t('Feature Catalog'));
}

function covidien_theme_preprocess_feature_license_form(&$vars) {
  drupal_add_js(drupal_get_path('module', 'covidien_feature_license') . '/js/covidien_feature_license.js');
  // if edit
  $feature_id = arg(2);
  $conf_type = check_plain($_POST['conf_type']);
  $select_device_type = check_plain($_POST['select_device_type']);
  $product_line = check_plain($_POST['hid_product_line']);

//  $device_type_id =  check_plain($_POST['select_device_type']);
//  echo $select_device_type , $product_line ; exit;
  // set default software
  if (empty($conf_type)) {
    $conf_type = array('software');
  }
  $feature_form = feature_license_form();
  // device type <select>
  $form_device_type = field_device_type_select($select_device_type);
  $vars['select_device_type'] = drupal_render($form_device_type['select_device_type']);
//  $device_type_id = key($device_type_form ['select_device_type'] ['#options']);
  if ($select_device_type) {
    $feature_form['select_device_type']['#value'] = $select_device_type;
//       $feature_form['select_device_type']['#default_value'] = $select_device_type;
  }
  if ($feature_id && is_numeric($feature_id)) {
    drupal_set_title(t('Edit Feature to Catalog'));
    $sql_type = "select distinct n.type from  feature_relation f join node n on n.nid = f.component_nid where f.feature_nid = %d ";
    $compentent_type_result = db_query($sql_type, $feature_id);
    while ($item = db_fetch_array($compentent_type_result)) {
      $conf_type[] = $item['type'];
    }
    $query = "SELECT f.nid, f.name ,  f.description, f.device_type ,  GROUP_CONCAT(distinct c.component_nid) component_nid
                FROM feature_catalog f left join feature_relation c
                    on f.nid = c.feature_nid 
                WHERE f.nid = %d";
    $result = db_query($query, $feature_id);
    $row = db_fetch_object($result);
    $feature = array(
      'nid' => $row->nid,
      'name' => $row->name,
      'description' => $row->description,
      'device_type_id' => $row->device_type,
      'component_nid' => $row->component_nid
    );

    $feature_form['select_device_type']['#value'] = $row->device_type;

    $feature_form['select_device_type']['#attributes'] = array('disabled' => 'disabled');

    $feature_form['feature_name']['#value'] = $feature['name'];
    $feature_form['feature_description']['#value'] = $feature['description'];


    $select_device_type = $row->device_type;

    $vars ['feature'] = $feature;
  } else {
    drupal_set_title(t('Add Feature to Catalog'));
  }


  if ($product_line) {
    $_SESSION ['default_cot'] = $product_line;
  } else {
    $product_line = $_SESSION ['default_cot'];
  }



  if (in_array('software', $conf_type)) {
    // default
    $vars ['software_table'] = _software_table($select_device_type, $product_line);
  }


  if (in_array('hardware', $conf_type)) {
    $vars ['hardware_table'] = _hardware_table($select_device_type, $product_line);
  }



  if (in_array('firmware', $conf_type)) {
    $vars ['firmware_table'] = _firmware_table($select_device_type, $product_line);
  }


  $vars['conf_type'] = implode('","', $conf_type);

  $vars['form'] = $feature_form;
}

function _filter_device_type($product_line, $device_type_id) {
  module_load_include('module', 'covidien_firmware', 'module');
  $form ['select_device_type'] = array(
    '#type' => 'select',
    '#id' => 'sel_device_type',
    '#name' => 'sel_device_type',
    '#options' => _get_device_list_options($product_line),
    '#default_value' => $device_type_id,
    '#value' => $device_type_id
  );
  return $form;
}

/**
 * list software item by device type and product line
 *
 * @param unknown $device_type_id
 * @param unknown $product_line
 * @return Ambigous <An, string>
 */
function _software_table($device_type_id, $product_line) {
  $page_size = 10;
  // sql
  $args = array();
  $sql = "select distinct s.nid, n.title , n.type  , s.field_sw_version_value ,s.field_sw_description_value , d.field_device_type_nid
            from content_type_software s 
            join node n
              on s.nid=n.nid and s.vid=n.vid
            join  content_field_device_type d
              on d.nid= s.nid
            join  content_field_expiration_datetime e
              on n.vid=e.vid
            where e.field_expiration_datetime_value is null ";
  if (is_numeric($device_type_id)) {
    $sql .= " and d.field_device_type_nid = %d ";
    $args [] = $device_type_id;
  } else {
    $sql .= " and d.field_device_type_nid in ( SELECT a.nid  FROM node a , content_field_device_product_line b
 	    WHERE a.type='devicetype' AND a.nid = b.nid AND field_device_product_line_nid = %d  )  ";
    $args [] = $product_line;
  }
  // sql extends end
  // table head need to customize
  $header = array(
    array(
      'data' => t(' ')
    ),
    array(
      'data' => t('Name'),
      'field' => 'n.title',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Type'),
      'field' => 'n.type',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Revision'),
      'field' => 's.field_sw_version_value',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Description'),
      'field' => 's.field_sw_description_value',
      'sort' => 'asc'
    )
  );
  $sql .= " GROUP BY s.nid " . check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY n.changed DESC ";
//  $count_query_sql = "select count(*) count from (" .$sql .") as count_view " ;
  $count_query_sql = ' SELECT COUNT(*) as total FROM (' . $sql . ') AS result ';
  $result = pager_query($sql, $page_size, 0, $count_query_sql, $args);
  while ($row = db_fetch_object($result)) {
    $rows [$row->nid] ['nid'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\"  name=chk_component_nid[$row->field_device_type_nid][$row->nid] >";
    $rows [$row->nid] ['name'] = $row->title;
    $rows [$row->nid] ['conf_type'] = $row->type;
    $rows [$row->nid] ['version'] = $row->field_sw_version_value;
    $rows [$row->nid] ['description'] = $row->field_sw_description_value;
  }
  $output .= theme_table($header, $rows);
  $output .= theme('pager', NULL, $page_size, 0);
  return $output;
}

function _hardware_table($device_type_id, $product_line) {
  // sql
  $args = array();
  $sql = "select distinct h.nid, n.title, n.type, h.field_hw_version_value , h.field_hw_description_value, d.field_device_type_nid
            from content_type_hardware h join node n
              on h.nid=n.nid
            join  content_type_device_component_history c
              on c.field_device_component_nid=h.nid
            join  content_field_device_type d
              on d.nid= c.field_component_device_nid ";

  if (is_numeric($device_type_id)) {
    $sql .= " where d.field_device_type_nid = %d ";
    $args [] = $device_type_id;
  } else {
    $sql .= " where d.field_device_type_nid in ( SELECT a.nid  FROM node a , content_field_device_product_line b
 	    WHERE a.type='devicetype' AND a.nid = b.nid AND field_device_product_line_nid = %d  )  ";
    $args [] = $product_line;
  }
  // sql extends end
  // table head need to customize
  $header = array(
    array(
      'data' => t(' ')
    ),
    array(
      'data' => t('Name'),
      'field' => 'n.title',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Type'),
      'field' => 'n.type',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Revision'),
      'field' => 'h.field_hw_version_value',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Description'),
      'field' => 'h.field_hw_description_value',
      'sort' => 'asc'
    )
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY n.changed DESC ";
  $result = db_query($sql, $args);
  while ($row = db_fetch_object($result)) {
    $rows [$row->nid] ['nid'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\"  name=chk_component_nid[$row->field_device_type_nid][$row->nid] >";
    $rows [$row->nid] ['name'] = $row->title;
    $rows [$row->nid] ['conf_type'] = $row->type;
    $rows [$row->nid] ['version'] = $row->field_hw_version_value;
    $rows [$row->nid] ['description'] = $row->field_hw_description_value;
  }
  // table head need to customize
  $output = "<tr><td style=padding-left: 0px;><h4>Select the Hardware Item from the table below </h4></td></tr>";
  $output .= theme_table($header, $rows, array('class' => 'feature_named_config_table'));
  $output .= theme('pager', NULL, 10, 0);
  return $output;
}

function _firmware_table($device_type_id, $product_line) {
  // sql
  $args = array();
  $sql = "select distinct f.nid, f.device_type_id, n.title , n.type , f.version , f.description
            from firmware f join node n
              on f.nid=n.nid ";
  if (is_numeric($device_type_id)) {
    $sql .= " where f.device_type_id = %d ";
    $args [] = $device_type_id;
  } else {
    $sql .= " where f.device_type_id in ( SELECT a.nid  FROM node a , content_field_device_product_line b
 	    WHERE a.type='devicetype' AND a.nid = b.nid AND field_device_product_line_nid = %d  )  ";
    $args [] = $product_line;
  }
  // sql extends end
  // table head need to customize
  $header = array(
    array(
      'data' => t(' ')
    ),
    array(
      'data' => t('Name'),
      'field' => 'n.title',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Type'),
      'field' => 'n.type',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Revision'),
      'field' => 'f.version',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Description'),
      'field' => 'f.description',
      'sort' => 'asc'
    )
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY n.changed DESC ";
  $result = db_query($sql, $args);
  while ($row = db_fetch_object($result)) {
    $rows [$row->nid] ['nid'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\"  name=chk_component_nid[$row->device_type_id][$row->nid] >";
    $rows [$row->nid] ['name'] = $row->title;
    $rows [$row->nid] ['conf_type'] = $row->type;
    $rows [$row->nid] ['version'] = $row->version;
    $rows [$row->nid] ['description'] = $row->description;
  }
  return "<tr><td style=padding-left: 0px;><h4>Select the Firmware Item from the table below </h4></td></tr>" . theme_table($header, $rows, array(
      'class' => 'feature_named_config_table'
  ));
}
