<?php

/**
 * Implement hook_menu
 */
function covidien_named_config_menu() {
  $items = array();
  // URL to access add new User
  $items ['named-config/list'] = array(
    'page callback' => 'covidien_named_config_list',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/add'] = array(
    'page callback' => 'covidien_named_config_add',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/save'] = array(
    'page callback' => 'covidien_named_config_add_save',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/edit/%'] = array(
    'page callback' => 'covidien_named_config_edit',
    'page arguments' => array(3),
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/update'] = array(
    'page callback' => 'covidien_named_config_edit_save',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/delete'] = array(
    'page callback' => 'covidien_named_config_delete',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/check-unique'] = array(
    'page callback' => 'covidien_named_config_check_unique',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/preview'] = array(
    'page callback' => 'covidien_named_config_preview',
    'page arguments' => array(2),
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get/list'] = array(
    'page callback' => 'covidien_named_get_the_config_list_table',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get/substatus/%'] = array(
    'page callback' => 'covidien_named_get_substatus_option',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get-warning-config'] = array(
    'page callback' => 'covidien_named_get_warning_config',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/validate-sw-hw'] = array(
    'page callback' => 'covidien_named_validate_software_hardware',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/getRegulatoryExp'] = array(
    'page callback' => 'covidien_named_config_get_reg_exception',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get-item-table/%'] = array(
    'page callback' => 'covidien_named_config_get_item_table',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get-system-config-table/%/%/%'] = array(
    'page callback' => 'covidien_named_config_get_system_config_table',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get-hardware-config-table/%/%/%'] = array(
    'page callback' => 'covidien_named_config_get_hardware_config_table',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get-software-config-table/%/%/%'] = array(
    'page callback' => 'covidien_named_config_get_software_config_table',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/ajax/get-firmware-config-table/%/%/%'] = array(
    'page callback' => 'covidien_named_config_get_firmware_config_table',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/filter/devicetype'] = array(
    'page callback' => 'covidien_nc_filter_devicetype',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  $items ['named-config/global-config-type/ajax/%'] = array(
    'page callback' => 'covidien_nc_golbal_config_type',
    'access callback' => 'covidien_named_config_check_access',
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * hook_node_info
 */
function covidien_named_config_node_info() {
  return array(
    'named_configuration' => array(
      'name' => t('Named Configuration'),
      'module' => 'covidien_named_config',
      'description' => t('Named Configuration'),
    )
  );
}

/**
 * Implements hook_init()
 */
function covidien_named_config_init() {
  if (arg(0) == 'named-config') {
    drupal_add_js(drupal_get_path('theme', 'covidien_theme') . '/js/covidien.js');
    drupal_add_js('misc/ahah.js');
    drupal_add_js('misc/autocomplete.js');
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_common.js');
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  }
}

/**
 * Implements hook_theme()
 */
function covidien_named_config_theme() {
  return array(
    'covidien_named_config_list' => array(
      'template' => 'config_list',
      'arguments' => array('form' => NULL, 'get' => NULL),
    ),
    'covidien_named_config_form' => array(
      'template' => 'config_form',
      'arguments' => array('form' => NULL, 'get' => NULL),
    ),
  );
}

/**
 * menu access callback
 * @global type $user
 * @return boolean
 */
function covidien_named_config_check_access() {
  return covidien_cot_admin_access_callback('configuration');
}

/**
 * menu callback named-config/list
 * @return type
 */
function covidien_named_config_list() {
  drupal_set_title(t('System Administration'));
  $output = theme('covidien_named_config_list');
  return $output;
}

/**
 * menu callback named-config/add
 * @return type
 */
function covidien_named_config_add() {
  drupal_set_title(t('Add a New Named Configuration'));
  $output = theme('covidien_named_config_form');
  return $output;
}

/**
 * menu callback named-config/edit/%
 * @return type
 */
function covidien_named_config_edit() {
  drupal_set_title(t('Edit a Named Configuration'));
  $output = theme('covidien_named_config_form');
  return $output;
}

function covidien_named_config_delete() {
  $nid = check_plain($_GET['nid']);
  db_query("UPDATE {node} SET status = 0 WHERE nid = %d", $nid);
  drupal_set_message(t('Has deleted name @name', array('@name' => check_plain($_GET['name']))));
  drupal_goto('named-config/list');
}

function covidien_named_config_preview($config_id) {
  $config_id = $config_id ? $config_id : check_plain($_GET['id']);
  if (!$config_id) {
    drupal_json(array('status' => 'faild', 'data' => ''));
    exit();
  }
  $type = db_result(db_query("SELECT t.name FROM {named_configuration_relation} r JOIN {named_configuration_type} t ON r.left_type = t.id WHERE r.left_nid = %d GROUP BY t.id;", $config_id));

  $table = '';
  switch ($type) {
    case 'system_configuration':
      $result = db_query("SELECT rsn.nid, rsn.title, t.id AS type_id, t.title AS type_name,
        s.field_sw_version_value AS sw_version, h.field_hw_version_value AS hw_version, f.version AS fw_version
        FROM {named_configuration_relation} r 
        JOIN {node} n ON n.nid = r.right_nid
        JOIN {named_configuration_type} t ON t.id = r.right_type
        JOIN {named_configuration} c ON c.nid = n.nid
        JOIN {named_configuration_relation} rs ON rs.left_nid = r.right_nid
        JOIN {node} rsn ON rsn.nid = rs.right_nid
        LEFT JOIN {content_type_software} s ON rsn.nid = s.nid AND rsn.vid = s.vid
        LEFT JOIN {content_type_hardware} h ON rsn.nid = h.nid AND rsn.vid = h.vid
        LEFT JOIN {firmware} f ON rsn.nid = f.nid AND rsn.vid = f.vid
        WHERE r.left_nid = %d", $config_id);
      $rows = array();
      while ($row = db_fetch_object($result)) {
        $varsion = ($row->sw_version) ? $row->sw_version : ($row->fw_version ? $row->fw_version : $row->hw_version);
        $rows[$row->type_name][$row->nid]['name'] = $row->title . ' v' . $varsion;
      }
      $table_item = array();
      foreach ($rows as $key => $item) {
        $header = array('Name & Version');
        $table_item['table'][$key]['data'] = theme_table($header, $item);
        $table_item['table'][$key]['valign'] = 'top';
      }
      $header = array_keys($rows);
      $table = theme_table($header, $table_item);
      break;
    case 'hardware_configuration':
      $result = db_query("SELECT n.nid, n.title, h.field_hw_part_value, h.field_hw_version_value, h.field_hw_description_value, r.required FROM named_configuration_relation r 
        JOIN {node} n ON n.nid = r.right_nid
        JOIN {content_type_hardware} h ON h.nid = n.nid
        WHERE r.left_nid = %d", $config_id);
      $rows = array();
      while ($row = db_fetch_object($result)) {
        $rows[$row->nid]['title'] = $row->title;
        $rows[$row->nid]['part'] = $row->field_hw_part_value;
        $rows[$row->nid]['version'] = $row->field_hw_version_value;
        $rows[$row->nid]['description'] = $row->field_hw_description_value;
        //$rows[$row->nid]['required'] = $row->required == 2 ? 'Yes' : 'No';
      }
      $header = array('Name', 'Part', 'Version', 'Description');
      $table = theme_table($header, $rows);
      break;
    case 'software_configuration':
      $result = db_query("SELECT n.nid,  n.title, s.field_sw_part_value, s.field_sw_version_value, s.field_sw_description_value, r.required, s.sw_priority
        FROM {named_configuration_relation} r 
        JOIN {node} n ON n.nid = r.right_nid
        JOIN {content_type_software} s ON s.nid = n.nid
        WHERE r.left_nid = %d", $config_id);
      $rows = array();
      while ($row = db_fetch_object($result)) {
        $rows[$row->nid]['title'] = $row->title;
        $rows[$row->nid]['part'] = $row->field_sw_part_value;
        $rows[$row->nid]['version'] = $row->field_sw_version_value;
        $rows[$row->nid]['primary'] = $row->required == 2 ? 'Yes' : 'No';
        $rows[$row->nid]['prioirty'] = $row->sw_priority;
      }
      $header = array('Name', 'Part', 'Version', 'Primary', 'Comparison Order');
      $table = theme_table($header, $rows);
      break;
    case 'firmware_configuration':
      $result = db_query("SELECT n.nid, n.title, f.part, f.version, f.description FROM named_configuration_relation r 
        JOIN {node} n ON n.nid = r.right_nid
        JOIN {firmware} f ON f.nid = n.nid
        WHERE r.left_nid = %d", $config_id);
      $rows = array();
      while ($row = db_fetch_object($result)) {
        $rows[$row->nid]['title'] = $row->title;
        $rows[$row->nid]['part'] = $row->part;
        $rows[$row->nid]['version'] = $row->version;
        $rows[$row->nid]['description'] = $row->description;
      }
      $header = array('Name', 'Part', 'Version', 'Description');
      $table = theme_table($header, $rows);
      break;
    default:
      break;
  }

  drupal_json(array('status' => 'success', 'data' => $table));
  exit();
}

function named_version_exists($name, $version) {
  $count = db_result(db_query("SELECT COUNT(*) FROM {view_named_configuration} WHERE title='%s' AND version ='%s'", $name, $version));
  return $count;
}

function covidien_named_config_check_unique() {
  $name = check_plain($_GET['name']);
  $version = check_plain($_GET['version']);
  if (named_version_exists($name, $version)) {
    echo "1";
  } else {
    echo "0";
  }
  exit();
}

function covidien_named_config_save($config) {
  $id = $config['id'];
  $now = time();
  //add to node
  $node = node_load($id);
  if (!$node) {
    $node = new stdClass();
    $node->nid = $id;
    $node->type = 'named_configuration';
    $node->uid = 1;
    $node->format = 0;
  }
  $node->title = $config['name'];
  $node->changed = $now;
  node_save($node);
  $node->nid = $node->nid ? $node->nid : db_last_insert_id('node', 'nid');

  $message = '';
  if ($config['id']) {
    //update GATEWAY-2442 only can change status
    //update named_configuration
    $sql = "UPDATE {named_configuration} SET status=%d";
    $pram[] = $config['status'];
    //Obsolete
    if ($config['status'] == _covidien_named_get_status_id('Obsolete') && !empty($config['obsolete_time'])) {
      $sql .= ", obsolete_time=UNIX_TIMESTAMP(str_to_date('%s','%%m/%%d/%%Y'))";
      $pram[] = $config['obsolete_time'];
    }
    $sql .= " WHERE nid = %d";
    $pram[] = $node->nid;
    db_query($sql, $pram);
  } else {
    //insert named_configuration
    $sql = "INSERT INTO {named_configuration} (nid, type_id, device_type_id, version, description, status, substatus) VALUES (%d, %d, %d, '%s','%s', %d, %d)";
    db_query($sql, $node->nid, $config['type_id'], $config['device_type_id'], $config['version'], $config['description'], $config['status'], $config['substatus']);
    $message = t('Has been created named configuration @name.', array('@name' => $config['name']));
    //insert named_configuration_relation
    module_load_include('module', 'covidien_firmware', 'module');
    save_config_item_relation($node->nid, $config['type_id'], $config['relations'], $config['required_relations']);
  }
  //Add user activity log.
  global $user;
  if (empty($config['id'])) {
    $activity_type = 'Add Named Configuration';
    $suffix = ' created';
  } else {
    $node = node_load($config['id']);
    $activity_type = 'Edit Named Configuration';
    $suffix = ' updated';
  }
  logUserActivity($activity_type, $node->title . $suffix, '', '', '', $user->uid, ip_address(), time());
  return $message;
}

function covidien_named_config_add_save() {
  $post = filter_xss_arr($_POST);
  $config['id'] = $post['id'];
  $config['type_id'] = $post['config_type'];
  $config['name'] = $post['txt_name'];
  $config['device_type_id'] = $post['field_device_type_nid'];
  $config['version'] = $post['txt_version'];
  //As version will hide from user, set a default value.
  $config['version'] = '1';
  $config['description'] = $post['txt_description'];
  $config['obsolete_time'] = $post['obsolete_time'];
  $config['status'] = $post['config_status'];
  //if checked box substatus is post data else substatus is Normal
  $config['substatus'] = $post['is_warning'] ? $post['select_substatus'] : _covidien_named_get_substatus_id('Normal');
  //relations 
  $config['relations'] = $post['reference_list'];
  $config['required_relations'] = $post['reference_required_list'];
  //validate named config form
  covidien_named_config_form_validate($config);
  //save named configuration
  $message = covidien_named_config_save($config);
  //drupal_set_message($message);
  drupal_goto('named-config/list');
}

function covidien_named_config_form_validate($config) {
  if ($config['id']) {
    if (!covidien_ui_input_validate($config['name'])) {
      form_set_error('txt_name', 'Invalid Named Configration Name.');
    }
    //GATEWAY-3020 Add check status when change  
    if (_covidien_named_get_status_name($config['status']) != 'In Production') {
      $rows = named_config_check_status_change($config['id']);
      if (count($rows) > 0) {
        form_set_error('config_status', 'Please first change status ' . implode(',', $rows));
      }
    }
  } else {
    if (!covidien_ui_input_validate($config['name'], true)) {
      form_set_error('txt_name', 'Invalid Named Configration Name.');
    }
    $nid = db_result(db_query("SELECT n.nid FROM {node} n JOIN {named_configuration} nc ON n.nid = nc.nid 
    WHERE title='%s' AND device_type_id=%d", $config['name'], $config['device_type_id']));
    if ($nid) {
      form_set_error('txt_name', 'Duplicate Configration Name.');
    }
  }
  if (count(form_get_errors())) {
    drupal_goto(referer_uri());
    return false;
  }
  return true;
}

function covidien_named_config_edit_save() {
  covidien_named_config_add_save();
}

function covidien_theme_preprocess_covidien_named_config_list(&$vars) {
  $device_type_id = check_plain($_GET['device_type_id']);
  $product_line = covidien_get_product_line();
  // table head need to customize
  module_load_include('module', 'covidien_firmware', 'module');
  $form_device_type = field_device_type_select($device_type_id);
  $form_config = _covidien_named_config_select_type();
  $vars['select_device_type'] = drupal_render($form_device_type['select_device_type']);
  $form_config['select_config_type']['#options']['0'] = t('All');
  ksort($form_config['select_config_type']['#options']);
  $vars['select_config_type'] = drupal_render($form_config['select_config_type']);

  $vars['result_table'] = get_the_config_list_table($product_line, $device_type_id);
  $vars['device_type_id'] = $device_type_id;
}

function covidien_theme_preprocess_covidien_named_config_form(&$vars) {
  drupal_add_js(drupal_get_path('module', 'covidien_named_config') . '/covidien_named_config.js');
  $product_line = covidien_get_product_line();

  $id = arg(2);
  module_load_include('module', 'covidien_firmware', 'module');
  if ($id && is_numeric($id)) {
    $form_device_type = field_device_type_select($device_type_id, 'All');
  } else {
    $form_device_type = field_device_type_select($device_type_id);
  }
  if ($form_device_type['select_device_type']['#options'] > 1) {
    unset($form_device_type['select_device_type']['#options'][0]);
  }

  $config = array();
  $selectedCountryStr = '';
  if ($id && is_numeric($id)) {
    $query = "SELECT c.nid, c.type_id, n.title, c.device_type_id, c.version, c.description, 
        from_unixtime(c.obsolete_time,'%%m/%%d/%%Y') as obsolete_time, c.status, c.substatus
				FROM {named_configuration} c
				JOIN {node} n ON c.nid = n.nid
				WHERE c.nid = %d";
    $config_result = db_query($query, $id);
    $row = db_fetch_object($config_result);
    $config = array(
      'id' => $row->nid,
      'type_id' => $row->type_id,
      'name' => $row->title,
      'description' => $row->description,
      'device_type_id' => $row->device_type_id,
      'version' => $row->version,
      'obsolete_time' => $row->obsolete_time,
      'status' => $row->status,
      'substatus' => $row->substatus,
    );

    //device type
    $form_device_type['select_device_type']['#default_value'] = $row->device_type_id;
    $form_device_type['select_device_type']['#value'] = $row->device_type_id;
    $form_device_type['select_device_type']['#options'] = array($row->device_type_id => $form_device_type['select_device_type']['#options'][$row->device_type_id]);

    // select regulatory exception from software and firmware
    $sql = "select distinct a.right_nid as nid, e.title as country,
      			concat(h.title, ' v ',c.field_sw_version_value) as name from 
      			named_configuration_relation a,
      			named_configuration_type b,
      			content_type_software c left join
      			content_field_expiration_datetime i
      			on c.nid = i.nid and c.vid = i.vid,
      			content_type_software_approval_unavailable d,
      			node e,
      			named_configuration_type f,
      			node h 
      			where a.left_nid = %d
      			and a.left_type = b.id
      			and b.name = 'software_configuration'
      			and a.right_type = f.id
      			and f.name = 'software_item'
      			and a.right_nid = c.nid
      			and i.field_expiration_datetime_value is null
      			and c.nid = d.field_reg_approved_component_nid
      			and e.nid = d.field_reg_approved_country_nid
      			and a.right_nid = h.nid
      		union all
      		select distinct a.right_nid as nid, e.title as country, 
    			concat(h.title, ' v ',g.version) as name from 
    			named_configuration_relation a,
    			named_configuration_type b,
    			firmware_exception c,
    			node e,
    			named_configuration_type f,
    			firmware g,
    			node h
    			where a.left_nid = %d
    			and a.left_type = b.id
    			and b.name = 'firmware_configuration'
    			and a.right_type = f.id
    			and f.name = 'firmware_item'
    			and a.right_nid = c.firmware_nid
    			and c.country_nid = e.nid
    			and a.right_nid = g.nid
    			and a.right_nid = h.nid
      		union all
      		select distinct
                a.right_nid as nid, h.title as country,
            	concat(i.title, ' v ', j.version) as name
            from
                named_configuration_relation a,
                named_configuration_type b,
            	named_configuration_type c,
            	content_type_software d left join 
            	content_field_expiration_datetime e 
            	on d.nid = e.nid and d.vid = e.vid, 
            	named_configuration_relation f,
            	content_type_software_approval_unavailable g,
            	node h,
            	node i,
            	named_configuration j
            where
                a.left_type = b.id
            	and b.name = 'system_configuration'
            	and a.right_type = c.id
                and c.name = 'software_configuration' 
            	and e.field_expiration_datetime_value is null
            	and a.right_nid = f.left_nid
            	and f.right_nid = d.nid
            	and d.nid = g.field_reg_approved_component_nid
            	and g.field_reg_approved_country_nid = h.nid
            	and i.nid = a.right_nid
            	and j.nid = a.right_nid
            	and a.left_nid = %d
            union all
            select distinct
                a.right_nid as nid, h.title as country,
            	concat(i.title, ' v ', j.version) as name
            from
                named_configuration_relation a,
                named_configuration_type b,
            	named_configuration_type c,
            	firmware_exception d, 
            	named_configuration_relation f,
            	content_type_software_approval_unavailable g,
            	node h,
            	node i,
            	named_configuration j
            where
                a.left_type = b.id
            	and b.name = 'system_configuration'
            	and a.right_type = c.id
                and c.name = 'firmware_configuration'
            	and a.right_nid = f.left_nid
            	and f.right_nid = d.firmware_nid
            	and d.country_nid = h.nid
            	and i.nid = a.right_nid
            	and j.nid = a.right_nid
            	and a.left_nid = %d";

    $result = db_query($sql, $id, $id, $id, $id);
    while ($item = db_fetch_object($result)) {
      $selectedCountryStr .= $item->nid . "," . $item->country . "," . $item->name . ";";
    }
  }
  $form_config = _covidien_named_config_select_type($config);

  $device_type_id = $config['id'] ? $config['device_type_id'] : $_SESSION['default_dtype'];
  $normal_id = _covidien_named_get_substatus_id('Normal');

  $vars['config'] = $config;
  $vars['select_device_type'] = drupal_render($form_device_type['select_device_type']);
  $vars['select_config_type'] = drupal_render($form_config['select_config_type']);
  $vars['select_config_status'] = drupal_render($form_config['select_config_status']);
  $vars['select_substatus'] = drupal_render($form_config['select_substatus']);
  $vars['normal_id'] = $normal_id;

  $vars['hardware_table'] = get_the_hardware_list_table(0, $device_type_id, $id);
  $vars['software_table'] = get_the_software_list_table(0, $device_type_id, $id);
  $vars['firmware_table'] = get_the_firmware_list_table(0, $device_type_id, $id);

  $lr_status = db_result(db_query("SELECT id FROM {named_configuration_status} WHERE name='Limited Release'"));
  $config_status = $config['status'] ? $config['status'] : $lr_status;
  $vars['config_table'] = get_hsf_config_list_table(0, $device_type_id, $id, $config_status);
  $vars['selectedCountryStr'] = $selectedCountryStr;
}

function covidien_named_get_the_config_list_table() {
  $table = get_the_config_list_table();
  drupal_json(array('status' => 'success', 'data' => $table));
}

function get_the_config_list_table($product_line = 0, $device_type_id = 0, $type_id = 0) {
  $product_line = covidien_get_product_line($product_line);
  $device_type_id = $device_type_id ? $device_type_id : check_plain($_GET['device_type_id']);
  $type_id = $type_id ? $type_id : check_plain($_GET['config_type']);
  // pagesize need to customize
  $page_size = 10;
  // sql need to customize
  $sql = "SELECT vc.nid, nc.title, vc.version, vc.status, vc.substatus, SUBSTR(nt.title, 6, 50) AS type, 
  			node.title AS deviceType, nc.created, nc.changed
			FROM {view_named_configuration} vc
			JOIN {node} nc ON nc.nid = vc.nid
			LEFT JOIN {node} ON vc.device_type_id = node.nid
			LEFT JOIN {named_configuration_type} nt ON vc.type_id = nt.id AND nt.display = 1
			LEFT JOIN {content_field_device_product_line} pl ON vc.device_type_id = pl.nid
			WHERE node.type = 'devicetype' ";
  // sql extends start
  $args = array();

  if ($product_line && is_numeric($product_line)) {
    $sql .= " AND pl.field_device_product_line_nid = %d ";
    $args[] = $product_line;
  }
  if ($device_type_id && is_numeric($device_type_id)) {
    $sql .= " AND vc.device_type_id = %d ";
    $args[] = $device_type_id;
  }
  if (is_numeric($type_id)) {
    $sql .= " AND vc.type_id = %d ";
    $args[] = $type_id;
  }

  $header = array(
    array('data' => t('Configuration Name'), 'field' => 'nc.title'),
    #array('data' => t('Version'), 'field' => 'vc.version'),
    array('data' => t('Type'), 'field' => 'nt.name'),
    array('data' => t('Device Type'), 'field' => 'node.title'),
    array('data' => t('Status'), 'field' => 'vc.status'),
    array('data' => t('Warning Status'), 'field' => 'vc.substatus'),
    array('data' => t('Date Created'), 'field' => 'nc.created'),
    array('data' => t('Date Updated'), 'field' => 'nc.changed', 'sort' => 'desc'),
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY nc.changed DESC ";
  // sql extends end
  $result = pager_query($sql, $page_size, 0, NULL, $args);
  $rows = array();
  global $user;
  while ($row = db_fetch_object($result)) {
    if (is_array($user->devices_access) && in_array('edit', $user->devices_access['configuration'])) {
      $rows[$row->nid]['title'] = l($row->title, "named-config/edit/$row->nid", array('attributes' => array('configid' => $row->nid)));
    } else {
      $rows[$row->nid]['title'] = $row->title;
    }
    #$rows[$row->nid]['version'] = $row->version;
    $rows[$row->nid]['type'] = $row->type;
    $rows[$row->nid]['deviceType'] = $row->deviceType;
    $rows[$row->nid]['status'] = $row->status;
    $rows[$row->nid]['substatus'] = $row->substatus;
    $rows[$row->nid]['create_time'] = $row->created ? date('Y-m-d H:i:s A', $row->created) : '';
    $rows[$row->nid]['update_time'] = $row->changed ? date('Y-m-d H:i:s A', $row->changed) : '';
  }

  // table head need to customize
  $output = '';
  $output .= theme_table($header, $rows);
  $output .= theme('pager', NULL, 10, 0);

  return $output;
}

/**
 * set named configuration form
 * @param array $config
 * @return array
 */
function _covidien_named_config_select_type($config = array()) {
  $sql = "SELECT id, title FROM {named_configuration_type} WHERE display = 1 ";
  $args = array();
  if ($config['id'] && $config['type_id']) {
    $sql .= " AND id = %d ";
    $args[] = $config['type_id'];
  }
  $sql .= " ORDER BY wight ASC ";
  $result = db_query($sql, $args);
  $type_option = array();
  while ($row = db_fetch_object($result)) {
    $type_option[$row->id] = $row->title;
  }
  //use default session config type
  $config['type_id'] = $config['type_id'] ? $config['type_id'] : $_SESSION['config_type'];
  ksort($type_option);
  $form['select_config_type'] = array(
    '#type' => 'select',
    '#id' => 'config_type',
    '#name' => 'config_type',
    '#options' => $type_option,
    '#default_value' => $config['type_id'],
    '#value' => $config['type_id'],
  );
  $status_option = _covidien_named_get_status_rows($config['status'], $config['id']);
  //only type is System Named Configuration show Obsolete
  if ($type_option[$config['type_id']] != 'Named System Configuration') {
    $status_option_filp = array_flip($status_option);
    unset($status_option[$status_option_filp['Obsolete']]);
  }
  $form['select_config_status'] = array(
    '#type' => 'select',
    '#id' => 'config_status',
    '#name' => 'config_status',
    '#options' => $status_option,
    '#default_value' => $config['status'],
    '#value' => $config['status'],
  );
  $substatus_option = _covidien_named_get_substatus_rows($config['type_id']);
  $form['select_substatus'] = array(
    '#type' => 'select',
    '#id' => 'select_substatus',
    '#name' => 'select_substatus',
    '#options' => $substatus_option,
    '#default_value' => $config['substatus'],
    '#value' => $config['substatus'],
  );
  return $form;
}

/**
 * move button table
 */
function _named_config_move_right_table($type) {
  //move button
  $output .= '<div class="named-config-select-table-button"><br>';
  $output .= '<table><tr><td onclick="move_table_item_right(\'' . $type . '\');">';
  $output .= '<input type="button" class="form-submit" value="-->" /> ';
  $output .= '</td></tr>';
  $output .= '<tr><td onclick="move_table_item_left(\'' . $type . '\');">';
  $output .= '<input type="button" class="form-submit" value="<--" /> ';
  $output .= '</td></tr>';
  $output .= '</td></tr></tbody></table></div>';
  //right table
  $output .= '<div class="named-config-select-table-right">';
  $output .= '<span title="This field is required." class="form-required">*</span>Selected items';
  $output .= '<div class="named-config-select-table-right-content">';
  $output .= '<table id="right_table_' . $type . '"><thead><tr>';
  $output .= '<th></th>';
  if ($type == 's') {
    $output .= '<th>Primary</th>';
  }
  $output .= '<th>Name & Version</th>';
  $output .= '<th>Part Number</th>';
  if ($type == 's') {
    $output .='<th>Comparison Order</th>';
    $output .='<th>Type</th >';
  }
  if ($type == 'h' || $type == 'f') {
    $output .= '<th>Description</th>';
  }
  $output .= '</tr></thead></table>';
  $output .= '</div></div>';
  return $output;
}

/**
 * get_the_hardware_list_table
 * @param type $product_line default is 0
 * @param type $device_type_id default is 0 
 * @param type $config_id default is 0
 * @param type $hardware_type default is 0
 * @param type $status_id default is 0
 * @return type $output 
 */
function get_the_hardware_list_table($product_line = 0, $device_type_id = 0, $config_id = 0, $hardware_type = 0, $status_id = 0) {
  $query = "SELECT n.nid, n.title, h.field_hw_part_value, h.field_hw_version_value, h.field_hw_description_value
			FROM {content_field_device_type} d
			JOIN {content_type_hardware} h ON d.nid=h.nid AND d.vid=h.vid
			JOIN {node} n ON n.nid=h.nid AND n.vid=h.vid
			JOIN {content_field_device_product_line} pl ON d.field_device_type_nid=pl.nid
      JOIN {node} sn ON h.hw_status=sn.nid 
			LEFT JOIN {content_field_expiration_datetime} cfd ON cfd.nid=n.nid AND cfd.vid=n.vid
			WHERE cfd.field_expiration_datetime_value IS NULL "; //only can select status in ('In Production', 'Obsolete') 
  //get configuration status name 
  $status_name = db_result(db_query("SELECT name FROM {named_configuration_status} WHERE id = %d", $status_id));
  if ($status_name == 'In Production') {
    $query .= " AND sn.title IN ('In Production') ";
  } else {
    $query .= " AND sn.title IN ('Limited Release', 'In Production') ";
  }

  $args = array();
  if ($product_line && is_numeric($product_line)) {
    $sql .= " AND pl.field_device_product_line_nid = %d";
    $arg[] = $product_line;
  }
  if ($device_type_id && is_numeric($device_type_id)) {
    $query .= " AND d.field_device_type_nid = %d ";
    $args[] = $device_type_id;
  }
  if ($hardware_type && is_numeric($hardware_type)) {
    $query .= " AND h.field_hw_type_nid = %d ";
    $args[] = $hardware_type;
  }
  $header = array(
    array('data' => ''),
    //array('data' => t('Required')),
    array('data' => t('Name & Version')),
    array('data' => t('Part Number')),
    array('data' => t('Description')),
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY n.changed DESC ";

  $rows = array();
  $ref_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", 'hardware_item'));
  //get reference
  $refs = $config_id ? get_configuration_ref_list($config_id) : array();
  $result = db_query($query, $args);
  while ($row = db_fetch_object($result)) {
    //check reference
    $checked = array();
    $checked = check_ref_checked($row->nid, $refs, $ref_type);
    $rows[$row->nid]['select_nid'] = '<input type="checkbox" class="form-checkbox" ' . $checked['checked'] . ' value="' . $row->nid . '" id="reference_list-$row->nid" name="reference_list[' . $ref_type . '][' . $row->nid . ']">';
    //$disabled = $checked['checked'] ? '' : ' disabled="disabled" ';
    //$rows[$row->nid]['required_nid'] = '<input type="checkbox" class="form-checkbox" $disabled {$checked['required']} value="$row->nid" id="reference_list-{$row->nid}-required" name="reference_required_list[$ref_type][$row->nid]">';
    $rows[$row->nid]['name'] = $row->title . ' v ' . $row->field_hw_version_value;
    $rows[$row->nid]['part'] = $row->field_hw_part_value;
    $rows[$row->nid]['description'] = $row->field_hw_description_value;
  }

  $output .= '<div class="named-config-select-table-left">';
  $output .= '<span title="This field is required." class="form-required">*</span>Hardware items';
  $output .= '<div class="named-config-select-table-left-content">';
  // table head need to customize
  $rows = count($rows) ? $rows : array(array(array('data' => '', 'class' => 'no-result')));
  $output .= theme_table($header, $rows, array('class' => 'hw-list-table', 'id' => 'left_table_h'));
  $output .= '</div></div>';
  $output .= _named_config_move_right_table('h');
  return $output;
}

/**
 * get_the_software_list_table 
 * @param type $product_line default is 0
 * @param type $device_type_id default is 0
 * @param type $config_id default is 0
 * @param type $status_id default is 0
 * @return type $output
 */
function get_the_software_list_table($product_line = 0, $device_type_id = 0, $config_id = 0, $status_id = 0) {
  $query = "SELECT n.nid, n.title, s.field_sw_part_value, s.field_sw_version_value, s.sw_priority, st.title as sw_type, s.field_sw_description_value 
			FROM {content_field_device_type} dt
			JOIN {content_type_software} s ON s.vid=dt.vid AND s.nid=dt.nid
			JOIN {node} n ON n.nid=s.nid AND n.vid=s.vid
			JOIN {content_field_device_product_line} pl ON dt.field_device_type_nid=pl.nid
			JOIN {node} sn ON s.field_sw_status_nid=sn.nid
			LEFT JOIN {node} st ON s.field_sw_type_nid=st.nid
      LEFT JOIN {content_field_expiration_datetime} cfd ON cfd.nid = n.nid AND cfd.vid=n.vid 
     	WHERE cfd.field_expiration_datetime_value IS NULL ";
  //get configuration status name 
  $status_name = db_result(db_query("SELECT name FROM {named_configuration_status} WHERE id = %d", $status_id));
  if ($status_name == 'In Production') {
    $query .= " AND sn.title IN ('In Production') ";
  } else {
    $query .= " AND sn.title IN ('Limited Release', 'In Production') ";
  }

  $args = array();
  if ($product_line && is_numeric($product_line)) {
    $sql .= " AND pl.field_device_product_line_nid = %d";
    $arg[] = $product_line;
  }
  if ($device_type_id && is_numeric($device_type_id)) {
    $query .= " AND dt.field_device_type_nid=%d ";
    $args[] = $device_type_id;
  }

  $rows = array();
  $ref_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", 'software_item'));
  //get reference
  $refs = $config_id ? get_configuration_ref_list($config_id) : array();
  $result = db_query($query, $args);
  while ($row = db_fetch_object($result)) {
    //check reference
    $checked = check_ref_checked($row->nid, $refs, $ref_type);
    $rows[$row->nid]['nid'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\" id=\"reference_list-$row->nid\" name=\"reference_list[$ref_type][$row->nid]\">";
    $disabled = $checked['checked'] ? '' : ' disabled="disabled" ';
    $rows[$row->nid]['primary_nid'] = "<input type=\"radio\" class=\"form-checkbox\" $disabled {$checked['required']} value=\"$row->nid\" id=\"reference_list-{$row->nid}-required\" name=\"reference_required_list[$ref_type]\">";
    $rows[$row->nid]['name'] = $row->title . ' v ' . $row->field_sw_version_value;
    $rows[$row->nid]['part'] = $row->field_sw_part_value;
    $rows[$row->nid]['priority'] = $row->sw_priority;
    $rows[$row->nid]['type'] = $row->sw_type;
  }
  $header = array('', 'Primary', 'Name & Version', 'Part Number', 'Comparison Order', 'Type');

  $output .= '<div class="named-config-select-table-left">';
  $output .= '<span title="This field is required." class="form-required">*</span>Software items';
  $output .= '<div class="named-config-select-table-left-content">';
  // table head need to customize
  $rows = count($rows) ? $rows : array(array(array('data' => '', 'class' => 'no-result')));
  $output .= theme_table($header, $rows, array('class' => 'sw-list-table', 'id' => 'left_table_s'));
  $output .= "</div></div>";
  $output .= _named_config_move_right_table('s');
  return $output;
}

/**
 * get_the_firmware_list_table
 * @param type $product_line default is 0
 * @param type $device_type_id default is 0
 * @param type $config_id default is 0
 * @param type $status_id default is 0
 * @return type $output
 */
function get_the_firmware_list_table($product_line = 0, $device_type_id = 0, $config_id = 0, $status_id = 0) {
  $query = "SELECT f.nid, n.title, f.part, f.version, f.description
			FROM {firmware} f
			JOIN {content_field_device_product_line} pl ON f.device_type_id=pl.nid
			JOIN {node} n ON f.nid=n.nid 
			JOIN {firmware_status} fs ON f.status=fs.id
			LEFT JOIN {content_field_expiration_datetime} cfd ON cfd.nid=n.nid AND cfd.vid=n.vid
			WHERE cfd.field_expiration_datetime_value IS NULL ";
  //get configuration status name 
  $status_name = db_result(db_query("SELECT name FROM {named_configuration_status} WHERE id = %d", $status_id));
  if ($status_name == 'In Production') {
    $query .= " AND fs.name IN ('In Production') ";
  } else {
    $query .= " AND fs.name IN ('Limited Release', 'In Production') ";
  }

  $args = array();
  if ($product_line && is_numeric($product_line)) {
    $query .= " AND pl.field_device_product_line_nid = %d";
    $args[] = $product_line;
  }
  if ($device_type_id && is_numeric($device_type_id)) {
    $query .= " AND f.device_type_id = %d ";
    $args[] = $device_type_id;
  }

  //get reference
  $refs = $config_id ? get_configuration_ref_list($config_id) : array();
  $rows = array();
  $ref_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", 'firmware_item'));
  $result = db_query($query, $args);
  while ($row = db_fetch_object($result)) {
    //check reference
    $checked = check_ref_checked($row->nid, $refs, $ref_type);
    $rows[$row->nid]['id'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\" id=\"reference_list-$row->nid\" name=\"reference_list[$ref_type][$row->nid]\">";
    $rows[$row->nid]['name'] = $row->title . ' v ' . $row->version;
    $rows[$row->nid]['part'] = $row->part;
    $rows[$row->nid]['description'] = $row->description;
  }
  $header = array('', 'Name & Version', 'Part Number', 'Description');

  $output .= '<div class="named-config-select-table-left">';
  $output .= '<span title="This field is required." class="form-required">*</span>Firmware items';
  $output .= '<div class="named-config-select-table-left-content">';
  // table head need to customize
  $rows = count($rows) ? $rows : array(array(array('data' => '', 'class' => 'no-result')));
  $output .= theme_table($header, $rows, array('class' => 'fw-list-table', 'id' => 'left_table_f'));
  $output .= "</div></div>";
  $output .= _named_config_move_right_table('f');
  return $output;
}

/**
 * get_configuration_list_table
 * @param type $product_line default is 0
 * @param type $device_type_id default is 0
 * @param type $config_type_id default is 0
 * @param type $config_id default is 0
 * @param type $config_status default is 0
 * @return type $output
 */
function get_configuration_list_table($product_line = 0, $device_type_id = 0, $config_type_id = 0, $config_id = 0, $config_status = 0) {
  $query = "SELECT c.nid, c.type_id, t.name, n.title, c.version, c.description, sw.sw_priority
			FROM {named_configuration} c
			JOIN {node} n ON c.nid = n.nid
			JOIN {content_field_device_product_line} p ON p.nid = c.device_type_id
			JOIN {named_configuration_type} t ON c.type_id = t.id
			LEFT JOIN {named_configuration_relation} nct ON nct.left_nid = c.nid AND required = 2
			LEFT JOIN {node} swn ON swn.nid = nct.right_nid
			LEFT JOIN {content_type_software} sw ON sw.nid = swn.nid AND sw.vid = swn.vid
     	JOIN named_configuration_status s ON c.status=s.id
			WHERE c.type_id = %d AND c.obsolete_time IS NULL ";
  //get configuration status name 
  $status_name = db_result(db_query("SELECT name FROM {named_configuration_status} WHERE id = %d", $config_status));
  //GATEWAY-3104 if edit not check show status
  $args[] = $config_type_id;
  if (!$config_id) {
    if ($status_name == 'In Production') {
      $query .= " AND s.name IN ('In Production') ";
    } else {
      $query .= " AND s.name IN ('Limited Release', 'In Production') ";
    }
    if ($product_line && is_numeric($product_line)) {
      $query .= " AND p.field_device_product_line_nid = %d ";
      $args[] = $product_line;
    }
    if ($device_type_id && is_numeric($device_type_id)) {
      $query .= " AND c.device_type_id = %d ";
      $args[] = $device_type_id;
    }
  }
  $refs = array();
  if ($config_id) {
    $refs = get_configuration_ref_list($config_id);
  }
  $result = db_query($query, $args);

  $data = array();
  $table_id = '';
  while ($row = db_fetch_object($result)) {
    $config_type_name = $row->name;
    //check seleted
    $checked = check_ref_checked($row->nid, $refs, $row->type_id);
    //GATEWAY-3104 if edit only show checked config
    if (!$config_id || $checked['checked']) {
      $data[$row->nid]['id'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\" id=\"reference_list-$row->nid\" name=\"reference_list[$row->type_id][$row->nid]\">";
      $data[$row->nid]['name'] = $row->title;
      $data[$row->nid]['description'] = $row->description;
      if ($config_type_name == "software_configuration") {
        $data[$row->nid]['description'] = $row->sw_priority;
      }
      $table_id = 'sys_' . $row->name;
    }
  }
  $header = array('', 'Name', 'Description');
  if ($config_type_name == "software_configuration") {
    $header = array('', 'Name', 'Comparison Order');
  }
  $output = theme_table($header, $data, array('class' => 'hsf-configuration-item-table', 'id' => $table_id, 'valign' => 'top'));

  return $output;
}

/**
 * get hardware software firmware configuration list table 
 * @param type $product_line default is 0
 * @param type $device_type_id default is 0
 * @param type $config_id default is 0
 * @param type $config_status default is 0
 * @return type $output
 */
function get_hsf_config_list_table($product_line = 0, $device_type_id = 0, $config_id = 0, $config_status = 0) {
  $query = "SELECT id, title FROM {named_configuration_type} WHERE display > 0 AND name != 'system_configuration'";
  $result = db_query($query);
  $header = array();
  while ($row = db_fetch_object($result)) {
    $header[$row->id] = $row->title;
    $data['table'][$row->id]['data'] = get_configuration_list_table($product_line, $device_type_id, $row->id, $config_id, $config_status);
    $data['table'][$row->id]['valign'] = 'top';
  }

  $output = theme_table($header, $data, array('class' => 'hsf-configuration-list-table', 'valign' => 'top'));
  return $output;
}

/**
 * get_configuration_ref_list
 * @param type $left_nid must 
 * @param type $left_type default is 0
 * @param type $right_type default is 0
 * @return type $rows
 */
function get_configuration_ref_list($left_nid, $left_type = 0, $right_type = 0) {
  $query = "SELECT id, right_nid, right_type, required FROM {named_configuration_relation} WHERE left_nid = %d";
  if ($left_type) {
    $query .= " AND left_type = %d ";
  }
  if ($right_type) {
    $query .= " AND right_type = %d ";
  }
  $result = db_query($query, $left_nid, $left_type, $right_type);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows['nid'][$row->right_type][$row->id] = $row->right_nid;
    $rows['required'][$row->right_type][$row->right_nid] = $row->required;
  }
  return $rows;
}

/**
 * check_ref_checked
 * @param type $id must
 * @param type $refs must 
 * @param type $type_id must 
 * @return string $checked
 */
function check_ref_checked($id, $refs, $type_id) {
  $checked['checked'] = '';
  $checked['required'] = '';
  //this id in this type
  if (!empty($refs['nid'][$type_id])) {
    if (in_array($id, $refs['nid'][$type_id])) {
      $checked['checked'] = ' checked="checked" ';
      // 2 is right required
      if ($refs['required'][$type_id][$id] == 2) {
        $checked['required'] = ' checked="checked" ';
      }
    }
  }
  return $checked;
}

/**
 * GATEWAY-2892 update get named configuration exception country
 */
function covidien_named_config_get_reg_exception() {
  $type = check_plain($_GET['type']);
  $id = check_plain($_GET['id']);
  $expStr = '';
  if ($type == 'software_cfg') {
    $result = db_query("SELECT DISTINCT cn.title AS country
      FROM named_configuration_relation r 
      JOIN named_configuration_type t ON r.left_type = t.id 
      JOIN node sn ON r.right_nid = sn.nid
      JOIN content_type_software s ON sn.vid = s.vid
      JOIN content_type_software_approval_unavailable sau ON sn.nid = sau.field_reg_approved_component_nid
      JOIN node saun ON sau.vid = saun.vid
      JOIN node cn ON sau.field_reg_approved_country_nid = cn.nid AND cn.status = 1
      JOIN named_configuration_type rt ON r.right_type = rt.id
      LEFT JOIN content_field_expiration_datetime ed ON sau.vid = ed.vid
      WHERE ed.field_expiration_datetime_value IS NULL 
      AND t.name = 'software_configuration'
      AND rt.name = 'software_item'
      AND r.left_nid = %d", $id);
    while ($row = db_fetch_object($result)) {
      $expStr .= $row->country . ',';
    }
    echo $expStr;
  } elseif ($type == 'firmware_cfg') {
    $result = db_query("SELECT DISTINCT cn.title AS country
      FROM named_configuration_relation r
      JOIN named_configuration_type t ON r.left_type = t.id
      JOIN named_configuration_type rt ON r.right_type = rt.id 
      JOIN firmware_exception fe ON r.right_nid = fe.firmware_nid
      JOIN node cn ON fe.country_nid = cn.nid
      WHERE t.name = 'firmware_configuration'
      AND rt.name = 'firmware_item' AND r.left_nid = %d", $id);
    while ($row = db_fetch_object($result)) {
      $expStr .= $row->country . ',';
    }
    echo $expStr;
  } elseif ($type == 'software') {
    $result = db_query("SELECT DISTINCT cn.title AS country 
      FROM content_type_software s 
      JOIN content_type_software_approval_unavailable sau ON s.nid = sau.field_reg_approved_component_nid
      JOIN node cn ON sau.field_reg_approved_country_nid = cn.nid
      LEFT JOIN content_field_expiration_datetime ed ON sau.vid = ed.vid
      WHERE ed.field_expiration_datetime_value IS NULL
      AND s.nid = %d", $id);
    while ($row = db_fetch_object($result)) {
      $expStr .= $row->country . ',';
    }
    echo $expStr;
  } elseif ($type == 'firmware') {
    $result = db_query("SELECT DISTINCT cn.title AS country
      FROM firmware f 
      JOIN firmware_exception fe ON f.nid = fe.firmware_nid
      JOIN node cn ON fe.country_nid = cn.nid
      WHERE f.nid = %d", $id);
    while ($row = db_fetch_object($result)) {
      $expStr .= $row->country . ',';
    }
    echo $expStr;
  }
  exit();
}

function covidien_nc_filter_devicetype() {
  $product_line = covidien_get_product_line();
  $select_device_type = field_device_type_select(0, $product_line, 2.1);
  $options = $select_device_type['select_device_type']['#options'];

  print drupal_to_js(array_keys($options));
  exit();
}

/**
 * warning configuration
 * menu callback named-config/ajax/get/substatus/% 
 */
function covidien_named_get_substatus_option() {
  $type_id = arg(4);
  $rows = _covidien_named_get_substatus_rows($type_id);
  $options = '';
  $i = 0;
  if (is_array($rows)) {
    foreach ($rows as $id => $name) {
      $class = ( $i & 1) ? 'class="color_options"' : '';
      $style = '';
      if ($name == 'Normal') {
        $style = ' style="display:none;" ';
      }
      $options .= '<option  value="' . $id . '" title="' . $name . '" ' . $style . ' >' . $name . '</option>';
      ++$i;
    }
  }
  drupal_json(array('status' => 'success', 'data' => $options));
}

/**
 * filter named configuration status
 * @param int $status_id
 * @param int $config_id
 * @return array
 */
function _covidien_named_get_status_rows($status_id, $config_id) {
  $result = db_query("SELECT id, name FROM {named_configuration_status}");
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->id] = $row->name;
  }
//filter status
  $options = item_filter_status($status_id, $rows);
  return $options;
}

/**
 * Named configuration and item status config function
 * @return array
 */
function filter_status_config() {
  return array(
    'New' => array('Limited Release', 'In Production'),
    'Unknown' => array('Unknown', 'Limited Release', 'In Production'),
    'Limited Release' => array('Limited Release', 'In Production', 'Archived'),
    'In Production' => array('In Production', 'Obsolete', 'Archived'),
    'Obsolete' => array('Obsolete', 'In Production', 'Archived'),
    'Archived' => array('Archived', 'Limited Release'),
  );
}

/**
 * @param int $status_id
 * @param array $options
 * Filter named configuration and item status by filter_status_config()
 * @return array
 */
function item_filter_status($status_id, $options) {
  $config = filter_status_config();
  $new_option = array();
  if ($status_id) {
    $new_option = $config[$options[$status_id]];
  } else {
    $new_option = $config['New']; //create new
  }
//use options keys and intersect values
  $new_option = array_intersect($options, $new_option);
  return $new_option;
}

/**
 * get status id by name
 * @return int
 */
function _covidien_named_get_status_id($name) {
  return db_result(db_query("SELECT id FROM {named_configuration_status} WHERE name = '%s'", $name));
}

/**
 * get status name by id
 * @return string
 */
function _covidien_named_get_status_name($id) {
  return db_result(db_query("SELECT name FROM {named_configuration_status} WHERE id = %d", $id));
}

/**
 * get status id by name
 * @return int
 */
function _covidien_named_get_substatus_id($name) {
  return db_result(db_query("SELECT id FROM {named_configuration_substatus} WHERE name = '%s'", $name));
}

/**
 * get substatus rows by type id
 * @param int $type_id
 * @return array
 */
function _covidien_named_get_substatus_rows($type_id) {
  //not display Normal
  $result = db_query("SELECT id, name FROM {named_configuration_substatus} WHERE name <> '%s' AND type_id IN (0, %d)", 'Normal', $type_id);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->id] = $row->name;
  }
  return $rows;
}

/**
 * menu callback named-config/ajax/get-warning-config
 */
function covidien_named_get_warning_config() {
  $result = db_query("SELECT nid FROM {named_configuration} nc JOIN {named_configuration_substatus} cs ON nc.substatus = cs.id WHERE cs.name = '%s'", 'Warning');
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->nid] = $row->nid;
  }
  drupal_json(array('status' => 'success', 'data' => $rows));
}

/**
 * menu callback named-config/ajax/validate-sw-hw
 */
function covidien_named_validate_software_hardware() {
  $post = filter_xss_arr($_POST);
  $software_list = $post['software_list'];
  $hardware_list = $post['hardware_list'];

//get hardware items by hardware configuration
  $hardware_items = array();
  if (is_array($hardware_list) && count($hardware_list)) {
    $hc_result = db_query("SELECT right_nid FROM {named_configuration_relation} WHERE left_nid IN (" . db_placeholders($hardware_list, 'int') . ")", $hardware_list);
    $hc_hw_items = array();
    while ($hc_row = db_fetch_object($hc_result)) {
      $hc_hw_items[$hc_row->right_nid] = $hc_row->right_nid;
    }
  }

//get and diff hardware items by software configuration
  $error_sc = array();
  if (is_array($software_list) && count($software_list)) {
    foreach ($software_list as $software_config_id) {
      $sc_result = db_query("SELECT crhi.right_nid, hn.title FROM {named_configuration_relation} crsc
        JOIN {named_configuration_relation} crhc ON crsc.right_nid = crhc.left_nid
        JOIN {named_configuration_relation} crhi ON crhi.left_nid = crhc.right_nid
        JOIN {named_configuration_type} ct ON crhi.right_type = ct.id AND ct.name = 'hardware_item'
        JOIN {node} hn ON crhi.right_nid = hn.nid
        WHERE crsc.left_nid = %d", $software_config_id);
      $sc_hw_items = array();
      while ($sc_row = db_fetch_object($sc_result)) {
        $sc_hw_items[$sc_row->right_nid] = $sc_row->title;
      }
//use software need hardware items diff hardware configuration has items
      $hc_sc_diff = array_diff(array_keys($sc_hw_items), $hc_hw_items);
      if (count($hc_sc_diff)) {
        foreach ($hc_sc_diff as $hw_item_nid) {
          $error_sc[$software_config_id][$hw_item_nid] = $sc_hw_items[$hw_item_nid];
        }
      }
    }
  }

  drupal_json(array('status' => 'success', 'data' => count($error_sc) ? $error_sc : ''));
}

/**
 * menu callback named-config/ajax/get-item-table/%
 */
function covidien_named_config_get_item_table() {
  $table = '';
  $type = arg(3);
  $product_line = covidien_get_product_line();
  $device_type = check_plain($_GET['device_type']);
  $item_id = check_plain($_GET['item_id']);

  switch ($type) {
    case 'hardware':
      $table = get_the_hardware_list_table($product_line, $device_type, $item_id);
      break;
    case 'software':
      $table = get_the_software_list_table($product_line, $device_type, $item_id);
      break;
    case 'firmware':
      $table = get_the_firmware_list_table($product_line, $device_type, $item_id);
      break;
  }
  drupal_json(array('status' => 'success', 'data' => $table));
}

/**
 * menu callback named-config/ajax/get-system-config-table/%/%/%']
 */
function covidien_named_config_get_system_config_table() {
  $dt_nid = arg(3);
  $status_id = arg(4);
  $config_id = arg(5);
  $sys_cf_table = get_hsf_config_list_table(0, $dt_nid, $config_id, $status_id);
  drupal_json(array('status' => 'success', 'data' => $sys_cf_table));
}

/**
 * named-config/ajax/get-hardware-config-table/%/%/%
 */
function covidien_named_config_get_hardware_config_table() {
  $dt_nid = arg(3);
  $status_id = arg(4);
  $config_id = arg(5);
  $hw_cf_table = get_the_hardware_list_table(0, $dt_nid, $config_id, 0, $status_id);
  drupal_json(array('status' => 'success', 'data' => $hw_cf_table));
}

/**
 * named-config/ajax/get-software-config-table/%/%/%
 */
function covidien_named_config_get_software_config_table() {
  $dt_nid = arg(3);
  $status_id = arg(4);
  $config_id = arg(5);
  $sw_cf_table = get_the_software_list_table(0, $dt_nid, $config_id, $status_id);
  drupal_json(array('status' => 'success', 'data' => $sw_cf_table));
}

/**
 * named-config/ajax/get-firmware-config-table/%/%/%
 */
function covidien_named_config_get_firmware_config_table() {
  $dt_nid = arg(3);
  $status_id = arg(4);
  $config_id = arg(5);
  $fw_cf_table = get_the_firmware_list_table(0, $dt_nid, $config_id, $status_id);
  drupal_json(array('status' => 'success', 'data' => $fw_cf_table));
}

/**
 * GATEWAY-3020 check config change stauts
 * @param type $check_id
 * @return type
 */
function named_config_check_status_change($check_id) {
  $sql = "SELECT n.nid, n.title 
    FROM {named_configuration_relation} r
    JOIN {named_configuration} nc ON r.left_nid = nc.nid
    JOIN {node} n ON nc.nid = n.nid
    JOIN {named_configuration_status} s ON nc.status = s.id
    WHERE s.name='In Production' AND r.right_nid = %d";
  $result = db_query($sql, $check_id);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->nid] = l($row->title, 'named-config/edit/' . $row->nid);
  }
  return $rows;
}

/**
 * menu callback named-config/global-config-type/ajax/%
 */
function covidien_nc_golbal_config_type() {
  $type_id = arg(3);
  $_SESSION['config_type'] = $type_id;
  drupal_json(array('status' => 'success', 'data' => $type_id));
}
