<?php

/**
 * @file
 * This file used to customize the drupal node form based on the covidien UI.
 * Implement hook_menu()
 */
function covidien_devices_menu() {
  $items = array();
  // URL to access Log detail
  $items['covidien/logdetails'] = array(
    'title' => '',
    'description' => t('Call log web service to fetch log detail information.'),
    'page callback' => 'covidien_log_details',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK,
  );

  // URL to access User Menu
  $items['covidien/userinfo/%'] = array(
    'title' => '',
    'description' => t('Control the new user interface for uploading and managing file attachments.'),
    'page callback' => 'get_user_details',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  // URL to access User Menu
  $items['covidien/device/%/%'] = array(
    'title' => '',
    'description' => t('Contains device info.'),
    'page callback' => 'get_device_details',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['device/feature/add'] = array(
    'title' => '',
    'page callback' => 'feature_to_device_form',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK
  );
  $items['device/feature/save'] = array(
    'title' => '',
    'page callback' => 'feature_to_device_save',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK
  );
  $items['device/feature/edit'] = array(
    'title' => '',
    'page callback' => 'feature_to_device_edit',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK
  );
  $items['device/feature/update'] = array(
    'title' => '',
    'page callback' => 'feature_to_device_update',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK
  );
  $items['device/feature/delete'] = array(
    'title' => '',
    'page callback' => 'feature_to_device_delete',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK
  );
  $items['device/feature/license/check'] = array(
    'title' => '',
    'page callback' => 'feature_license_check',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK
  );
  $items['covidien/devices/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_devices_autocomplete',
    'page arguments' => array(3, 4),
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK,
  );
  // URL to fix log type 
  $items['covidien/logType/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_logType_autocomplete',
    'page arguments' => array(3, 4),
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/upgrade/history/%/%/%'] = array(
    'title' => '',
    'page callback' => 'device_upgrade_history',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/log/history/%/%/%'] = array(
    'title' => '',
    'page callback' => 'device_log_history',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'covidien_devices_check_access',
    'file' => 'log_retrieval.inc',
    'type' => MENU_CALLBACK,
  );
  // URL to access autocomplete function for Company account number in add user, edit user pages
  $items['covidien/admin/device/account/filter'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'get_CustomerAccountDevice',
    'page arguments' => array(5, 6),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // URL to access autocomplete function for Company account number in add user, edit user pages
  $items['covidien/admin/device/customername/filter'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'get_CustomerNameDevice',
    'page arguments' => array(5, 6),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // URL to access autocomplete function for Company account number in add user, edit user pages
  $items['covidien/admin/device/customername/getname'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'get_CustomerNamefromAccountfordevice',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Url to deivces page
  $items['covidien/devices'] = array(
    'title' => t('Device'),
    'description' => t('Find and Select a Specific Device.'),
    'page callback' => 'covidien_device_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'covidien_devices.page.inc',
  );
  // To show more information for device component.
  $items['covidien/device/component/view'] = array(
    'title' => t('Ajax get device component information'),
    'page callback' => 'get_device_component_information_view',
    'access callback' => 'covidien_devices_check_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function covidien_devices_init() {
  module_load_include('inc', 'covidien_devices', 'covidien_devices_query');
  module_load_include('inc', 'covidien_devices', 'log_retrieval');
  module_load_include('inc', 'covidien_devices', 'covidien_devices.page');
}

/**
 * Implement hook_check_access(), to block unauthorized users.
 */
function covidien_devices_check_access() {
  return covidien_cot_admin_access_callback('devices');
}

/**
 * Autosugesstion for device serial number related to with device types
 * @parm
 * arg1: devicetype
 * arg7: search string
 */
function covidien_devices_autocomplete($arg1, $arg2) {
  global $user;
  $items = array();
  if (strlen($arg2) > 1) {
    $arg2 = trim($arg2);
    $string = str_replace("_", "\_", $arg2);
    $result = autoSuggestionDeviceQuery($string, $arg1, $user->devices_nid, $user->name, $user->uid);
    while ($row = db_fetch_object($result)) {
      $val = $row->field_device_serial_number_value;
      $items[$val] = $val;
    }
  }
  print drupal_to_js($items);
  exit();
}

/**
 * Autosugesstion for device serial number related to with device types
 * @parm
 * arg1: devicetype
 * arg7: search string
 */
function covidien_logType_autocomplete($arg1, $arg2) {
  global $user;
  $where = "";
  $customer_query = "";
  $items = array();

  $keyword = trim($_REQUEST['keyword']);
  $keyword = str_replace("_", "\_", $keyword);

  $query = "SELECT DISTINCT field_device_log_type_value FROM content_type_device_log where field_device_log_type_value like '%%%s%%' ORDER BY field_device_log_type_value ASC ";

  $result = db_query($query, $keyword);
  while ($row = db_fetch_object($result)) {
    $val = $row->field_device_log_type_value;
    $items[$val] = $val;
  }
  print drupal_to_js($items);
  exit();
}

/**
 * Theme variables.
 */
function get_user_details($args) {
  $node = node_load($args);
  $output = theme('user_info', $node);
  return $output;
}

/**
 * Theme variables.
 */
function get_device_details($arg1, $arg2) {
  $output = theme('device_info', $arg1, $arg2);
  return $output;
}

/**
 * Theme variables.
 */
function covidien_devices_theme() {
  return array(
    'user_info' => array(
      'template' => 'userinfo',
      'arguments' => array('node' => NULL),
    ),
    'device_info' => array(
      'template' => 'deviceinfo',
      'arguments' => array('arg1' => NULL, 'arg2' => NULL),
    ),
    'covidien_device_list_form' => array(
      'template' => 'covidien_device_list_form',
      'arguments' => array('form' => NULL),
    ),
    'upgrade_history' => array(
      'template' => 'upgrade-history',
      'arguments' => array('installation_nid' => NULL, 'from_component_nid' => NULL, 'service_id' => NULL),
    ),
    'log_list' => array(
      'template' => 'loglist',
      'arguments' => array('args' => NULL),
    ),
    'log_details' => array(
      'template' => 'logdetails',
      'arguments' => array('args' => NULL),
    ),
    'device_list' => array(
      'template' => 'device_list',
      'arguments' => array('args' => NULL),
    ),
    'feature_list' => array(
      'template' => 'device_feature_list',
      'arguments' => array('device_type_nid' => NULL),
    ),
    'feature_to_device_edit' => array(
      'template' => 'device_feature_edit',
      'arguments' => array($args => NULL),
    ),
    'last_known_features_list' => array(
      'template' => 'last_known_features_list',
      'arguments' => array($args => NULL),
    ),
    'feature_to_device_form' => array(
      'template' => 'device_feature_form',
      'arguments' => array($args => NULL),
    )
  );
}

function covidien_log_details() {
  $output = theme('log_details');
  return $output;
}

function feature_to_device_form() {
  $output = theme('feature_to_device_form');
  return $output;
}

function feature_to_device_edit() {
  $output = theme('feature_to_device_form');
  return $output;
}

function feature_to_device_save() {

  $device_id = check_plain($_POST['hid_device_id']);
  $device_serial_number = check_plain($_POST['hid_device_serial_number']);
  $feature_id_array = check_plain($_POST['radio_feature_catalog_id']);
  $start_date = check_plain($_POST['hidden_start_date']);
  $duration = check_plain($_POST['txt_duration']);
  $license_sn = check_plain($_POST['txt_license_sn']);
  $license_key = check_plain($_POST['txt_license_key']);
  $feature_term = check_plain($_POST['sel_feature_term']);
  $hid_device_feature_id = check_plain($_POST['hid_device_feature_id']);

  $expiration_utc_offset = strtotime('+' . $duration . ' day', strtotime($start_date));


  global $user;

  if (!empty($hid_device_feature_id)) {
    $update_feature_device_sql = "update {feature_device} set feature_nid=%d,
         activation_utc_offset='%s' ,feature_term_type_id = %d ,count_duration_in_days=%d,
        expiration_utc_offset=%d , license_serial_number='%s',license_key='%s'
        WHERE id= %d  ";

    db_query($update_feature_device_sql, current($feature_id_array), strtotime($start_date), $feature_term, $duration, $expiration_utc_offset, $license_sn, $license_key, $hid_device_feature_id);
  } else {
    $insert_feature_device_sql = "INSERT INTO {feature_device} 
      ( device_nid, device_serial_number, feature_nid, feature_term_type_id
        , activation_utc_offset, count_duration_in_days, expiration_utc_offset
        , license_serial_number,license_key,license_uid , enable_flag)
        VALUES (%d,'%s',%d, %d, %d, %d, %d,'%s','%s', $user->uid , 0 ); ";

    db_query($insert_feature_device_sql, $device_id, $device_serial_number, current($feature_id_array), $feature_term, strtotime($start_date), $duration, $expiration_utc_offset, $license_sn, $license_key);

    // get primary key id
    $feature_catalog_id = db_last_insert_id('feature_catalog', 'id');
  }


  $device_service_type = 'Feature Entitlement';   // $v1
  $user_sessions_sid = null;  // $v3
//  $v4     date 
  $field_to_target_component = null;
  $field_to_device_component = null;  // $v6     nid
  $field_upgrade_status = null;  // $v7
  $from_component_nid = null;  // $v11

  $field_service_note_value = " device add  feature  ";  // 12

  _covidien_api_add_device_service_history($device_service_type, $device_id, $user_sessions_sid, '', null, null, $field_upgrade_status, '', null, $user->uid, $from_component_nid, $field_service_note_value);



  global $user;
  logUserActivity("Add Feature To Device", "Feature To Device[Serial Number] : " . $device_serial_number . " Added", '', '', '', $user->uid, ip_address(), time());

  global $base_url;
  $targetUrl = $base_url . "/covidien/device/" . $device_id . "/" . $device_serial_number . "?topic=feature_list";


  header("Location: " . $targetUrl);
}

function _add_feature_service_history() {
  global $user;
  $node = (object) array();
  $node->type = 'device_service_history';
  $node->uid = $user->uid;

  $node->format = 0;
  $node->title = NULL;
  $node->field_device_installation_pk[] = array('nid' => $arr1['nid']);
  $node->field_device_service_type[] = array('nid' => $arr2['nid']);
// 	$node->field_device_service_type[]=array('nid'=>431);
  $node->field_device_pk[] = array('nid' => $var2);
  $node->field_service_person_pk[] = array('nid' => $arr3['nid']);
  if ($var4 != '') {
    $drupal_time_zone = date_default_timezone_name();
    $date = new DateTime($var4, new DateTimeZone($drupal_time_zone));
    $date->setTimezone(new DateTimeZone('UTC'));
    $date2 = $date->format('Y-m-d H:i:s');
    $var4 = $date2;
  }
  //'2012-08-24 13:37:39';
  $node->field_service_datetime[0] = array('value' => $var4, 'value2' => $var4, 'timezone' => 'UTC', 'offset' => 0, 'offset2' => 0, 'timezone_db' => UTC, 'date_type' => 'datetime');
  //$node->field_service_datetime[0]['value']['date'] ='2012-08-24 13:37:36';
  $node->field_from_device_component[] = array('nid' => $arr4['nid']);
  $node->field_to_target_component[] = array('nid' => $arr4['field_update_to_component_nid']);
  $node->field_to_device_component[] = array('nid' => $var6);
  $node->field_upgrade_status[] = array('value' => $var7);
  $node->field_service_note[] = array('value' => $var12);

  node_save($node);
}

function feature_to_device_update() {
  $feature_device_id = check_plain($_POST['hid_feature_device_id']);
  $device_id = check_plain($_POST['hid_device_id']);
  $device_serial_number = check_plain($_POST['hid_device_serial_number']);
  $feature_id = check_plain($_POST['radio_feature_catalog_id']);
  $start_date = check_plain($_POST['hidden_start_date']);
  $duration = check_plain($_POST['txt_duration']);
  $license_sn = check_plain($_POST['txt_license_sn']);
  $license_key = check_plain($_POST['txt_license_key']);
  $feature_term = check_plain($_POST['sel_feature_term']);

  $update_feature_device_sql = "UPDATE {feature_device} set start_date = '%s' , feature_term = %d ,  duration= '%s'
			,license_serial_number='%s',license_key='%s' where id=%d ;";
  db_query($update_feature_device_sql, $start_date, $feature_term, $duration, $license_sn, $license_key, $feature_device_id);



  $device_service_type = 'Feature Entitlement';   // $v1
  $user_sessions_sid = null;  // $v3
//  $v4     date
  $field_to_target_component = null;
  $field_to_device_component = null;  // $v6     nid
  $field_upgrade_status = null;  // $v7
  $from_component_nid = null;  // $v11

  $field_service_note_value = "edit device feature  ";  // 12

  _covidien_api_add_device_service_history($device_service_type, $device_id, $user_sessions_sid, null, null, $v6, $field_upgrade_status, 'covidien_api', null, $user->uid, $from_component_nid, $field_service_note_value);


  global $user;
  logUserActivity("Update Feature To Device", "Feature To Device[Serial Number] : " . $device_serial_number . " Updated", '', '', '', $user->uid, ip_address(), time());

  global $base_url;
  $targetUrl = $base_url . "/covidien/device/" . $device_id . "/" . $device_serial_number . "?topic=feature_list";

  header("Location: " . $targetUrl);
}

function feature_to_device_delete() {
  $feature_device_id = check_plain($_POST['radio_feature_catalog_id']);
  $device_id = check_plain($_POST['hid_device_id']);
  $device_serial_number = check_plain($_POST['hid_device_serial_number']);

  $delete_device_feature_sql = "DELETE FROM {feature_device} where device_nid=%d and feature_nid=%d ";
  db_query($delete_device_feature_sql, $device_id, current($feature_device_id));

  global $base_url;
  $targetUrl = $base_url . "/covidien/device/" . $device_id . "/" . $device_serial_number . "?topic=feature_list";
  header("Location: " . $targetUrl);
}

function feature_license_check() {
  $license_sn = $_REQUEST['license_sn'];
  $license_key = $_REQUEST['license_key'];

  $data = array();


  if (isset($license_sn)) {
    $sn_query = "SELECT COUNT(license_serial_number) FROM	{feature_device} WHERE license_serial_number = '%s' ; ";
    $sn_result = db_query($sn_query, $license_sn);
    $sn_row = db_fetch_array($sn_result);
    foreach ($sn_row as $column) {
      $data['license_sn'] = $column;
    }
  }
  if (isset($license_key)) {
    $key_query = "SELECT COUNT(license_key) FROM	{feature_device} WHERE license_key = '%s' ; ";
    $key_result = db_query($key_query, $license_key);
    $key_row = db_fetch_array($key_result);
    foreach ($key_row as $column) {
      $data['license_key'] = $column;
    }
  }


  global $user;
  logUserActivity("Delete Feature To Device", "Feature To Device[Serial Number] : " . $device_serial_number . " Deleted", '', '', '', $user->uid, ip_address(), time());

  echo drupal_to_js($data);
  exit();
}

/**
 * get the parameter from server uri
 */
function getParameter($index) {
  $uri = $_SERVER['REQUEST_URI'];
  $serverPaths = explode('?', $uri);
  $serverPath = $serverPaths[0];
  $params = explode('/', $serverPath);
  if ($index == -1) {
    $index = count($params) - 1;
  }
  return $params[$index];
}

function covidien_theme_preprocess_log_details(&$variables) {
  global $base_web_service_url;
  global $base_log_file_path;

  $type = check_plain($_GET['type']);
  $filename = check_plain($_GET['filename']);
  $deviceType = check_plain($_GET['deviceType']);
  if (!isset($type)) {
    $deviceTypeNid = check_plain($_GET['deviceTypeNid']);
    $type = db_result(db_query('SELECT field_device_log_type_value FROM {content_type_device_log} a,{content_type_device_service_history} b WHERE a.field_device_service_history_nid=b.nid and field_device_log_filename_value=\'%s\'', $filepath));
  }
  $filepath = $base_log_file_path . '/' . $deviceType . '/' . $type . '/' . $filename;
  $service_url = $base_web_service_url . urlencode($filepath);

  //GATEWAY-2388
  $page = check_plain($_GET['page']);
  if (empty($page)) {
    $page = 1;
  }
  $service_url = $service_url . '&page=' . $page;

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
  curl_setopt($curl, CURLOPT_URL, $service_url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  $data = curl_exec($curl);
  curl_close($curl);

  $variables['data'] = $data;
  if (strpos($filepath, "html.gz")) {
    $variables['filepath'] = substr($filepath, 0, -7) . "decode.html.gz";
  } else if (strpos($filepath, "db.gz")) {
    $variables['filepath'] = substr($filepath, 0, -5) . "db.gz.decode.html.gz";
  } else {
    $variables['filepath'] = $filepath . "decodeDecrypt";
  }
}

/**
 * Template preprocess of logviewer list.
 */
function covidien_theme_preprocess_log_list(&$variables) {
  global $user;
  $sno = arg(3);
  $device_id = arg(2);
  if (!isset($sno)) {
    $sno = check_plain($_GET['sno']);
  }
  $variables['sno'] = $sno;
  $variables['device_id'] = $device_id;
  $logType = check_plain($_GET['logType']);
  $variables['logType'] = $logType;
  $serviceDate = check_plain($_GET['serviceDate']);
  $variables['serviceDate'] = $serviceDate;
  $pageSize = 10;
  //header
  $header = array(
    array('data' => t('Date & Time'), 'field' => 'field_service_datetime_value', 'sort' => 'desc'),
    array('data' => t('Log Type'), 'field' => 'content_type_device_log.field_device_log_type_value', 'sort' => 'asc'),
    array('data' => t('Log Name'), 'field' => 'field_device_log_filename_value', 'sort' => 'desc'),
  );
  //query
  $query = "SELECT content_type_device_log.nid,  
        if(log_node.created,from_unixtime(log_node.created),field_service_datetime_value) AS date,
        content_type_device_log.field_device_log_type_value AS log_type, 
        field_device_log_filename_value AS log_filename,
        field_service_note_value AS service_description
        FROM {content_type_device} 
        JOIN {content_field_device_pk} ON content_field_device_pk.field_device_pk_nid=content_type_device.nid 
        JOIN {content_type_device_installation} ON content_type_device_installation.nid=content_field_device_pk.nid 
        JOIN {content_type_device_service_history} ON content_type_device_installation.nid=content_type_device_service_history.field_device_installation_pk_nid 
        JOIN {node} AS node_service_type ON node_service_type.nid=content_type_device_service_history.field_device_service_type_nid 
        JOIN {content_type_device_log} ON content_type_device_log.field_device_service_history_nid=content_type_device_service_history.nid 
        JOIN {content_field_device_type} ON content_field_device_type.nid=content_type_device.nid 
        JOIN {node} node_device_type ON node_device_type.nid=content_field_device_type.field_device_type_nid 
        left join {content_type_device_log_history} log_history on log_history.field_device_log_history_device_nid = content_type_device.nid
        and field_device_log_filename_value = log_history.field_device_logged_value_value
        left join {node} log_node on log_node.nid = log_history.nid 
        WHERE node_service_type.title='Log Retrieval' 
        AND field_device_serial_number_value='%s' AND content_type_device.nid = '%s'";

  $args = array($sno, $device_id);
  if (isset($logType) && $logType != "") {
    $query .= "  AND content_type_device_log.field_device_log_type_value like '%%%s%%' ";
    $args[] = $logType;
  }
  if (isset($serviceDate) && $serviceDate != "") {
    $query .= "  AND field_service_datetime_value like '%s%%' ";
    $args[] = $serviceDate;
  }

  //not in
  //if Cov then show all log types. else do not show 'DebugLog','RFIDLog','RFDataLog'
  if ($user->covidien_user != "Yes") {
    $query .= " and content_type_device_log.field_device_log_type_value Not In ('DebugLog','RFIDLog','RFDataLog') ";
  }

  $query .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY field_service_datetime_value DESC ";
  $result = pager_query($query, $pageSize, 0, NULL, $args);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $file_href = "covidien/logdetails";
    $file_attr = array('attributes' => array('onclick' => 'openLogDetails(this);return false;'), 'query' => "type=$row->log_type&filename=$row->log_filename&deviceType=");
    $rows[$row->nid]['date'] = $row->date;
    $rows[$row->nid]['log_type'] = $row->log_type;
    $rows[$row->nid]['log_filename'] = l($row->log_filename, $file_href, $file_attr);
  }
  $variables['logList'] = theme_table($header, $rows, array('id' => 'tb_result'));
}

/**
 * Template preprocess of device feature list
 */
function covidien_theme_preprocess_feature_list(&$variables) {
  // pagesize need to customize
  $pageSize = 10;
  $device_id = arg(2);
  $device_serial_number = arg(3);
  // sql need to customize
  // sql extends start
  // sql need to customize
  $args = array();
  $sql = "select 
                b.id AS nid,
                b.device_serial_number AS device_serial_number,
                a.name AS feature_name,
                c.feature_term_name AS feature_term,
                b.activation_utc_offset AS start_date,
                b.expiration_utc_offset AS end_date, 
                b.count_duration_in_days AS duration,
                b.license_serial_number AS license_serial_number,
                b.license_key AS license_key,
                u.name AS name
            from
                feature_device b
                    left join
                feature_catalog a ON a.nid = b.feature_nid
                    left join
                feature_term_type c ON b.feature_term_type_id = c.id
                    left join
                users u ON b.license_uid = u.uid
            where
                b.device_nid = %d 
				and b.enable_flag=0  
            group by b.id ";

  $args[] = $device_id;
  // 	sql extends end
  // table head need to customize
  $header = array(
    array('data' => t('Feature Name'), 'field' => 'feature_name', 'sort' => 'asc'),
    array('data' => t('Feature Term'), 'field' => 'feature_term', 'sort' => 'asc'),
    array('data' => t('Start Date'), 'field' => 'start_date', 'sort' => 'asc'),
    array('data' => t('End Date'), 'field' => 'end_date', 'sort' => 'asc'),
    array('data' => t('Duration'), 'field' => 'duration', 'sort' => 'asc'),
    array('data' => t('Applied To'), 'field' => 'name', 'sort' => 'asc'),
    array('data' => t('License Key'), 'field' => 'license_key', 'sort' => 'asc'),
  );
  $count_query_sql = ' SELECT COUNT(*) as total FROM (' . $sql . ') AS result ';
  $result = pager_query($sql, $pageSize, 0, $count_query_sql, $args);
  while ($row = db_fetch_object($result)) {
    $rows[$row->nid]['feature_name'] = l($row->feature_name, "device/feature/edit/$row->nid/" . $variables['device_type_nid']);
    $rows[$row->nid]['feature_term'] = $row->feature_term;
    $rows[$row->nid]['start_date'] = date("m/d/Y", $row->start_date);
    $rows[$row->nid]['end_date'] = $row->end_date ? date("m/d/Y", $row->end_date) : "";
    $rows[$row->nid]['duration'] = $row->duration;
    $rows[$row->nid]['Applied To'] = $row->name;
    $rows[$row->nid]['license_key'] = $row->license_key;
  }
  $variables['result_table'] = '';
  $variables['result_table'] .= theme_table($header, $rows);
  $variables['result_table'] .= theme('pager', NULL, 10);
  $variables ['device_id'] = $device_id;
  $variables ['device_serial_number'] = $device_serial_number;
}

function _get_feature_term_type() {
  $query = "select id , feature_term_name from feature_term_type ;";
  $result = db_query($query);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->id] = $row->feature_term_name;
  }
  return $rows;
}

function covidien_theme_preprocess_feature_to_device_form(&$variables) {
  $device_type_nid = $_REQUEST['hid_device_type_nid'] ? $_REQUEST['hid_device_type_nid'] : arg(4);
  $device_feature_id = arg(3);
  $feature_term;
  if ($device_feature_id) {
    drupal_set_title(t('Edit Device Feature'));
    $device_feature_list = db_query("SELECT * from feature_device where id=%d", $device_feature_id);
    // 	device_serial_number  feature_id  start_date           duration  end_date  license_serial_number  license_key
    $row = db_fetch_array($device_feature_list);
    $device_feature = array(
      'id' => $row ['id'],
      'device_nid' => $row ['device_nid'],
      'device_serial_number' => $row ['device_serial_number'],
      'feature_nid' => $row ['feature_nid'],
      'feature_term' => $row ['feature_term_type_id'],
      'start_date' => $row ['activation_datetime'],
      'activation_utc_offset' => $row ['activation_utc_offset'],
      'duration' => $row ['count_duration_in_days'],
      'end_date' => $row ['end_date'],
      'license_serial_number' => $row ['license_serial_number'],
      'license_key' => $row ['license_key']
    );
    $feature_term = $device_feature['feature_term'];
    //  $form['feature_term']['#value'] = $firmware['status'];
    $variables ['device_feature'] = $device_feature;
    $variables ['device_feature_id'] = $device_feature_id;
  } else {
    drupal_set_title(t('Add Device Feature'));
  }
  $form['feature_term'] = array(
    '#type' => 'select',
    '#name' => 'sel_feature_term',
    '#id' => 'feature_term',
    '#options' => _get_feature_term_type(),
    '#value' => $feature_term,
  );
  // sql need to customize
  // 	1 Cpermanent; 0 Ctemporary.  ; SELECT vid , title FROM node WHERE TYPE="devicetype" ORDER BY title
  $args = array();
  $sql = "SELECT nid , name , description  FROM feature_catalog where device_type = %d ";
  // 	sql extends end
  // table head need to customize
  $header = array(
    array('data' => ''),
    array('data' => t('Feature Name'), 'field' => 'name', 'sort' => 'asc'),
    array('data' => t('Description'), 'field' => 'description', 'sort' => 'asc'),
  );
  $result = db_query($sql, $device_type_nid);
  while ($row = db_fetch_object($result)) {
    if (isset($device_feature) && ($row->nid == $device_feature['feature_nid'])) {
      $rows[$row->nid]['nid'] = "<input type=\"checkbox\" class=\"form-checkbox\" checked=\"checked\"  value=\"$row->nid\" id=\"edit-field-hc_list-$row->nid\" name=radio_feature_catalog_id[$row->nid]\"  onclick=\"chooseOne(this);\" >";
    } else {
      $checked = "false";
      $rows[$row->nid]['nid'] = "<input type=\"checkbox\" class=\"form-checkbox\"  value=\"$row->nid\" id=\"edit-field-hc_list-$row->nid\" name=radio_feature_catalog_id[$row->nid]\"  onclick=\"chooseOne(this);\" >";
    }
    $rows[$row->nid]['feature_name'] = $row->name;
    $rows[$row->nid]['description'] = $row->description;
  }
  $variables['feature_catalog_table'] = theme_table($header, $rows);
  $variables['select_feature_term'] = drupal_render($form['feature_term']);
}

/**
 *  Template preprocess of last_known_features_list
 * @param unknown $variables
 */
function covidien_theme_preprocess_last_known_features_list(&$variables) {
  $device_serial_number = arg(3);
  $query_arg = array();
  // sql need to customize
  $sql = "select
            f.id,
            a.name feature_name,
            t.feature_term_name as feature_term,
            f.activation_utc_offset AS start_date,
            f.expiration_utc_offset AS end_date,
            f.count_duration_in_days AS duration,
            u.field_person_username_value AS name,
            f.enable_time AS create_time
        FROM
            feature_device f
                left join
            feature_catalog a ON f.feature_nid = a.nid
                LEFT JOIN
            feature_term_type t ON f.feature_term_type_id = t.id
                LEFT JOIN
            content_type_person u ON f.enable_uid = u.nid
        where  f.enable_flag=1
            and  f.device_serial_number='%s'";
  $query_arg[] = $device_serial_number;
  // sql extends start
  $header = array(
    array('data' => t('Feature Name'), 'field' => 'feature_name', 'sort' => 'asc', 'width' => '15%'),
    array('data' => t('Feature Term'), 'field' => 'feature_term', 'sort' => 'asc', 'width' => '12%'),
    array('data' => t('Start Date'), 'field' => 'start_date', 'sort' => 'asc', 'width' => '12%'),
    array('data' => t('End Date'), 'field' => 'end_date', 'sort' => 'desc', 'width' => '12%'),
    array('data' => t('Duration'), 'field' => 'duration', 'sort' => 'desc', 'width' => '10%'),
    array('data' => t('Technician Name'), 'field' => 'name', 'sort' => 'desc', 'width' => '24%'),
    array('data' => t('Create Time'), 'field' => 'create_time', 'sort' => 'desc', 'width' => '15%'),
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY f.enable_time DESC ";
  //get table list
  $result = db_query($sql, $query_arg);
  while ($row = db_fetch_object($result)) {
    //check seleted
    $rows[$row->id]['feature_name'] = $row->feature_name;
    $rows[$row->id]['feature_term'] = $row->feature_term;
    $rows[$row->id]['start_date'] = $row->start_date ? date("m/d/Y", $row->start_date) : '';
    $rows[$row->id]['end_date'] = $row->end_date ? date("m/d/Y", $row->end_date) : '';
    $rows[$row->id]['duration'] = $row->duration;
    $rows[$row->id]['name'] = $row->name;
    $rows[$row->id]['create_time'] = $row->create_time ? date('Y-m-d H:i:s', $row->create_time) : '';
  }
  // table head need to customize
  $output = theme_table($header, $rows);
  $variables ['table_last_known_features'] = $output;
}

/**
 * Template preprocess of user information.
 */
function template_preprocess_user_info(&$variables) {
  $node = node_load($variables['node']->nid);

  $variables['name'] = $node->field_first_name[0]['value'] . " " . $node->field_last_name[0]['value'];
  $variables['email'] = $node->field_person_username[0]['value'];
  $variables['isemp'] = $node->field_covidien_employee[0]['value'];
  $business = node_load($node->field_business_unit[0]['nid']);
  $variables['business'] = $business->title;
  $variables['location'] = "";
  $query = getBuCustomerinfoQuery($node->field_company_name[0]['nid']);
  while ($row = db_fetch_object($query)) {
    $nid = $row->nid;
  }
  $fid = getFacilitynidQuery($nid);
  $facility = node_load(getFacilityinfoQuery($fid));
  $variables['facility'] = $facility->title;
  $department = node_load($node->field_department[0]['nid']);
  $variables['department'] = $department->title;
  $company = node_load($node->field_company_name[0]['nid']);
  $variables['company'] = $company->title;
}

/**
 * Template preprocess.
 */
function template_preprocess_device_info(&$variables) {
  $topic = check_plain($_GET['topic']);
  if ($topic != 'config') {
    drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/newjquery.min.js');
    drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/jquery.colorbox-min.js');
    drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/jquery-ui.min.js');
    drupal_add_css(drupal_get_path('module', 'covidien_users') . '/css/colorbox.css');
  }
  drupal_add_css(drupal_get_path('module', 'covidien_devices') . '/css/tabs.css');
  $device_id = filter_xss(arg(2));
  $id = filter_xss(arg(3));
  $named_config_info = getConfiginfoQuery($device_id);
  $variables['named_config_info'] = $named_config_info;
  // Load Device location from Device installation content type with Device serial number
  $device_location_id = getLocationnidQuery($id, $device_id);
  $device_location = node_load($device_location_id);
  // Load Device Country from with location id in Postal Address content type
  $device_location_country = node_load($device_location->field_postal_code_country[0]['nid']);
  $installation_info = getinstallationinfoQuery($id, $device_id);
  $location = array();
  if (!empty($device_location)) {
    if (!empty($device_location->field_postal_address_line1[0]['value'])) {
      $location[] = $device_location->field_postal_address_line1[0]['value'];
    }
    if (!empty($device_location->field_postal_address_city[0]['value'])) {
      $location[] = $device_location->field_postal_address_city[0]['value'];
    }
    if (!empty($device_location->field_state_province[0]['value'])) {
      $location[] = $device_location->field_state_province[0]['value'];
    }
    if (!empty($device_location->field_postal_code[0]['value'])) {
      $location[] = $device_location->field_postal_code[0]['value'];
    }
    if (!empty($device_location_country->title)) {
      $location[] = $device_location_country->title;
    }
  }
  $variables['region'] = get_device_region($device_id);
  $variables['location'] = implode(",", $location);
  $variables['country'] = $installation_info->language;
  $variables['device_address'] = $installation_info->device_address;
  $variables['device_facility'] = $installation_info->device_facility;
  $query = getDeviceownerinfoQuery($id, $device_id);
  while ($row = db_fetch_object($query)) {
    $aid = node_load($row->field_device_owner_nid);
    $did = node_load($row->nid);
    $maintanance_date = $row->field_maintance_expiration_date_value;
  }
  if (!empty($maintanance_date)) {
    $variables['maintanance_date'] = date('m/d/Y', strtotime($maintanance_date));
  } else {
    $variables['maintanance_date'] = '';
  }
  $variables['device_name'] = $did->title;
  if (empty($variables['device_name'])) {
    //drupal_goto('covidien/devices');
  }
  $variables['sno'] = filter_xss(arg(3));
  $variables['device_id'] = $device_id;
  $row = "";
  $query = getRegionInfo($aid->nid);
  while ($row = db_fetch_object($query)) {
    $nid = $row->nid;
    $facility = $row->title;
  }
  $variables['cus_name'] = $facility;
  $variables['facility'] = $aid->title;
  $device_type_version = get_device_type_gateway_version($did->nid);
  $variables['device_type_version'] = $device_type_version;
  if ($device_type_version >= '3.0') {
    $table = getHWSWTableFromNamedConfig($did->title, $id, $device_id, $did->nid);
    $variables['applied_config'] = getDeviceAppliedConfig($device_id);
  } else {
    $table = getHWSWTable($id, $device_id, $did->nid);
  }
  $variables['device_config'] = '';
  $variables['device_history'] = '';
  $variables['discrepancy'] = '';
  if ($topic == 'config') {
    drupal_add_js();
    $variables['device_config'] = $table;
  } elseif ($topic == 'discrepancy') {
    $variables['discrepancy'] = views_embed_view("device_discrepancy", "page_1", $id);
  } else {
    //$variables['device_history'] = views_embed_view("device_history", "page_1", $device_id);
    $variables['device_history'] = get_device_history($device_id, $did->nid);
    $variables['messages'] = theme('status_messages');
    $variables['log_viewer_tab'] = theme('log_list');
    $variables['feature_list'] = theme('feature_list', $did->nid);
    $variables['last_known_features_list'] = theme('last_known_features_list');
  }
}

function get_device_region($device_nid) {
  $region = db_result(db_query("SELECT title FROM {node} n JOIN {content_type_device} d ON n.nid = d.region_nid WHERE d.nid = %d", $device_nid));
  return $region;
}

function get_device_history($device_pk_id, $device_type_id) {
  $query = "SELECT sh.nid, sh.field_service_datetime_value AS datetime, n.title, sh.field_upgrade_status_value, 
        CONCAT(p.field_first_name_value,'.',p.field_last_name_value) AS technician_name, 
				p.nid AS uid, sh.field_service_note_value AS note, sh.field_from_device_component_nid,
				sh.field_device_installation_pk_nid, dpk.nid AS dpk_nid
				FROM {content_field_device_pk} dpk 
				JOIN {content_type_device_service_history} sh ON dpk.nid = sh.nid
				JOIN {node} n ON sh.field_device_service_type_nid = n.nid
				JOIN {content_type_person} p ON sh.field_service_person_pk_nid = p.nid
				JOIN {content_type_device} d ON d.nid = dpk.field_device_pk_nid
				JOIN {content_field_device_type} dt ON dt.nid = d.nid
				JOIN {node} devicetype ON devicetype.nid = dt.field_device_type_nid
				WHERE dpk.field_device_pk_nid=%d AND devicetype.nid=%d";
  $header = array(
    array('data' => 'Date & Time', 'field' => 'sh.field_service_datetime_value', 'sort' => 'desc'),
    array('data' => 'Service Type', 'field' => 'n.title'),
    array('data' => 'Technician Name', 'field' => 'p.field_first_name_value'),
    array('data' => 'Description of Service', 'field' => 'sh.field_service_note_value'),
  );
  //GATEWAY-2738 add sort 
  $query .= tablesort_sql($header);
  $result = pager_query($query, 10, 0, NULL, $device_pk_id, $device_type_id);
  while ($row = db_fetch_object($result)) {
    $service_type = $row->title . ' ' . $row->field_upgrade_status_value;
    if (strpos($row->note, 'successfully') !== false) {
      $service_type = l($row->title . ' - Pass', 'covidien/upgrade/history/' . $row->field_device_installation_pk_nid . '/' . $row->field_from_device_component_nid . '/' . $row->dpk_nid, array('attributes' => array('class' => 'iframe2 cboxElement')));
    }
    if (strpos($row->field_upgrade_status_value, 'Download Only') !== false) {
      $service_type = $row->title . ' - ' . $row->field_upgrade_status_value;
    }
    $res[$row->nid]['date'] = $row->datetime;
    $res[$row->nid]['service_type'] = $service_type;
    $res[$row->nid]['technician_name'] = l($row->technician_name, 'covidien/userinfo/' . $row->uid, array('attributes' => array('class' => 'iframe cboxElement')));
    $res[$row->nid]['note'] = $row->note;
  }

  $output = theme_table($header, $res);
  $output .= theme('pager', NULL, 10, 0);

  return $output;
}

function getHWSWTableFromNamedConfig($device_type_name, $serial_number, $device_id, $device_type_nid) {
  $header = array(
    array('data' => t('Name')),
    array('data' => t('Revision')),
    array('data' => t('Serial Number')),
    //array('data' => t('Type')),
    array('data' => t('Name')),
    array('data' => t('Version')),
    array('data' => t('Name')),
    array('data' => t('Version')),
  );
  $rows = array();
  $row = array();
  //$hwswRelation = getNamedConfigHWSWRelationByDeviceType($device_type_name);
  //$hwfwRelation = getNamedConfigHWFWRelationByDeviceType($device_type_name);
  $deviceHW = getDeviceHW($device_id);
  $deviceSW = getDeviceSW($device_id);
  $deviceFW = getDeviceFW($device_id);
  while (true) {
    if (count($deviceHW) || count($deviceSW) || count($deviceFW)) {
      $hwarr = array_shift($deviceHW);
      $swarr = array_shift($deviceSW);
      $fwarr = array_shift($deviceFW);
      $row[1] = '<span comp_id="' . $hwarr['hw_nid'] . '">' . $hwarr['name'] . '</span>';
      $row[2] = $hwarr['version'];
      $row[3] = $hwarr['serial_number'];
      $row[4] = '<span comp_id="' . $swarr['sw_nid'] . '">' . $swarr['name'] . '</span>';
      $row[5] = $swarr['version'];
      $row[6] = '<span comp_id="' . $fwarr['fw_nid'] . '">' . $fwarr['name'] . '</span>';
      $row[7] = $fwarr['version'];
      $rows[] = $row;
    } else {
      break;
    }
  }
  /*
    $hwNoRelation = array();
    if (!empty($deviceHW)) {
    foreach ($deviceHW as $hwarr) {
    $hasRelation = false;
    //get hw sw relation by hw id.
    if (!empty($hwswRelation)) {
    foreach ($hwswRelation as $hwswarr) {
    if ($hwarr['hw_nid'] == $hwswarr['hw_nid']) {
    if (array_key_exists($hwswarr['sw_nid'], $deviceSW)) {
    $row[1] = $hwswarr['hw_name'];
    $row[2] = $hwswarr['hw_version'];
    $row[3] = 'software';
    $row[4] = $hwswarr['sw_name'];
    $row[5] = $hwswarr['sw_version'];
    $rows[] = $row;
    unset($deviceSW[$hwswarr['sw_nid']]);
    $hasRelation = true;
    }
    }
    }
    }
    //get hw fw relation by hw id.
    if (!empty($hwfwRelation)) {
    foreach ($hwfwRelation as $hwfwarr) {
    if ($key == $hwfwarr['hw_nid']) {
    if (array_key_exists($hwfwarr['fw_nid'], $deviceFW)) {
    $row[1] = $hwfwarr['hw_name'];
    $row[2] = $hwfwarr['hw_version'];
    $row[3] = 'firmware';
    $row[4] = $hwfwarr['fw_name'];
    $row[5] = $hwfwarr['fw_version'];
    $rows[] = $row;
    unset($deviceFW[$hwfwarr['fw_nid']]);
    $hasRelation = true;
    }
    }
    }
    }
    if (!$hasRelation) {
    $hwNoRelation[] = $hwarr;
    }
    }
    }
    if (!empty($hwNoRelation)) {
    foreach ($hwNoRelation as $arr) {
    $row[1] = $arr['name'];
    $row[2] = $arr['version'];
    $row[3] = '';
    $row[4] = '';
    $row[5] = '';
    $rows[] = $row;
    }
    }
    if (!empty($deviceSW)) {
    foreach ($deviceSW as $arr) {
    $row[1] = '';
    $row[2] = '';
    $row[3] = 'software';
    $row[4] = $arr['name'];
    $row[5] = $arr['version'];
    $rows[] = $row;
    }
    }
    if (!empty($deviceFW)) {
    foreach ($deviceFW as $arr) {
    $row[1] = '';
    $row[2] = '';
    $row[3] = 'firmware';
    $row[4] = $arr['name'];
    $row[5] = $arr['version'];
    $rows[] = $row;
    }
    }
   */
  //GATEWAY-2391
  //if (!empty($hwNoRelation) || !empty($deviceSW) || !empty($deviceFW)) {
  //this is SW or FW have not hardware, display this message
  //GATEWAY-2543 Not check 3.0 device type
  $device_type_version = get_device_type_gateway_version($device_type_nid);
  if ($device_type_version < '3.0' && (!empty($deviceSW) || !empty($deviceFW))) {
    drupal_set_message('Invalid HW/SW/FW configuration: Please check devcie type of component and relation between components');
  }
  $output .= theme('table', $header, $rows, array('id' => 'hw_sw_fw_table'));
  $output .= theme('pager', NULL, 10, 0, array('topic' => 'config'));
  return $output;
}

/**
 * Set Default select text in form
 */
function getHWSWTable($var, $device_id, $device_type_nid) {
  $flag = 0;
  $invalid_configuration = FALSE;
  $hw_array = array();
  $sw_array = array();
  global $pager_page_array, $pager_total, $wordwraplength, $wordwrapchar;
  $device_component_nid = array();
  $sql = getAssociatedHardwaresQuery();
  $header = array(
    array('data' => t('Name')),
    array('data' => t('Revision')),
    array('data' => t('Description')),
    array('data' => t('Name')),
    array('data' => t('Version')),
    array('data' => t('Description')),
    array('data' => t('Update Available?'))
  );
  $result = pager_query($sql, 10, 0, NULL, array($var, $device_id));
  $rows = array();
  $row = array();
  $total_hw = 0;
  while ($data = db_fetch_object($result)) {
    $total_hw++;
    $hw_id = $data->node_node_data_field_device_component_nid;
    $hw_array[] = $hw_id;
    $hw_name = $data->node_node_data_field_device_component_title;
    $hw_ver = $data->node_node_data_field_device_component_node_data_field_hw_version_field_hw_version_value;
    $hw_desc = $data->node_node_data_field_device_component_node_data_field_hw_version_field_hw_description_value;
    $innersql = getSWquery($var, $device_id);
    $flag = 0;
    $temp_hw = "";
    $global_flag = 0;
    while ($inner = db_fetch_object($innersql)) {
      $sw_hw_id = $inner->node_node_data_field_hw_list_nid;
      $sw_array[] = $sw_hw_id;
      $sw_title = $inner->node_node_data_field_device_component_title;
      $sw_version = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_version_value;
      $sw_desc = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_description_value;
      $upgrade = $inner->node_node_data_field_update_to_component_node_data_field_sw_version_field_sw_version_value;
      if (($sw_hw_id == $hw_id)) {
        if ($temp_hw == $hw_id) {
          $row[1] = "";
          $row[2] = "";
          $row[3] = "";
        } else {
          $temp_hw = $hw_id;
          $row[1] = wordwrap($hw_name, $wordwraplength, $wordwrapchar, TRUE);
          $row[2] = wordwrap($hw_ver, $wordwraplength, $wordwrapchar, TRUE);
          $row[3] = wordwrap($hw_desc, $wordwraplength, $wordwrapchar, TRUE);
        }
        $row[4] = wordwrap($sw_title, $wordwraplength, $wordwrapchar, TRUE);
        $row[5] = wordwrap($sw_version, $wordwraplength, $wordwrapchar, TRUE);
        $row[6] = wordwrap($sw_desc, $wordwraplength, $wordwrapchar, TRUE);
        $row[7] = $upgrade;
        $rows[] = $row;
        $flag = 1;
        $global_flag = 1;
        $dump1[$sw_hw_id] = array('device_nid' => $inner->nid, 'sw_title' => $sw_title, 'version' => $sw_version, 'desc' => $sw_desc, 'upgrade' => $upgrade);
        $device_component_nid[] = $inner->nid;
      } else {
        $dump[$sw_hw_id] = array('device_nid' => $inner->nid, 'sw_title' => $sw_title, 'version' => $sw_version, 'desc' => $sw_desc, 'upgrade' => $upgrade);
      }
    }
    if ($flag == 0) {
      $row[1] = wordwrap($hw_name, $wordwraplength, $wordwrapchar, TRUE);
      $row[2] = wordwrap($hw_ver, $wordwraplength, $wordwrapchar, TRUE);
      ;
      $row[3] = wordwrap($hw_desc, $wordwraplength, $wordwrapchar, TRUE);
      $row[4] = '';
      $row[5] = '';
      $row[6] = '';
      $row[7] = '';
      $rows[] = $row;
    }
  }
  if ($total_hw == 0) {
    $duplicate_sw = array();
    $innersql = getSWquery($var, $device_id);
    while ($inner = db_fetch_object($innersql)) {
      $component_nid = $inner->node_node_data_field_device_component_nid;
      if (in_array($component_nid, $duplicate_sw)) {
        continue;
      }
      $duplicate_sw[] = $component_nid;
      $sw_hw_id = $inner->node_node_data_field_hw_list_nid;
      $sw_title = $inner->node_node_data_field_device_component_title;
      $sw_version = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_version_value;
      $sw_desc = $inner->node_node_data_field_device_component_node_data_field_sw_version_field_sw_description_value;
      $upgrade = $inner->node_node_data_field_update_to_component_node_data_field_sw_version_field_sw_version_value;
      $row[1] = '';
      $row[2] = '';
      $row[3] = '';
      $row[4] = wordwrap($sw_title, $wordwraplength, $wordwrapchar, TRUE);
      $row[5] = wordwrap($sw_version, $wordwraplength, $wordwrapchar, TRUE);
      $row[6] = wordwrap($sw_desc, $wordwraplength, $wordwrapchar, TRUE);
      $row[7] = $upgrade;
      $rows[] = $row;
      $invalid_configuration = TRUE;
    }
  }
  if (count($dump) > 0 && count($dump1) > 0) {
    foreach ($dump1 as $key => $val) {
      if (array_key_exists($key, $dump)) {
        unset($dump[$key]);
      }
    }
  }
  if (($pager_page_array[0] + 1) == $pager_total[0]) {
    if (!empty($dump)) {
      foreach ($dump as $key) {
        if (in_array($key['device_nid'], $device_component_nid)) {
          continue;
        }
        $row[1] = "";
        $row[2] = "";
        $row[3] = "";
        $row[4] = wordwrap($key['sw_title'], $wordwraplength, $wordwrapchar, TRUE);
        $row[5] = wordwrap($key['version'], $wordwraplength, $wordwrapchar, TRUE);
        $row[6] = wordwrap($key['desc'], $wordwraplength, $wordwrapchar, TRUE);
        $row[7] = $key['upgrade'];
        $rows[] = $row;
        $device_component_nid[] = $key['device_nid'];
        $invalid_configuration = TRUE;
      }
    }
  }
  $hw_array = array_unique($hw_array);
  $sw_array = array_unique($sw_array);
  $check_configuration = checkconfiguration($hw_array, $sw_array, $var);
  //GATEWAY-2543 Not check 3.0 device type
  $device_type_version = get_device_type_gateway_version($device_type_nid);
  if ($device_type_version < '3.0' && $check_configuration && $invalid_configuration) {
    drupal_set_message('Invalid HW/SW configuration: Please check devcie type of component and relation between components');
  }
  $output1 .= theme('table', $header, $rows, array('id' => 'hw_sw_table'));
  $output1 .= theme('pager', NULL, 10, 0, array('topic' => 'config'));
  return $output1;
}

function checkconfiguration($hw_array, $sw_array, $var) {
  $invalid_config = TRUE;
  $device_type = db_result(db_query("select devicetype.field_device_type_nid from content_type_device device join node node on node.vid = device.vid join content_field_device_type devicetype on devicetype.vid = device.vid where device.field_device_serial_number_value = '%s'", $var));
  $config_values = db_query("SELECT device_type_config.field_device_end_of_life_value as EOL,device_type_config.field_effective_date_value as EDV, node.nid AS nid, 
      node_data_field_device_type.field_device_type_nid AS node_data_field_device_type_field_device_type_nid, node.type AS node_type, node.vid AS node_vid, 
      node_node_data_field_device_config_hardware.nid AS node_node_data_field_device_config_hardware_nid, 
      node_node_data_field_device_config_software.nid AS node_node_data_field_device_config_software_nid, 
      field_device_config_sw_status.field_device_config_sw_status_value AS sw_status_value, 
      field_device_config_hw_status.field_device_config_hw_status_value AS hw_status_value, 
      node_node_data_field_device_config_hw_list.nid AS node_node_data_field_device_config_hw_list_nid, 
      node_node_data_field_device_config_hw_list.vid AS node_node_data_field_device_config_hw_list_vid 
      FROM node node 
      JOIN content_type_device_type_config device_type_config on device_type_config.vid = node.vid 
      LEFT JOIN content_field_device_config_hw_list node_data_field_device_config_hw_list ON node.vid = node_data_field_device_config_hw_list.vid 
      LEFT JOIN node node_node_data_field_device_config_hw_list ON node_data_field_device_config_hw_list.field_device_config_hw_list_nid = node_node_data_field_device_config_hw_list.nid 
      LEFT JOIN content_type_device_config_hardware field_device_config_hardware ON node_node_data_field_device_config_hw_list.vid = field_device_config_hardware.vid 
      LEFT JOIN node node_node_data_field_device_config_hardware ON field_device_config_hardware.field_device_config_hardware_nid = node_node_data_field_device_config_hardware.nid 
      LEFT JOIN content_field_device_config_sw_list node_config_sw_list ON node_node_data_field_device_config_hw_list.vid = node_config_sw_list.vid 
      LEFT JOIN node node_node_data_field_device_config_sw_list ON node_config_sw_list.field_device_config_sw_list_nid = node_node_data_field_device_config_sw_list.nid 
      LEFT JOIN content_type_device_config_software node_config_software ON node_node_data_field_device_config_sw_list.vid = node_config_software.vid 
      LEFT JOIN node node_node_data_field_device_config_software ON node_config_software.field_device_config_software_nid = node_node_data_field_device_config_software.nid 
      LEFT JOIN content_field_device_type node_data_field_device_type ON node.vid = node_data_field_device_type.vid 
      LEFT JOIN content_type_device_config_software field_device_config_sw_status ON node_node_data_field_device_config_sw_list.vid = field_device_config_sw_status.vid 
      LEFT JOIN content_type_device_config_hardware field_device_config_hw_status ON node_node_data_field_device_config_hw_list.vid = field_device_config_hw_status.vid 
      WHERE node.type in ('device_type_config') and node_data_field_device_type.field_device_type_nid = '%s'", $device_type);
  $config = array();
  while ($row = db_fetch_object($config_values)) {
    $hw_id = $row->node_node_data_field_device_config_hardware_nid;
    $sw_id = $row->node_node_data_field_device_config_software_nid;
    $config[$row->nid]['EDV'] = $row->EDV;
    $config[$row->nid]['EOL'] = $row->EOL;
    $config[$row->nid]['hw'][] = $hw_id;
    $config[$row->nid]['status'][$hw_id] = $row->hw_status_value;
    $config[$row->nid]['sw'][] = $sw_id;
    $config[$row->nid]['status'][$sw_id] = $row->sw_status_value;
  }
  if (empty($config)) {
    return $invalid_config;
  }
  foreach ($config as $key => $val) {
    $eol = '';
    $edv = '';
    $hw_list = array_unique($val['hw']);
    $sw_list = array_unique($val['sw']);
    $currentdate = time();
    $edv = strtotime($val['EDV']);
    if (!empty($val['EOL'])) {
      $eol = strtotime($val['EOL']);
    }
    if ($currentdate > $edv && ($eol == '' || $eol > $currentdate )) {
      if (count(array_intersect($hw_array, $hw_list)) == count($hw_array)) {
        $hw_search = array_diff($hw_list, $hw_array);
        if (!empty($hw_search)) {
          foreach ($hw_search as $hw) {
            if ($config[$key]['status'][$hw] == 1) {
              $invalid_config = FALSE;
            }
          }
        }
      } else {
        continue;
      }

      if (count(array_intersect($sw_array, $sw_list)) == count($sw_array)) {
        $sw_search = array_diff($sw_list, $sw_array);
        if (!empty($sw_search)) {
          foreach ($sw_search as $sw) {
            if ($config[$key]['status'][$hw] == 1) {
              $invalid_config = FALSE;
            }
          }
        }
      } else {
        continue;
      }
    }
  }
  return $invalid_config;
}

/**
 * Implements hook_form_alter(). Alter list page fields
 */
function covidien_devices_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'device_information') {
    $form['device_type']['#options']['All'] = t("All");
    $form['country_nid']['#options']['All'] = t("All");
  }
  if (($form_id == "views_exposed_form") && ($form['submit']['#id'] == 'edit-submit-device-information')) {
    $form['#validate'][] = 'device_information_validate';
    $form['submit']['#value'] = t('Go');
    $form['sno']['#autocomplete_path'] = 'covidien/devices/autocomplete';
    $form['sno']['#attributes'] = array(
      'onfocus' => 'covidien_devices_acl("devices");',
    );
    $form['customer_name']['#autocomplete_path'] = 'covidien/admin/device/customername/filter';
    $form['customer_name']['#id'] = 'customer_name';
    $form['customer_name']['#attributes'] = array('onfocus' => 'covidien_customer_device_acl("account_number","customer_name", "customername");');
    $form['account_number']['#autocomplete_path'] = 'covidien/admin/device/account/filter';
    $form['account_number']['#id'] = 'account_number';
    $form['account_number']['#attributes'] = array('onfocus' => 'covidien_customer_device_acl("customer_name", "account_number", "account");', 'onblur' => 'get_covidien_customer_name_for_device($("#account_number").val(), "customer_name", "devices");');
  }
}

/**
 * form views_exposed_form edit-submit-device-information callback validate
 */
function device_information_validate(&$form_state) {
  $sno = check_plain($_GET['sno']);
  $customer_name = check_plain($_GET['customer_name']);
  $account_number = check_plain($_GET['account_number']);
  if (!covidien_ui_input_validate($sno)) {
    form_set_error('sno', t('Invalid Serial Number'));
  }
  if (!covidien_ui_input_validate($customer_name)) {
    form_set_error('customer_name', t('Invalid Customer Name'));
  }
  if (!covidien_ui_input_validate($account_number)) {
    form_set_error('account_number', t('Invalid Customer Account Number'));
  }
}

/**
 * Implements hook_views_default_views(). Import all views related to module on installation
 */
function covidien_devices_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'covidien_devices') . '/views', '.inc');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}

/**
 * Implements hook_views_query_alter(). Alter device_history view query
 */
function covidien_devices_views_query_alter(&$view, &$query) {
  //GATEWAY-1881 update not use product line filter by device_discrepancy
  if ($view->name == 'device_discrepancy') {
    unset($query->where[0]['clauses'][1]);
    unset($query->where[0]['args'][1]);
  }
}

/**
 * @param type $installation_nid
 * @param type $from_component_nid
 * @param type $service_id
 * @return type
 */
function device_upgrade_history($installation_nid, $from_component_nid, $service_id) {
  $output = theme('upgrade_history', $installation_nid, $from_component_nid, $service_id);
  return $output;
}

/**
 * Template preprocess of upgrade_history.
 */
function template_preprocess_upgrade_history(&$variables) {
  $installation_nid = arg(3);
  $from_sw = arg(4);
  $service_id = arg(5);
  $hearder_info = db_fetch_object(getDeviceInfoQuery($installation_nid));
  $variables['serial_number'] = $hearder_info->serial_number;
  $variables['device_type'] = $hearder_info->device_type;
  $variables['customer_name'] = $hearder_info->customer_name;

  // Find if upgrade log has service nid populated
  $service_nid = getservicenidupgradelog($installation_nid, $from_sw, $service_id);
  if ($service_nid == 0) {
    $from_component_nid = getFromcompHistory($from_sw, $hearder_info->device_nid);

    $variables['before_upgrade'] = get_upgrade_log_noserviceid($from_component_nid, 'before');
    $sw_component_nid = getSWcompNidQuery($from_sw, $installation_nid);
    $next_component_nid = getFromcompHistory($sw_component_nid, $hearder_info->device_nid);
    $is_next_component_nid = getToSWfromLogQuerynoservice($next_component_nid, $installation_nid);
    if (!empty($is_next_component_nid)) {
      $variables['after_upgrade'] = get_upgrade_log_noserviceid($next_component_nid, 'after');
      $hearder_service_info = db_fetch_object(getServicewithcompQuery($from_sw, $installation_nid));
    } else {
      $variables['after_upgrade'] = get_upgrade_current($variables['serial_number'], 'after');
      $hearder_service_info = db_fetch_object(getServicehistoryinfoQuery($service_id));
    }
  } else {
    $variables['before_upgrade'] = get_upgrade_log($service_id, 'from', 'before');
    $is_next_component_nid = getToSWfromLogQuery($service_id, $from_sw);
    if (!empty($is_next_component_nid)) {
      $variables['after_upgrade'] = get_upgrade_log($service_id, 'to', 'after');
      $hearder_service_info = db_fetch_object(getServicewithcompQuery($from_sw, $installation_nid));
    } else {
      $variables['after_upgrade'] = get_upgrade_current($variables['serial_number'], 'after');
      $hearder_service_info = db_fetch_object(getServicehistoryinfoQuery($service_id));
    }
  }
  $variables['person'] = $hearder_service_info->Person;
  $variables['date'] = date('m/d/Y h:i:s A', strtotime($hearder_service_info->date));
}

/**
 * Function to get Past Device configuration without service nid from 
 * content_type_device_component_upgrade_log
 * with from_component_nid - SW nid, $class - set CSS class
 */
function get_upgrade_log_noserviceid($from_component_nid, $class) {
  $component = array();
  $hardware = array();
  $software = array();

  $query = getUpgradeloginfonoserviceid($from_component_nid);
  while ($row = db_fetch_object($query)) {
    $component_nid = $row->field_to_component_nid_value;
    $component_info = node_load($component_nid);
    $cvid = $row->field_to_component_nid_value;
    $component[$cvid]['name'] = $row->field_to_component_name_value;
    $component[$cvid]['partnumber'] = $row->field_to_component_partnumber_value;
    $component[$cvid]['revision'] = $row->field_to_component_version_value;
    if ($component_info->type == 'hardware') {
      $hardware[] = $row->field_to_component_nid_value;
    } elseif ($component_info->type == 'software') {
      $software[] = $row->field_to_component_nid_value;
      foreach ($component_info->field_hw_list as $val => $key) {
        $component[$cvid]['hw_list'][] = $key['nid'];
      }
    }
  }
  $values = gettablestructure($hardware, $software, $component);

  $output1 .= theme('table', $values['header'], $values['rows'], array('class' => $class));
  return $output1;
}

/**
 * Function to get Past Device configuration from 
 * content_type_device_component_upgrade_log
 * with service_id, $mode = to - get after upgrade info, from - get before upgrade info, $class - set CSS class
 */
function get_upgrade_log($service_id, $mode, $class) {
  $component = array();
  $hardware = array();
  $software = array();

  $query = getUpgradeloginfo($service_id);
  while ($row = db_fetch_object($query)) {
    if (($mode == 'to') && (!empty($row->field_to_component_nid_value))) {
      $component_nid = $row->field_to_component_nid_value;
      $cvid = $row->field_to_component_nid_value;
      $component[$cvid]['name'] = $row->field_to_component_name_value;
      $component[$cvid]['partnumber'] = $row->field_to_component_partnumber_value;
      $component[$cvid]['revision'] = $row->field_to_component_version_value;
    } else {
      $component_nid = $row->field_from_component_nid_value;
      $cvid = $row->field_from_component_nid_value;
      $component[$cvid]['name'] = $row->field_from_component_name_value;
      $component[$cvid]['partnumber'] = $row->field_from_component_partnumber_value;
      $component[$cvid]['revision'] = $row->field_from_component_version_value;
    }
    $component_info = node_load($component_nid);
    if ($component_info->type == 'hardware') {
      $hardware[] = $row->field_from_component_nid_value;
    } elseif ($component_info->type == 'software') {
      $software[] = $component_nid;
      if (count($component_info->field_hw_list)) {
        foreach ($component_info->field_hw_list as $val => $key) {
          $component[$cvid]['hw_list'][] = $key['nid'];
        }
      }
    }
  }
  $values = gettablestructure($hardware, $software, $component);

  $output1 .= theme('table', $values['header'], $values['rows'], array('class' => $class));
  return $output1;
}

/**
 * Function to get Current Device configuration
 */
function get_upgrade_current($serial_number, $class) {
  $component = array();
  $hardware = array();
  $software = array();

  $query = getCurrentConfigQuery($serial_number);
  while ($row = db_fetch_object($query)) {
    $from_component_nid = $row->field_device_component_nid;
    $to_component_nid = '';
    if (!empty($to_component_nid)) {
      $component_nid = $to_component_nid;
    } else {
      $component_nid = $from_component_nid;
    }
    $component_info = node_load($component_nid);
    $cvid = $component_info->nid;
    if ($component_info->type == 'hardware') {
      $hardware[] = $component_info->nid;
      $component[$cvid]['name'] = $component_info->title;
      $component[$cvid]['partnumber'] = $component_info->field_hw_part[0]['value'];
      $component[$cvid]['revision'] = $component_info->field_hw_version[0]['value'];
    } elseif ($component_info->type == 'software') {
      $software[] = $component_info->nid;
      $component[$cvid]['name'] = $component_info->title;
      $component[$cvid]['partnumber'] = $component_info->field_sw_part[0]['value'];
      $component[$cvid]['revision'] = $component_info->field_sw_version[0]['value'];
      $component[$cvid]['hw_list'] = array();
      if (count($component_info->field_hw_list)) {
        foreach ($component_info->field_hw_list as $val => $key) {
          $component[$cvid]['hw_list'][] = $key['nid'];
        }
      }
    }
  }
  $values = gettablestructure($hardware, $software, $component);
  $output1 .= theme('table', $values['header'], $values['rows'], array('class' => $class));
  return $output1;
}

/**
 * Function to build table structure for HW/SW configuration for above functions
 */
function gettablestructure($hardware, $software, $component) {
  $rows = array();
  $mismatch_sw = array();
  $temp = '';
  foreach ($hardware as $k) {
    $flag = 0;
    $row = array();
    $row[0] = $component[$k]['name'];
    $row[1] = $component[$k]['revision'];
    $row[2] = $component[$k]['partnumber'];
    $row[3] = '';
    $row[4] = '';
    $row[5] = '';
    foreach ($software as $s) {
      if (count($component[$s]['hw_list'])) {
        if (in_array($k, $component[$s]['hw_list'])) {
          if ($temp != $k) {
            $temp = $k;
          } else {
            $row[0] = '';
            $row[1] = '';
            $row[2] = '';
          }
          $row[3] = $component[$s]['name'];
          $row[4] = $component[$s]['revision'];
          $row[5] = $component[$s]['partnumber'];
          $rows[] = $row;
          $flag = 1;
          $mismatch_sw[] = $s;
        }
      }
    }
    if ($flag == 0) {
      $rows[] = $row;
    }
  }
  foreach ($software as $m) {
    if (count($mismatch_sw)) {
      if (in_array($m, $mismatch_sw)) {
        continue;
      }
    }
    $row[0] = '';
    $row[1] = '';
    $row[2] = '';
    $row[3] = $component[$m]['name'];
    $row[4] = $component[$m]['revision'];
    $row[5] = $component[$m]['partnumber'];
    $rows[] = $row;
  }

  $header = array(
    array('data' => t('Name')),
    array('data' => t('Revision')),
    array('data' => t('Part #')),
    array('data' => t('Name')),
    array('data' => t('Version')),
    array('data' => t('Part #'))
  );
  $return = array();
  $return['rows'] = $rows;
  $return['header'] = $header;
  return $return;
}

/**
 * Autocomplete function for Company account number with selected company name in Add user, Edit user pages
 */
function get_CustomerAccountDevice($value, $string) {
  $post = filter_xss($value);
  $value = trim($post);
  $matches = array();
  global $user;


  $length = strlen($string);
  if ($length < 3) {
    echo drupal_json($matches);
    exit;
  }
  $string = trim($string);

  $string = str_replace("_", "\_", $string);
  $result = autoSuggestionAccountDeviceQuery($string, $value, $user->customer_nid, $user->covidien_user);

  while ($row = db_fetch_object($result)) {
    $matches[$row->field_bu_customer_account_number_value] = $row->field_bu_customer_account_number_value;
  }
  drupal_json($matches);
  exit;
}

/**
 * Autocomplete function for Company account number with selected company name in Add user, Edit user pages
 */
function get_CustomerNameDevice($value, $string) {
  $post = filter_xss($value);
  $value = trim($post);
  $matches = array();
  global $user;
  $length = strlen($string);
  if ($length < 3) {
    echo drupal_json($matches);
    exit;
  }
  $string = trim($string);

  $string = str_replace("_", "\_", $string);
  $result = autoSuggestionCompanyDeviceQuery($string, $value, $user->customer_nid, $user->covidien_user);
  while ($row = db_fetch_object($result)) {
    $matches[$row->customername] = $row->customername;
  }
  drupal_json($matches);
  exit;
}

/**
 * Autocomplete function for Company account number with
 * selected company name in Add user, Edit user pages
 */
function get_CustomerNamefromAccountfordevice() {
  $post = filter_xss($_POST['value']);
  $value = trim($post);
  global $user;
  $result = ajaxCustomerNameQuery($user->covidien_user, $user->customer_nid, $value, $string);
  while ($row = db_fetch_object($result)) {
    $matches = $row->customername;
  }
  echo $matches;
  exit;
}

/**
 * hook_views_pre_excute
 * @param type $view
 */
function covidien_devices_views_pre_execute(&$view) {
  if ($view->name == 'device_information') {
    $query = covidien_device_list_query();
    $view->build_info['query'] = $query['query'];
    $view->build_info['query_args'] = $query['args'];
    $view->build_info['count_query'] = $query['count_query'];
  }
}

function get_device_component_information_view() {
  $comp_id = check_plain($_GET['comp_id']);
  $device_id = check_plain($_GET['device_id']);
  if (!$comp_id) {
    drupal_json(array('status' => 'failed', 'data' => ''));
    exit();
  }
  $type = db_result(db_query("SELECT type FROM {node} WHERE nid=%d ", $comp_id));

  $table = '';
  switch ($type) {
    case 'hardware':
      $result = db_query("select 
        b.nid,
        a.title,
        b.field_hw_part_value,
        b.field_hw_version_value,
        b.field_hw_description_value,
    	c.serial_number
    from
        node a join content_type_hardware b 
    	ON a.nid = b.nid and a.vid = b.vid and a.type = 'hardware' and a.nid=%d
    	join device_hardware_serial_number c on a.nid = c.hardware_nid and c.device_nid=%d", $comp_id, $device_id);
      $rows = array();
      while ($row = db_fetch_object($result)) {
        $arr = array();
        $arr['title'] = $row->title;
        $arr['partVersion'] = $row->field_hw_part_value . ' & v' . $row->field_hw_version_value;
        $arr['serial_number'] = $row->serial_number;
        $arr['description'] = $row->field_hw_description_value;
        $rows[] = $arr;
      }
      $header = array('Name', 'Part & Version', 'Serial Number', 'Description');
      $table = theme_table($header, $rows);
      break;
    case 'software':
      $result = db_query("select 
          b.nid,
          a.title,
          b.field_sw_part_value,
          b.field_sw_version_value,
          b.field_sw_description_value
      from
          node a join content_type_software b 
      	ON a.nid = b.nid and a.vid = b.vid and a.type = 'software' and a.nid=%d", $comp_id);
      $rows = array();
      while ($row = db_fetch_object($result)) {
        $rows[$row->nid]['title'] = $row->title;
        $rows[$row->nid]['partVersion'] = $row->field_sw_part_value . ' & v' . $row->field_sw_version_value;
        $rows[$row->nid]['description'] = $row->field_sw_description_value;
      }
      $header = array('Name', 'Part & Version', 'Description');
      $table = theme_table($header, $rows);
      break;
    case 'firmware':
      $result = db_query("select 
        b.nid,
        a.title,
        b.part,
    	b.version,
    	b.description
    from
        node a join firmware b 
    	ON a.nid = b.nid and a.vid = b.vid and a.type = 'firmware' and a.nid=%d", $comp_id);
      $rows = array();
      while ($row = db_fetch_object($result)) {
        $rows[$row->nid]['title'] = $row->title;
        $rows[$row->nid]['partVersion'] = $row->part . ' & v' . $row->version;
        $rows[$row->nid]['description'] = $row->description;
      }
      $header = array('Name', 'Part & Version', 'Description');
      $table = theme_table($header, $rows);
      break;
    default:
      break;
  }
  return drupal_json(array('status' => 'success', 'data' => $table));
}
