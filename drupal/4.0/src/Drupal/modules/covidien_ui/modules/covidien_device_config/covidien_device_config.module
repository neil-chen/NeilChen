<?php

/**
 * @file
 * Configuration catalog module functionality defined here.
 */

/**
 * Adding the JS
 */
function covidien_device_config_init() {
  if (arg(0) == 'covidien' && arg(2) == 'configuration') {
    drupal_add_js(drupal_get_path('module', 'covidien_device_config') . '/js/covidien_device_config.js');
  }
}

/**
 * Implements hook_views_default_views().
 * Used to define the drupal views from file
 */
function covidien_device_config_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'covidien_device_config') . '/views', '.inc');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function covidien_device_config_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function covidien_device_config_menu() {
  $items = array();
  $items['covidien/configuration/ajax/%/%'] = array(
    'title' => '',
    'page callback' => 'covidien_device_config_process_ajax_call',
    // arguments in the processing function
    'page arguments' => array(3, 4),
    'access callback' => 'covidien_device_config_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/configuration/ajax/%/%/%/%/%'] = array(
    'title' => '',
    'page callback' => 'covidien_device_config_process_ajax_call',
    // arguments in the processing function
    'page arguments' => array(3, 4, 5, 6, 7),
    'access callback' => 'covidien_device_config_check_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

// Access callback, for this allow anyone to access the 'ACTION_URL'
function covidien_device_config_check_access() {
  return covidien_cot_admin_access_callback('devices');
}

/**
 * AJAX callback function
 * @param
 * arg1:viewid
 * arg2:argument - device type/device type config
 * arg3:sort 
 * arg4:order
 * arg5:page
 */
function covidien_device_config_process_ajax_call($arg1 = '', $arg2 = 0, $arg3 = '', $arg4 = '', $arg5 = '') {
  if ($arg3 == 'asc') {
    $block = 'block_1';
    $sort = 'ASC';
  } elseif ($arg3 == 'desc') {
    $block = 'block_2';
    $sort = 'DESC';
  } else {
    $block = 'default';
    $sort = 'ASC';
  }
  switch ($arg1) {
    case 'config_hw_sw':
      //devices access policy
      $arg2 = __covidien_access_devices_nid($arg2);
      if (is_numeric($arg2)) {
        $_SESSION['default_dtype'] = $arg2;
      }
      if ($arg2 == 0) {
        return drupal_json(array('view_id' => $arg1, 'view_output' => t('Access denied')));
      }
      $output = _device_config_views_by_sort('config_hw_sw', $block, $sort, $arg4, array($arg2), $arg5);
      return drupal_json(array('view_id' => 'config_hw_sw', 'view_output' => $output));
      break;
    case 'individual_configuration':
      $output = views_embed_view('individual_configuration', 'default', $arg2);
      return $output;
    default:
      $output = t('arg Missing');
      return drupal_json(array('view_output' => $output, 'view_id' => $arg1));
  }
}

/**
 * Implements Alter Form for custome form design.
 */
function covidien_device_config_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'device_type_config_node_form') {
    drupal_add_js(drupal_get_path('module', 'covidien_device_config') . '/js/covidien_device_config.js');
    //Button customize
    $butcancel = array(
      '#type' => 'submit',
      '#access' => TRUE,
      '#value' => t('Cancel'),
      '#submit' => array('covidien_device_config_form_cancel'),
      '#attributes' => array('class' => 'secondary_submit',),
    );
    $form['buttons']['cancel'] = $butcancel;
    $form['filter']['device_config_hw_list_sort'] = array(
      '#type' => 'hidden',
      '#name' => 'device_config_hw_list_sort',
      '#default_value' => 'asc'
    );
    $form['filter']['device_config_hw_list_order'] = array(
      '#type' => 'hidden',
      '#name' => 'device_config_hw_list_order',
      '#default_value' => 'title'
    );
    $form['filter']['device_config_hw_list_page'] = array(
      '#type' => 'hidden',
      '#name' => 'device_config_hw_list_page',
      '#default_value' => '0');
    $form['hidden_viewfield_config_hw_sw'] = array(
      '#type' => 'checkboxes',
      '#title' => 'hidden_viewfield_config_hw_sw',
      '#name' => 'hidden_viewfield_config_hw_sw[nid][0][0]',
      '#id' => 'hidden_viewfield_config_hw_sw_nid_0_0',
    );
    $form['hidden_viewfield_config_hw_sw_status'] = array(
      '#type' => 'select',
      '#title' => 'hidden_viewfield_config_hw_sw_status',
      '#default_value' => '',
      '#options' => array(
        '' => t('Select'),
        'Required' => t('Required'),
        'Optional' => t('Optional'),
      ),
      '#name' => 'hidden_viewfield_config_hw_sw_status[nid][0][0]',
      '#id' => 'hidden_viewfield_config_hw_sw_status_nid_0_0',
    );
    $form['hidden_viewfield_config_hw_sw_1'] = $form['field_device_config_hw_list'];
    unset($form['field_device_config_hw_list']);
    $form['hidden_viewfield_config_hw_sw_1']['#field_name'] = 'hidden_viewfield_config_hw_sw_1';
    $form['hidden_viewfield_config_hw_sw_1']['#default_value'] = array();
    $form['hidden_viewfield_config_hw_sw_status_1'] = array(
      '#type' => 'select',
      '#title' => 'hidden_viewfield_config_hw_sw_status_1',
      '#default_value' => '',
      '#options' => array(
        '' => t('Select'),
        'Required' => t('Required'),
        'Optional' => t('Optional'),
      ),
      '#name' => 'hidden_viewfield_config_hw_sw_status_1[nid][nid][0]',
      '#id' => 'hidden_viewfield_config_hw_sw_status_1_nid_nid_0',
    );
    unset($form['title']['#title']);
    //node reference type fileds
    unset($form['field_device_type']['#title']);
    //cck fields
    unset($form['field_device_config_version'][0]['#title']);
    unset($form['field_effective_date']['#title']);
    unset($form['field_effective_date'][0]['#title']);
    unset($form['field_device_end_of_life'][0]['#title']);
    if ($form['nid']['#value']) {
      //edit
      $form['buttons']['submit']['#value'] = t('Save Changes');
      $confirmmsg = t('Do you want to save the changes you just made to this page?');
      $form['buttons']['submit']['#attributes'] = array('onclick' => 'if(!confirm("' . $confirmmsg . '")){return false;}');
      $form['field_device_type']['#pre_render'] = array(field_device_type_disabled);
      //Build the hidden filed values
      $form['hidden']['config_hw_list'] = array(
        '#value' => views_embed_view('edit_individual_configuration', 'default', $form['nid']['#value'])
      );
      //clone the view as hidden block and theme with hidden fileds.
      $butdelete = array(
        '#type' => 'submit',
        '#access' => TRUE,
        '#value' => t('Delete this Configuration'),
        '#submit' => array('covidien_device_config_form_delete'),
      );
      $form['buttons']['delete'] = $butdelete;
      $confirmdelmsg = t('Are you sure you want to delete this configuration?');
      $form['buttons']['delete']['#attributes'] = array(
        'onclick' => 'if(!confirm("' . $confirmdelmsg . '")){return false;}',
        'class' => 'secondary_submit',
      );
    } else {
      $form['field_device_type']['#default_value'][0]['nid'] = $_SESSION['default_dtype'];
      //add
      //Setting Default value
      if ($form['title']['#default_value'] == '') {
        $form['title']['#default_value'] = t('Enter Configuration Name');
      }
      if ($form['field_device_config_version'][0]['#default_value']['value'] == '') {
        $form['field_device_config_version'][0]['#default_value']['value'] = t('Enter Configuration Version Number');
      }
      $form['buttons']['submit']['#value'] = t('Add New Configuration');
    }
    unset($form['buttons']['preview']);
    $form['hidden_end_of_life'] = array(
      '#type' => 'hidden',
      '#name' => 'hidden_end_of_life',
      '#default_value' => 'MM/DD/YYYY'
    );

    // validate
    $form['#validate'][] = 'configuration_form_validate';
  }
  if ($form_id == 'views_exposed_form' && $form['submit']['#id'] == 'edit-submit-Configlist') {
    drupal_add_js(drupal_get_path('module', 'covidien_device_config') . '/js/ajaxtooltip.js');
    $form['field_device_type_nid']['#options']['All'] = t('All');
    $form['submit']['#value'] = t('Go');
    drupal_set_title(t('System Administration'));
  }
}

function configuration_form_validate(&$form_state) {

  $config_name = $form_state['#post']['title'];
  if (!covidien_ui_input_validate($config_name)) {
    form_set_error('title', t('Invalid Configuration Name'));
  }

  $config_version = $form_state['#post']['field_device_config_version'][0]['value'];
  if (!covidien_ui_input_validate($config_version)) {
    form_set_error('field_device_config_version', t('Invalid Configuration Version Number'));
  }
}

/**
 * Implements cancel button.
 */
function covidien_device_config_form_cancel() {
  form_set_error(NULL, '', TRUE);
  drupal_get_messages();
  global $base_url;
  drupal_goto($base_url . '/covidien/admin/configuration');
}

/**
 * Implementation of delete based on requirement
 */
function covidien_device_config_form_delete($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  $node->field_expiration_datetime[0]['value'] = date('Y-m-d h:i:s');
  $node->revision = TRUE;
  node_save($node);
}

/**
 * Implements hook_nodeapi().
 * customized the node validation error message.
 */
function covidien_device_config_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'device_type_config' && $op == 'validate') {
    drupal_add_js(drupal_get_path('module', 'covidien_device_config') . '/js/covidien_device_config.js');
    if ($node->op == $node->cancel) {
      $node_op = 'cancel';
      covidien_device_config_form_cancel();
    } elseif ($node->op == $node->delete) {
      $node_op = 'delete';
    } else {
      $node_op = 'drupal';
    }
    if ($node_op == 'drupal') {
      form_set_error(NULL, '', TRUE);
      $errors = drupal_get_messages();
      if (trim($node->title) == '' || $node->title == t('Enter Configuration Name')) {
        form_set_error('title', t('Invalid Configuration Name'));
      }
      $ischk1 = (trim($node->field_device_config_version[0]['value']) == '');
      $ischk2 = ($node->field_device_config_version[0]['value'] == t('Enter Configuration Version Number'));
      if ($ischk1 || $ischk2) {
        form_set_error('field_device_config_version', t('Invalid Configuration Version Number'));
      }
      $isdate_valid = FALSE;
      $isdate_valid = date_is_valid($node->field_effective_date[0]['value'], DATE_DATETIME, array('year', 'month', 'day'));
      //@note : php5.4
      if (isset($node->field_effective_date[0]['value']['date'])) {
        $ischk1 = ($node->field_effective_date[0]['value']['date'] == '');
        $ischk2 = ($node->field_effective_date[0]['value']['date'] != '' && !$isdate_valid);
        if ($ischk1 || $ischk2) {
          form_set_error('field_effective_date', t('Invalid Effective Date'));
        }
      }
      $isdate_valid1 = FALSE;
      $isdate_valid1 = date_is_valid($node->field_device_end_of_life[0]['value'], DATE_DATETIME, array('year', 'month', 'day'));
      $ischk1 = ($node->hidden_end_of_life != 'MM/DD/YYYY');
      //@note : php5.4
      if (isset($node->field_device_end_of_life[0]['value']['date'])) {
        $ischk3 = ($node->field_device_end_of_life[0]['value']['date'] == '');
        $ischk4 = ($node->field_device_end_of_life[0]['value']['date'] != '' && !$isdate_valid1);
        $ischk2 = ($ischk3 || $ischk4);
        if ($ischk1 && $ischk2) {
          form_set_error('field_device_end_of_life', t('Invalid End of Life Date'));
        }
      }
      if ($isdate_valid && $isdate_valid1) {
        $end_of_life_time = strtotime($node->field_device_end_of_life[0]['value']);
        $effective_date_time = strtotime($node->field_effective_date[0]['value']);
        if ($end_of_life_time <= $effective_date_time) {
          form_set_error('field_device_end_of_life', t('Effective Date must be earlier than End of Life Date'));
        }
      }
      $hw_checkbox_error = 0;
      $hwsw_checkbox_error = 0;
      $tmp_val4 = array();
      if (count($node->hidden_viewfield_config_hw_sw['nid']) > 0) {
        $tmp_val4 = array_keys($node->hidden_viewfield_config_hw_sw['nid']);
      }
      $tmp_val5 = array();
      if (count($node->hidden_viewfield_config_hw_sw_1) > 0) {
        foreach ($node->hidden_viewfield_config_hw_sw_1 as $key => $hidden_viewfield_config_hw_sw_1) {
          $tmp_val5[] = $hidden_viewfield_config_hw_sw_1['nid'];
        }
      }
      if (count($tmp_val4) > 0) {
        foreach ($tmp_val4 as $key => $tmp_val4_val) {
          if (!in_array($tmp_val4_val, $tmp_val5)) {
            $hwsw_checkbox_error++;
          }
        }
      }
      if (count($node->hidden_viewfield_config_hw_sw_1) > 0) {
        //Any one of the HW status missing, validation fails
        $error = FALSE;
        foreach ($node->hidden_viewfield_config_hw_sw_1 as $key => $hidden_viewfield_config_hw_sw_1) {
          if (empty($hidden_viewfield_config_hw_sw_1['nid'])) {
            $hw_checkbox_error++;
          }
          switch ($node->hidden_viewfield_config_hw_sw_status_1['nid']['nid'][$hidden_viewfield_config_hw_sw_1['nid']]) {
            case 'Required':
              break;
            case 'Optional':
              break;
            default:
              $error = TRUE;
          }
          if (!$error) {
            $hw_ref = $hidden_viewfield_config_hw_sw_1['nid'];
            //HW & status validation Pass and Any one of the SW status missing, validation fails
            $error1 = FALSE;
            if (count($node->hidden_viewfield_config_hw_sw['nid'][$hw_ref]) > 0) {
              foreach ($node->hidden_viewfield_config_hw_sw['nid'][$hw_ref] as $hw_swref_nid) {
                if (is_numeric($hw_swref_nid) && $hw_swref_nid > 0) {
                  switch ($node->hidden_viewfield_config_hw_sw_status['nid'][$hw_ref][$hw_swref_nid]) {
                    case 'Required':
                      break;
                    case 'Optional':
                      break;
                    default:
                      $error1 = TRUE;
                  }
                }
              }
            }
          }
        }
      }
      if ($hwsw_checkbox_error > 0) {
        form_set_error('device_config_hw_list_wraper', t('Invalid selection of Hardware/Software Catalog Items'));
      }
      if ($hw_checkbox_error > 0) {
        form_set_error('device_config_hw_list_wraper', t('Invalid Hardware'));
      }
      if ($error || $error1) {
        form_set_error('device_config_hw_list_wraper', t('Invalid Status of Hardware/Software Catalog Items'));
      }
    } else {
      form_set_error(NULL, '', TRUE);
      drupal_get_messages();
    }
  }
  if ($node->type == 'device_type_config' && $op == 'presave') {
    //save config sw and then hw and config ref
    //@note : php5.4
    if (isset($node->field_device_end_of_life[0]['value']['date'])) {
      if ($node->field_device_end_of_life[0]['value']['date'] == 'MM/DD/YYYY') {
        // Clear the date value
        $node->field_device_end_of_life = array();
      }
    }
    device_config_hardware_node_save($node);
  }
  if ($node->type == 'device_type_config' && ($op == 'insert' || $op == 'update')) {
    drupal_goto($base_url . 'covidien/admin/configuration');
  }
}

/**
 * Implements functionality to customize the views sort.
 */
function _device_config_views_by_sort($view_name, $display = 'default', $sort = '', $order = '', $arg = array(), $page) {
  $output = '';
  $view = views_get_view($view_name);
  $view->set_display($display);
  /**
   * Sorting not configured.
   */
  $items_per_page = 10;
  $view->display_handler->set_option('items_per_page', $items_per_page);
  $view->set_items_per_page($items_per_page);
  $view->pager['current_page'] = $page;
  //template.php covidien_theme_pager
  $view->set_arguments($arg);
  $view->build($display);
  $view->pre_execute();
  $output = $view->display_handler->preview();
  $view->post_execute();
  $output = $view->preview();
  return $output;
}

/**
 * Helper function for covidien_device_config_nodeapi.
 */
function device_config_hardware_node_save(&$node) {
  global $user;
  $node->field_device_config_hw_list = array();
  if (count($node->hidden_viewfield_config_hw_sw_1) > 0)
    foreach ($node->hidden_viewfield_config_hw_sw_1 as $key => $hidden_viewfield_config_hw_sw_1) {
      $error = FALSE;
      if ($node->hidden_viewfield_config_hw_sw_status_1['nid']['nid'][$hidden_viewfield_config_hw_sw_1['nid']] == 'Required') {
        $tmpnode_hw_status = array('value' => 0, 'safe' => 0, 'view' => 'Required');
      } elseif ($node->hidden_viewfield_config_hw_sw_status_1['nid']['nid'][$hidden_viewfield_config_hw_sw_1['nid']] == 'Optional') {
        $tmpnode_hw_status = array('value' => 1, 'safe' => 1, 'view' => 'Optional');
      } else {
        $error = TRUE;
      }
      if (!$error) {
        $tmpnode = array();
        $tmpnode = (object) $tmpnode;
        $tmpnode->type = 'device_config_hardware';
        $tmpnode->uid = $user->uid;
        $tmpnode->format = 0;
        $tmpnode->title = 'auto-' . $hidden_viewfield_config_hw_sw_1['nid'];
        $tmpnode->field_device_config_hardware[$key]['nid'] = $hidden_viewfield_config_hw_sw_1['nid'];
        $tmpnode->field_device_config_hw_status[] = $tmpnode_hw_status;
        $hw_ref = $hidden_viewfield_config_hw_sw_1['nid'];
        if (count($node->hidden_viewfield_config_hw_sw['nid'][$hw_ref]) > 0)
          foreach ($node->hidden_viewfield_config_hw_sw['nid'][$hw_ref] as $hw_swref_nid) {
            $error1 = FALSE;
            if ($node->hidden_viewfield_config_hw_sw_status['nid'][$hw_ref][$hw_swref_nid] == 'Required') {
              $tmpnode_1_hw_status = array('value' => 0, 'safe' => 0, 'view' => 'Required');
            } elseif ($node->hidden_viewfield_config_hw_sw_status['nid'][$hw_ref][$hw_swref_nid] == 'Optional') {
              $tmpnode_1_hw_status = array('value' => 1, 'safe' => 1, 'view' => 'Optional');
            } else {
              $error1 = TRUE;
            }
            if (!$error1) {
              $tmpnode_1 = array();
              $tmpnode_1 = (object) $tmpnode_1;
              $tmpnode_1->type = 'device_config_software';
              $tmpnode_1->uid = $user->uid;
              $tmpnode_1->format = 0;
              $tmpnode_1->title = 'auto-' . $hw_swref_nid;
              $tmpnode_1->field_device_config_software[0]['nid'] = $hw_swref_nid;
              $tmpnode_1->field_device_config_sw_status[] = $tmpnode_1_hw_status;
              node_save($tmpnode_1);
              $tmpnode->field_device_config_sw_list[]['nid'] = $tmpnode_1->nid;
            }
          }
        node_save($tmpnode);
        $node->field_device_config_hw_list[$key]['nid'] = $tmpnode->nid;
      }
    }
}

/**
 * Is any documents associated with this nid
 */
function covidien_device_config_doc($viewname, $nid) {
  $result = _getfilteroptions($viewname, '', $nid);
  $output = '';
  if (count($result) > 0) {
    $output = 'Y';
  } elseif ($nid) {
    $output = 'N';
  }
  return $output;
}

/**
 * Implements hook_views_data() to define our custom views to drupal views.
 */
function covidien_device_config_views_data() {
  $data['config_hw_sw_view'] = config_hw_sw_view_data();
  return $data;
}

/**
 * config_hw_sw_view view data defined to drupal views.
 */
function config_hw_sw_view_data() {
  $config_hw_sw_view = array();
  $config_hw_sw_view['table']['group'] = t('config_hw_sw_view');
  $config_hw_sw_view['table']['base'] = array(
    'field' => 'nid',
    'title' => t('config_hw_sw_view'),
    'help' => t('catalog config from config_hw_sw_view'),
  );
  $config_hw_sw_view['nid'] = array(
    'title' => t('nid'),
    'help' => t("nid from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $config_hw_sw_view['hw_nid'] = array(
    'title' => t('hw_nid'),
    'help' => t("hw_nid from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $config_hw_sw_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $config_hw_sw_view['hw_version'] = array(
    'title' => t('hw_version'),
    'help' => t("hw_version from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['hw_type'] = array(
    'title' => t('hw_type'),
    'help' => t("hw_type from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['hw_vid'] = array(
    'title' => t('hw_vid'),
    'help' => t("hw_vid from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $config_hw_sw_view['hw_name'] = array(
    'title' => t('hw_name'),
    'help' => t("hw_name from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['hw_description'] = array(
    'title' => t('hw_description'),
    'help' => t("hw_description from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['sw_version'] = array(
    'title' => t('sw_version'),
    'help' => t("sw_version from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['sw_type'] = array(
    'title' => t('sw_type'),
    'help' => t("sw_type from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['sw_vid'] = array(
    'title' => t('sw_vid'),
    'help' => t("sw_vid from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $config_hw_sw_view['sw_title'] = array(
    'title' => t('sw_title'),
    'help' => t("sw_title from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['sw_description'] = array(
    'title' => t('sw_description'),
    'help' => t("sw_description from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['sw_status'] = array(
    'title' => t('sw_status'),
    'help' => t("sw_status from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $config_hw_sw_view['sw_expiration'] = array(
    'title' => t('sw_expiration'),
    'help' => t("sw_expiration from config_hw_sw_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  return $config_hw_sw_view;
}

/**
 * Query alter for the configuration catlog with software inproduction and testing/Limited Release
 * 
 */
function covidien_device_config_views_query_alter(&$view, &$query) {
  if ($view->name == 'config_hw_sw') {
    $wherecount = count($query->where);
    $query->where[$wherecount] = array('clauses' => array(), 'args' => array(), 'type' => 'OR');
    array_push($query->where[$wherecount]['clauses'], " (config_hw_sw_view.sw_status) = ('%s') ");
    array_push($query->where[$wherecount]['args'], 'In Production');
    array_push($query->where[$wherecount]['clauses'], " (config_hw_sw_view.sw_status) is NULL ");
    //Condition used for Tester Permission
    $istesting = is_in_testingsw_visible();
    if ($istesting) {
      array_push($query->where[$wherecount]['clauses'], " (config_hw_sw_view.sw_status) = ('%s') ");
      array_push($query->where[$wherecount]['args'], 'Limited Release');
    }
  }
}

/**
 * Helper function to validate is the user have given permission.
 */
function is_in_testingsw_visible() {
  $view = views_get_view('is_tester');
  $view->init_display();
  $view->pre_execute();
  $view->execute();
  $result = $view->result;
  if (count($result) > 0) {
    return 1;
  } else {
    return 0;
  }
}
