<?php

/**
 * TODO
 * 1) Create patch for ahah_helper module because of drupal_json and drupal_print_js
 * 2) make sure if the module is enable on server before, must be uninstall and delete the module from systems table
 *    before the new schema could get install.
 */


/**
* Implement hook_menu
*/
function covidien_user_registration_menu() {
	$items = array (); 
  
  //Registration Landing Page
  $items['self/home'] = array(
    'title' => t('Self Registration'),
    'description' => t('Self Registration Landing Page.'),
    'page callback'				=> 'self_registration_landing_page', 
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK, 
  );
  
  //Registration Page
  $items['self/register'] = array(
    'title' => t('Self Registration'),
    'description' => t('Self Registration.'),
    //'page callback' => 'self_registration_form', 
    'page callback'				=> 'drupal_get_form',
		'page arguments'		=> array('self_registration_form'), 
    'file' => 'self_registration.inc', 
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  
  //Registration Confirmation page
  $items['self/complete'] = array(
    'title' => t('Congratulations!'),
    'description' => t('Self Registration is complete.'), 
    'page callback'				=> 'self_registration_complete', 
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK, 
  );
  
  //use this menu to get auto complete field
  $items['self/customer_name_autocomplete'] = array(
    'title' => 'Autocomplete for Customer Name',
    'page callback' => '_customer_name_autocomplete', 
    'page arguments' => array(2),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
 
  $items['self/set_customer_name'] = array(
    'title' => 'Set Customer Name',
    'page callback' => 'set_customer_name', 
    'page arguments' => array(2),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
  
  $items['self/set_account_number'] = array(
    'title' => 'Set Account Number',
    'page callback' => 'set_account_number', 
    'page arguments' => array(2),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
  
  $items['self/check_email_account'] = array(
    'title' => 'Check Email Account',
    'page callback' => 'check_email_account', 
    'page arguments' => array(2),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
  
  $items['self/check_covidien_email_account'] = array(
    'title' => 'Check Email Account',
    'page callback' => 'check_covidien_email_account', 
    'page arguments' => array(2),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
  
  //use this menu to get auto complete field for customer account
  $items['self/customer_account_autocomplete'] = array(
    'title' => 'Autocomplete for Customer Account',
    'page callback' => '_customer_account_autocomplete',
    'page arguments' => array(2),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
 
  //use this menu to get auto complete field for approving manager
  $items['self/approving_user_autocomplete'] = array(
  		'title' => 'Autocomplete for Approving Manager',
  		'page callback' => '_approving_user_autocomplete',
  		'access callback'  => TRUE,
  		'type' => MENU_CALLBACK
  );
  
  $items['self/validate_approving_manager'] = array(
  		'title' => 'Validate Approving Manager',
  		'page callback' => 'validate_approving_manager',
  		'access callback'  => TRUE,
      'page arguments' => array(2,3),
  		'type' => MENU_CALLBACK
  );
 
  //use this menu to get the pending registration list page
  //Use must login but need to check the permission
  $items['covidien/self/pending-registration-list'] = array(
    'title' => t('Pending Registration List'),
    'description' => t('Pending Registration List'), 
    'page callback'				=> 'drupal_get_form',
		'page arguments'		=> array('pending_registration_list_form'), 
    'file' => 'pending_registration_list.inc', 
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  
  //self/get-training-records - This one is use for the popup in Pending Registrant List
  $items['covidien/self/view-training-records'] = array(
    'title' => t('View Training Record Details'),
    'description' => t('View Training Record Details'),
    'page callback' => 'view_training_record_details', 
    'page arguments'		=> array(3,4),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    //'file' => 'pending_registration_list.inc'
  );
  
  $items['covidien/self/proxy-config'] = array(
    'title' => t('Set the default approving proxy'),
    'description' => t('Setting Proxy Config'), 
    'page callback'				=> 'drupal_get_form',
		'page arguments'		=> array('proxy_config_form'), 
    'file' => 'proxy_config.inc', 
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  
  $items['self/get_proxy'] = array(
    'title' => 'Get Proxy Config',
    'page callback' => 'get_proxy_config', 
    'page arguments' => array(2),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
    
  $items['self/role_list_ajax'] = array(
    'title' => 'Get Proxy Config',
    'page callback' => 'get_role_list_ajax', 
    'page arguments' => array(2,3),
    'access callback'  => TRUE, 
    'type' => MENU_CALLBACK
  );
  
  $items['self/approving'] = array(
    'title'            => t('Approving User'),
    'description'      => t('Approving User'), 
    'page callback'    => 'drupal_get_form',
		'page arguments'	 => array('approving_form'), 
    'file' => 'approving_form.inc', 
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  
  $items['self/reset_password'] = array(
    'title'            => t('Reset Password'),
    'description'      => t('Reset Password'), 
    'page callback'    => 'drupal_get_form',
		'page arguments'	 => array('self_reset_password_form'), 
    'file' => 'reset_password_form.inc', 
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  
  //Registration Confirmation page
  $items['covidien/self/complete'] = array(
    'title' => t('Approval Done'),
    'description' => t('Approval Done.'), 
    'page callback'				=> 'approval_done', 
    'page arguments' => array(3),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK, 
  );
  
  //archive user
  $items['covidien/self/archive'] = array(
    'title' => t('Archive user'),
    'description' => t('Manually Archive user'),
    'page callback' => 'manually_archive_user', 
    'page arguments'		=> array(3),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    //'file' => 'pending_registration_list.inc'
  );
  /**/
  //resend email to user
  $items['covidien/self/email'] = array(
    'title' => t('resend email'),
    'description' => t('Resend email'),
    'page callback' => 'resend_email_to_register', 
    'page arguments'		=> array(3),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    //'file' => 'pending_registration_list.inc'
  );
  
  return $items;
}
 
function covidien_user_registration_init() {
	if (arg(0) == 'self' || (arg(0) == 'covidien' && arg(1) == 'self'))  {
    drupal_add_css(drupal_get_path('module', 'covidien_user_registration') . '/css/self_registration.css');
    jquery_plugin_add('validate');
    if(arg(2) == 'pending-registration-list'){
      //load jquery UI - Currently we might not need this popup function because we might
      //remove the training date field, trainer, and certificate upload.
      drupal_add_js(drupal_get_path('module', 'covidien_user_registration') . '/js/pending_registration_list.js');
      drupal_add_css(drupal_get_path('module', 'covidien_user_registration') . '/css/ui.all.css');
      drupal_add_js('/libraries/jquery.ui/ui/ui.dialog.js');
      drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/newjquery.min.js','module','footer');
      drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/jquery.colorbox-min.js','module','footer');
      drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/jquery-ui.min.js','module','footer');
      drupal_add_css(drupal_get_path('module', 'covidien_users') . '/css/colorbox.css'); 
    } else {
      drupal_add_js(drupal_get_path('module', 'covidien_user_registration') . '/js/self_registration.js');
    }
	}
}

/**
 * Implements hook_theme()
 */
function covidien_user_registration_theme($existing, $type, $theme, $path) {
   
  $items['self_registration_landing_page'] = array( 
    'template' => 'landing_page',
    'arguments' => array( 'form' => NULL ), 
  );
  
  //Registration Form Page
  $items['self_registration_form'] = array( 
    'template' => 'user_register_form',
    'arguments' => array( 'form' => NULL ), 
  );
  //Redirect user to a complete page after self register.
  $items['self_registration_complete'] = array( 
    'template' => 'user_registration_complete',
    'arguments' => array( 'form' => NULL ), 
  );
  
  //Redirect user to a complete page after self register.
  $items['approval_done'] = array( 
    'template' => 'approval_done',
    'arguments' => array( 'form' => NULL ), 
  );
  
  //Pending Registration List - waiting for admin to approve.
  $items['pending_registration_list_form'] = array( 
    'template' => 'pending_registration_list',
    'arguments' => array( 'form' => NULL ), 
  );
  
  //View Training Record Detail, popup page
  $items['view_training_record_detail'] = array( 
    'template' => 'view_training_record_detail',
    'arguments' => array( 'form' => NULL ), 
  );
  
  //View Training Record Detail, popup page
  $items['approving_form'] = array( 
    'template' => 'approving_form',
    'arguments' => array( 'form' => NULL ), 
  );
  
  //Reset Password page
  $items['self_reset_password_form'] = array( 
    'template' => 'reset_password_form',
    'arguments' => array( 'form' => NULL ), 
  );
  return $items;
}

/*
 * Use this to render out each form items manually in template file
 */
function covidien_user_registration_preprocess_self_registration_form( &$vars ) {
  foreach( $vars['form'] as $k => $v ) {
    if( preg_match( '/^[a-z]/', $k ) ) {
      $vars[$k] = $vars['form'][$k]; 
    }
  }
}

/*
 * Use this to render out each form items manually in template file
 */
function covidien_user_registration_preprocess_approving_form( &$vars ) {
  foreach( $vars['form'] as $k => $v ) {
    if( preg_match( '/^[a-z]/', $k ) ) {
      $vars[$k] = $vars['form'][$k]; 
    } elseif($k == '#register_user'){
      $vars['register_user'] = $vars['form'][$k]; 
    }
  } 
}

/*
function covidien_user_registration_check_access() {
	return TRUE;
}

function covidien_user_register(){
	$output = theme ( 'covidien_user_register' );
	return $output;
}
*/
/**
 * Implements cron functioanlity.
 */
function covidien_user_registration_cron() {
  module_load_include('php', 'covidien_user_registration', 'download_approving_manager');
  download_approving_manager_list ();
  self_registration_notification();
  archive_user(); 
}

/**
 * archieve pending and approved user if it is over 15 days.
 */
function archive_user(){
    // make sure the cron job only archieve once  per-day.
    $today_date = gmdate('Y-m-d',  time());
    $last_archieved_day = variable_get ( 'last_archived_day', '' );
    if($today_date == $last_archieved_day){
        return;
    }
    variable_set ( 'last_archived_day', $today_date );

    //archieve all pending and approved user that had been registered for 15 days or over.
    $query = db_query("SELECT *
        FROM {registrant}
        WHERE create_time <= UNIX_TIMESTAMP( DATE_ADD( CURDATE( ) , INTERVAL -15 DAY ) )
        AND status = 'Pending' or status = 'completed'");
    
    while ($data = db_fetch_object($query)) {
        $sql = "UPDATE {registrant} SET  
            status = 'archived'
            WHERE id = %d;";
        db_query($sql,$data->id); 
    }
    watchdog('archive', 'archived today date: ' . $today_date);

}


function self_registration_notification() {
	global $base_url;
	// make sure the cron job sends only once notification per-day.
	$today_date = gmdate('Y-m-d',  time());
	$last_send_day = variable_get ( 'last_notification_sent_date', '' );
	if($today_date == $last_send_day){
		return;
	}
	variable_set ( 'last_notification_sent_date', $today_date );
	
	$query = db_query("SELECT *
            FROM {registrant}
            WHERE create_time >= UNIX_TIMESTAMP( DATE_ADD( CURDATE( ) , INTERVAL -14 DAY ) )
            AND STATUS = 'Pending'");
	$today_date = gmdate('Y-m-d',  time());
	
	$valid_date = array(
			'1 days' => '1 days',
			'2 days' => '2 days',
			'3 days' => '3 days',
			'4 days' => '4 days',
			'5 days' => '5 days',
			'6 days' => '6 days',
			'8 days' => '8 days',
			'10 days' => '10 days',
			'12 days' => '12 days',
			'14 days' => '14 days',
	);
	while ($data = db_fetch_object($query)) {
		$register_date = gmdate('Y-m-d',  $data->create_time);
		$date_diff = dateDiff($today_date, $register_date);
	
		if(isset($date_diff['days'])){
			if(in_array($date_diff['days'], $valid_date)){
				//print($date_diff['days']);
				$user_name = $data->first_name . ' ' . $data->last_name;
				$email = $data->email;
					
				//Send out email to register user
				$to = $email; // to e-mail address
				$from = "noreply@covidien.com"; // from e-mail address
				$subject = "Self Registration account status"; // subject of e-mail
				$body = "Hi " . $user_name . ", your account is still under pending review.";
				$params = array(
						'subject' => $subject,
						'body' => $body,
				);
				drupal_mail('covidien_user_registration', 'self_register', $to, language_default(), $params, $from);
	
				$is_covidien_user = $data->is_covidien_user;
				if(!$is_covidien_user){
					$cots = db_query('SELECT cot FROM registrant_cot WHERE registrant_id=%d',$data->id);
					while(($cot = db_fetch_object($cots)) !==false){
						//Send out email to Approving proxy
						$to_manager = db_result(db_query('SELECT proxy FROM content_type_product_line where nid=%d',$cot->cot));
						if($to_manager){
							break;
						}
					}
				}else{
					//Send out email to Approving manager
					$to_manager = $data->approving_user;
				}
				if(!$to_manager){
					//watchdog('', '');// need to log this registration we cannot find its approving mananger/proxy.
					continue;
				}
				$to_manager_subject = "New registrant is waiting for your approval";
				
        $to_manager_body = "Dear " . $data->approving_user . ",\n\nYou received this email because you are set as approving manager of "
                      . $base_url . ". Further action need to take.\n A new user has registed to " . $base_url . ". Please click below link to view more information and take action: " 
                      . $base_url . "/self/approving/" . $data->id . "/" . $data->active_code . " \n\nThank you,\nCovidien Admin ";
  
        
        $to_manager_params = array(
						'subject' => $to_manager_subject,
						'body' => $to_manager_body,
				);
				drupal_mail('covidien_user_registration', 'self_register', $to_manager, language_default(), $to_manager_params, $from);
			}
		}
	}	
}
function covidien_user_registration_mail($key, &$message, $params) {
  switch ($key) {
    case 'self_register':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
    break;
    }
}
/**
 *
 * @param type $string - passing in customer name search string
 * return an array of match customer names
 */
function _customer_name_autocomplete($string) {
 
  if(strlen($string) > 2) {
    $matches = array(); 
    //the customer name will be the title from node table and the customer account will be from 
    // content_type_bu_customer table.
    // nid from node is the same as field_customer_party_pk_nid from field_customer_party_pk_nid 	
    $query = "SELECT node1.title AS customer_name, node1.nid
              FROM {content_type_party}
              LEFT JOIN {content_type_bu_customer} ON content_type_bu_customer.field_customer_party_pk_nid = content_type_party.nid
              LEFT JOIN {node AS node1} ON node1.nid = content_type_bu_customer.field_customer_party_pk_nid";
    //if strlen > 2 and empty string
    if(strlen(trim($string)) == 0) {
      $query .= " WHERE node1.title IS NOT NULL";
    } else {
      $query .= " WHERE LOWER(node1.title) LIKE LOWER('%s%')";
    }
    
    $result = db_query_range($query, $string, 0, 20);
     
    while ($data = db_fetch_object($result)) { 
      $matches[$data->customer_name] = check_plain($data->customer_name);
    }  
    print drupal_to_js($matches);
    exit();
  } else {
    print drupal_to_js('');
    exit();
  }
}

/**
 *
 * @param type $string - account number
 * Return Customer Name
 */
function set_customer_name($string) { 
  if(strlen($string) > 2) {
    $matches = array();  	
    $result = db_query("SELECT title
                        FROM content_type_party
                        LEFT JOIN content_type_bu_customer ON content_type_bu_customer.field_customer_party_pk_nid = content_type_party.nid
                        LEFT JOIN node AS node1 ON node1.nid = content_type_bu_customer.field_customer_party_pk_nid
                        WHERE content_type_bu_customer.field_bu_customer_account_number_value = '%s'", $string);
     
    while ($data = db_fetch_object($result)) { 
      $matches[$data->title] = check_plain($data->title);
    }  
    print drupal_to_js($matches);
    exit();
  } else {
    print drupal_to_js('');
    exit();
  }
}

/**
 *
 * @param type $string - pass in customer name
 * Return Customer account
 */
function set_account_number($string) { 
  if(strlen($string) > 2) {
    $matches = array();  	
    $result = db_query("SELECT content_type_bu_customer.field_bu_customer_account_number_value as account
                        FROM content_type_party
                        LEFT JOIN content_type_bu_customer ON content_type_bu_customer.field_customer_party_pk_nid = content_type_party.nid
                        LEFT JOIN node AS node1 ON node1.nid = content_type_bu_customer.field_customer_party_pk_nid
                        WHERE title = '%s'", $string);
     
    while ($data = db_fetch_object($result)) { 
      $matches[$data->account] = check_plain($data->account);
    }  
    print drupal_to_js($matches);
    exit();
  } else {
    print drupal_to_js('');
    exit();
  }
}
/**
 *
 * @param type $string - Customer Account passing in
 * return an array of matching account
 */
function _customer_account_autocomplete($string) {
   
  if(strlen($string) > 2) {
    $matches = array(); 
    
    $query = "SELECT content_type_bu_customer.field_bu_customer_account_number_value AS customer_account
              FROM {content_type_party}
              LEFT JOIN {content_type_bu_customer} ON content_type_bu_customer.field_customer_party_pk_nid = content_type_party.nid
              LEFT JOIN {node AS node1} ON node1.nid = content_type_bu_customer.field_customer_party_pk_nid";

    //if strlen > 2 and empty string
    if(strlen(trim($string)) == 0) {
      $query .= " WHERE content_type_bu_customer.field_bu_customer_account_number_value IS NOT NULL";
    } else {
      $query .= " WHERE LOWER(content_type_bu_customer.field_bu_customer_account_number_value) LIKE LOWER('%s%')";
    }
    
    $result = db_query_range($query, $string, 0, 20);
       
    while ($data = db_fetch_object($result)) { 
      $matches[$data->customer_account] = check_plain($data->customer_account);
    }  
    print drupal_to_js($matches);
    exit();
  } else {
    print drupal_to_js('');
    exit();
  }
}
/**
 * 
 * @param string $string Approving User passing in
 * @return an array of matching approving manager
 */
function _approving_user_autocomplete(){
	$string = arg(2);
	if(strlen($string) > 2) {
		$matches = array();
    
    $query = "SELECT email, user_name FROM {registration_approving_manager}";
		if(strlen(trim($string)) > 0) {
      $query .= " WHERE LOWER(user_name) LIKE LOWER('%s%')";
    }
    $query .= " ORDER BY registration_approving_manager.user_name ASC";
    $result = db_query_range($query, $string, 0, 10);		 
		while ($data = db_fetch_object($result)) {
			$matches[$data->email] = check_plain($data->user_name);
		}		
		print drupal_to_js($matches);
		exit();
	} else {
		print drupal_to_js('');
		exit();
	}
}
 
//Get Role List base on COT
/*
 * on the "Self-Registration-NON-COV" page, so no matter what COT the user selected, 
 * the Role selection should only have "Biomed, Deistributor", and may be "Field Service Technician"?
 */
function get_role_list($cot,$cov = 'No'){
  $allow_roles = array(
          'biomed' => 'biomed',
          'distributor' => 'distributor',
        );
     
  $query = "SELECT node.nid AS nid,
     node.title AS node_title,
     node_data_field_roles_description.field_roles_description_value AS node_data_field_roles_description_field_roles_description_value,
     node.type AS node_type,
     node.vid AS node_vid
     FROM node node 
     LEFT JOIN content_field_expiration_datetime node_data_field_expiration_datetime ON node.vid = node_data_field_expiration_datetime.vid
     INNER JOIN content_type_roles node_data_field_role_product_line ON node.vid = node_data_field_role_product_line.vid
     LEFT JOIN content_type_roles node_data_field_roles_description ON node.vid = node_data_field_roles_description.vid
     WHERE ((node.type in ('roles')) AND (node_data_field_role_product_line.field_role_product_line_nid = %d))
     AND (node_data_field_expiration_datetime.field_expiration_datetime_value IS NULL)
     ORDER BY node_title ASC";
  
  $roles = array('' => ''); 
  $result = db_query($query, $cot); 
  while ($role = db_fetch_object($result)) { 
    if($role->node_title != 'CoT Admin'){
      if($cov == 'Yes'){
        $roles[$role->nid] = $role->node_title;
      } else {
        if(in_array(strtolower($role->node_title), $allow_roles)){
          $roles[$role->nid] = $role->node_title;
        }
      }
    }
  } 
  return $roles;
}

/**
 * Landing page
 */
function self_registration_landing_page(){
  $output = theme ( 'self_registration_landing_page' );
	return $output;
}

/**
 * after completed the form, user will get redirect to this page
 */
function self_registration_complete(){
  $output = theme ( 'self_registration_complete' );
	return $output;
}

/**
 * after approval is completed, user will get redirect to this page
 */
function approval_done($message){
  $output = theme ('approval_done');
	return $output;
}
/**
 *
 * @param type $email 
 * Return total 
 */
function check_email_account($email){ 
  
  if(strlen($email) > 2) {
    $total = array();  	
    $result = db_query("SELECT count( email ) AS total
                        FROM {registrant}
                        WHERE email = '%s' and status != 'archived'", $email);
     
    while ($data = db_fetch_object($result)) { 
      if($data->total > 0){
        drupal_json(array("total" => $data->total));
        exit();
      } else {
        //Check user table as well
        $user_result = db_query("SELECT count( mail ) AS total
                            FROM {users}
                            WHERE mail = '%s'", $email);

        while ($user_data = db_fetch_object($user_result)) { 
          if($user_data){
            drupal_json(array("total" => $user_data->total));
            exit();
          } else {
            drupal_json(array("total" => 0));
            exit();
          }
        }
      } 
    }
     
  } 
}

/**
 *
 * @param type $email 
 * Check to make sure the approving proxy user is the covidien user
 */
function check_covidien_email_account($email){
  if(strlen($email) > 11) {
    $total = array();    
    $user_result = db_query("SELECT count( mail ) AS total
                        FROM {users}
                        WHERE mail = '%s'", $email);

    while ($user_data = db_fetch_object($user_result)) { 
      if($user_data){
        drupal_json(array("total" => $user_data->total));
        exit();
      } else {
        drupal_json(array("total" => 0));
        exit();
      }
    } 
  } 
}
/**
 * Get proxy email by cot id
 */
function get_proxy_config($nid){
  if(strlen($nid) > 0) { 	
    $result = db_query("SELECT proxy
                        FROM {content_type_product_line}
                        WHERE nid = %d", $nid);
     
    while ($data = db_fetch_object($result)) { 
      if($data){
        drupal_json(array("email" => $data->proxy));
        exit();
      }  
    }  
  }

}

/**
 * Get role list by cot id
 */
function get_role_list_ajax($cot,$covidien){
  
  if(strlen($cot) > 0) { 	
    $allow_roles = array(
          'biomed' => 'biomed',
          'distributor' => 'distributor',
        );
    
    $query = "SELECT node.nid AS nid,
       node.title AS node_title,
       node_data_field_roles_description.field_roles_description_value AS node_data_field_roles_description_field_roles_description_value,
       node.type AS node_type,
       node.vid AS node_vid
       FROM node node 
       LEFT JOIN content_field_expiration_datetime node_data_field_expiration_datetime ON node.vid = node_data_field_expiration_datetime.vid
       INNER JOIN content_type_roles node_data_field_role_product_line ON node.vid = node_data_field_role_product_line.vid
       LEFT JOIN content_type_roles node_data_field_roles_description ON node.vid = node_data_field_roles_description.vid
       WHERE ((node.type in ('roles')) AND (node_data_field_role_product_line.field_role_product_line_nid = %d))
       AND (node_data_field_expiration_datetime.field_expiration_datetime_value IS NULL)
       ORDER BY node_title ASC";

    $roles = array();
    $result = db_query($query, $cot); 
    while ($role = db_fetch_object($result)) { 
      if($role->node_title != 'CoT Admin'){
        if($covidien == 'covidien'){
          $roles[$role->nid] = str_replace('&', 'ANDCODE', $role->node_title); 
        } else {
          if(in_array(strtolower($role->node_title), $allow_roles)){
            $roles[$role->nid] = $role->node_title;
          }
        }
      }
    } 
     
    drupal_json($roles);
    exit(); 
  }
}

/**
 * Convert 12014-10-01 00:00:00 to unix timestamp
 */
function convert_date($date){  
  $date = str_replace(" 00:00:00", '', $date);
  $timeStamp = null;
  list($month, $day, $year) = split('-', $date); 
  
  if(strlen($month) == 4){
    $timeStamp = mktime(0, 0, 0, $day, $year, $month); 
  } else {
    $timeStamp = mktime(0, 0, 0, $month, $day, $year);
  } 
  return ($timeStamp); 
}

/**
 *
 * @param type $date 
 * convert date format from 10/01/2014
 * to 2014-10-31 00:00:00 
 *  
 */
function exchange_date_format($date){ 
  $new_date = null;
  list($month, $day, $year) = split('/', $date);
  $new_date = $year . '-' . $month . '-' . $day . ' 00:00:00';
  return ($new_date); 
   
}

/**
 * TODO - still need to finish this function
 * @param type $user_id
 * @return type string output
 */
function view_training_record_details($user_id,$from){ 
  $sql = "SELECT id, device_type, trainer_uid, training_date, certificate_file
          FROM {registrant_training}
          WHERE registrant_id = %d";
  
  $header = array(
    array('data' => t('Device Type')),
    array('data' => t('Trainer')),
    array('data' => t('Training Date')),
    array('data' => t('Certificate File')), 
  );
  
  $training_result = db_query($sql,$user_id);  
  
  while ($record = db_fetch_object($training_result)) { 
    //return $record->device_type;
    $file = '';
    $file_url = '';
    if(isset($record->certificate_file) && $record->certificate_file != '0'){
      $file =	field_file_load($record->certificate_file, $reset = NULL); 
      if(isset($file['filename']) && $file['filename'] != ''){
        $file_url = $file['filename'] . ' ' . l('View', $file['filepath'],array(
                                          'attributes' => array(
                                            'class' => 'training_file',
                                            'target' => '_blank',
                                            )
                                          ));
      }
    }
    $training_date = '';
    if(isset($record->training_date) && $record->training_date != '0'){
      $training_date = date("m/d/Y",$record->training_date);
    }
    $rows[$record->id]['device_type'] = get_title($record->device_type);
    $rows[$record->id]['trainer'] = get_title($record->trainer_uid);
    $rows[$record->id]['date'] = $training_date;
    $rows[$record->id]['certificate'] = $file_url;
  }
  $table_list = theme('table',$header, $rows);
  
  
  //$output['data'] = theme ( 'view_training_record_detail' );
  if($from == ''){
    print($table_list);     
	  exit();
  } else {
    return $table_list;
  }
}


/**
 * View Training Records by User ID and COT
 */
function view_training_devices_list($user_id,$cot_id){  
  $sql = "SELECT * 
          FROM {registrant_training}
          where registrant_id = %d
          and registrant_cot_id = %d";
  $rows = array();
  $header = array(
    array('data' => t('Device Type')),
    array('data' => t('Trainer')),
    array('data' => t('Training Date')),
    array('data' => t('Certificate File')), 
  );
  
  $training_result = db_query($sql,$user_id, $cot_id);  
  while ($record = db_fetch_object($training_result)) { 
    //return $record->device_type;
    $file = '';
    $file_url = '';
    if(isset($record->certificate_file) && $record->certificate_file != '0'){
      $file =	field_file_load($record->certificate_file, $reset = NULL); 
      if(isset($file['filename']) && $file['filename'] != ''){
        $file_url = $file['filename'] . ' ' . l('View', $file['filepath'],array(
                                          'attributes' => array(
                                            'class' => 'training_file',
                                            'target' => '_blank',
                                            )
                                          ));
      }
    }
    $training_date = '';
    if(isset($record->training_date) && $record->training_date != '0'){
      $training_date = date("m/d/Y",$record->training_date);
    }
    $rows[$record->id]['device_type'] = get_title($record->device_type);
    $rows[$record->id]['trainer'] = get_title($record->trainer_uid);
    $rows[$record->id]['date'] = $training_date;
    $rows[$record->id]['certificate'] = $file_url;
  }
  $table_list = theme('table',$header, $rows);
   
  return $table_list;
 
}
/**
 * Get title of the node
 */
function get_title($id){
  $query = "SELECT node.title
            FROM node
            WHERE node.nid = %d";
  $result = db_query($query, $id); 
  
  while ($record = db_fetch_object($result)) { 
    return $record->title;
	}
}
 
/**
 *
 * @param type $string - passing in customer name search string
 * @return an nid
 */
function get_customer_name_by_title($string) {
  $item = NULL;
  if(strlen($string) > 2) {
    $query = "SELECT node1.title AS customer_name, node1.nid
              FROM {content_type_party}
              LEFT JOIN {content_type_bu_customer} ON content_type_bu_customer.field_customer_party_pk_nid = content_type_party.nid
              LEFT JOIN {node AS node1} ON node1.nid = content_type_bu_customer.field_customer_party_pk_nid";
    //if strlen > 2 and empty string
    if(strlen(trim($string)) == 0) {
      $query .= " WHERE node1.title IS NOT NULL";
    } else {
      $query .= " WHERE LOWER(node1.title) = LOWER('%s')";
    }
    
    $result = db_query($query, $string);
     
    while ($data = db_fetch_object($result)) {  
      $item = $data->nid; 
    }  
  }
  return $item;
}
/**
 *
 * @param type $string
 * @return type string
 */
function get_customer_account_by_title($string) {
   
  if(strlen($string) > 2) { 
    $query = "SELECT content_type_bu_customer.field_bu_customer_account_number_value AS customer_account, content_type_bu_customer.nid
              FROM {content_type_party}
              LEFT JOIN {content_type_bu_customer} ON content_type_bu_customer.field_customer_party_pk_nid = content_type_party.nid
              LEFT JOIN {node AS node1} ON node1.nid = content_type_bu_customer.field_customer_party_pk_nid";

    //if strlen > 2 and empty string
    if(strlen(trim($string)) == 0) {
      $query .= " WHERE content_type_bu_customer.field_bu_customer_account_number_value IS NOT NULL";
    } else {
      $query .= " WHERE LOWER(content_type_bu_customer.field_bu_customer_account_number_value) LIKE LOWER('%s%')";
    }
    
    $result = db_query_range($query, $string, 0, 1);
       
    while ($data = db_fetch_object($result)) { 
      return $data->nid; 
    }  
  }
}


function dateDiff($time1, $time2, $precision = 6) {
    // If not numeric then convert texts to unix timestamps
    if (!is_int($time1)) {
      $time1 = strtotime($time1);
    }
    if (!is_int($time2)) {
      $time2 = strtotime($time2);
    }
 
    // If time1 is bigger than time2
    // Then swap time1 and time2
    if ($time1 > $time2) {
      $ttime = $time1;
      $time1 = $time2;
      $time2 = $ttime;
    }
 
    // Set up intervals and diffs arrays
    $intervals = array('year','month','day','hour','minute','second');
    $diffs = array();
 
    // Loop thru all intervals
    foreach ($intervals as $interval) {
      // Create temp time from time1 and interval
      $ttime = strtotime('+1 ' . $interval, $time1);
      // Set initial values
      $add = 1;
      $looped = 0;
      // Loop until temp time is smaller than time2
      while ($time2 >= $ttime) {
        // Create new temp time from time1 and interval
        $add++;
        $ttime = strtotime("+" . $add . " " . $interval, $time1);
        $looped++;
      }
 
      $time1 = strtotime("+" . $looped . " " . $interval, $time1);
      $diffs[$interval] = $looped;
    }
 
    $count = 0;
    $times = array();
    // Loop thru all diffs
    foreach ($diffs as $interval => $value) {
      // Break if we have needed precission
      if ($count >= $precision) {
      break;
          }
          // Add value and interval 
          // if value is bigger than 0
      if ($value > 0) {
        // Add s if value is not 1
        if ($value != 1) {
          $interval .= "s";
        }
        // Add value and interval to times array
        //print_r($times);
        $times[$interval] = $value . " " . $interval;
        $count++;
      }
    }
 
    // Return string with times
    return $times; //implode(", ", $times);
  }
  
  //Get Trainer name base on device type
function get_trainer_name($device_id){
  $query = "SELECT DISTINCT ( pp.field_person_pk_nid ) AS nid, n.title AS name
            FROM node n
            JOIN content_type_device_user_privileges dup ON n.vid = dup.vid
            LEFT JOIN content_type_section_access_option sao ON dup.field_user_section_access_nid = sao.vid
            LEFT JOIN node aon ON sao.field_access_option_nid = aon.nid
            LEFT JOIN content_field_device_type fdt ON n.vid = fdt.vid
            LEFT JOIN content_field_person_pk pp ON n.vid = pp.vid
            WHERE n.type = 'device_user_privileges'
            AND aon.title = 'yes'
            AND fdt.field_device_type_nid = %d";
  return db_query($query, $device_id);
}

/**
 *
 * @param type $string
 * @return type object
 */
function get_customer_account($string) { 
  $result = db_query("SELECT content_type_bu_customer.field_bu_customer_account_number_value AS account
                            FROM {content_type_party}
                            LEFT JOIN {content_type_bu_customer} ON content_type_bu_customer.field_customer_party_pk_nid = content_type_party.nid
                            LEFT JOIN {node} AS node1 ON node1.nid = content_type_bu_customer.field_customer_party_pk_nid
                            WHERE LOWER( node1.title ) = LOWER( '%s')",$string);

  while ($data = db_fetch_object($result)) { 
    //watchdog('debug get customer', print_r($data, 1)); 
    return $data->account;
  }     
} 


/**
 *
 * @param type $approving_manager
 * @param type $cov_user
 * @return type string
 */
function validate_approving_manager($approving_manager,$cov_user){ 
  $query = '';
  if($cov_user == 1){
    $query = "SELECT *
              FROM {registration_approving_manager}
              WHERE email = '%s'";
  } else{
    $query = "SELECT *
              FROM {content_type_product_line}
              WHERE proxy = '%s'";
  }
  
  $result = db_query($query,$approving_manager);
  $rows = array();
  while ($row = db_fetch_object($result)) {   
    drupal_json(array("valid" => 1));
    exit();
  }  
  drupal_json(array("valid" => 0));
  exit();
}
 
/**
 * Manually Archive user by ajax call
 * @param type $approving_manager
 * @param type $cov_user
 * @return type string
 */
function manually_archive_user($register_id){ 
    
  $sql = "UPDATE {registrant} SET  
            status = 'archived'
            WHERE id = %d;";
  db_query($sql,$register_id);
  
  drupal_json(array("valid" => 1));
  exit();
}
    

/**
 * Manually resend email to approved user by ajax call
 * @param type $approving_manager
 * @param type $cov_user
 * @return type string
 */
function resend_email_to_register($register_id){  
  global $base_url; 
  
  $result = db_query("select * from"
    . " {registrant} "
    . " where id = %d ",$register_id);

  $user = '';
  while ($data = db_fetch_object($result)) {  
    $user = $data;
  }    
  $temporary_url .= $user->id . '/' . $user->active_code . '/' . $user->email; 
  $user_name = $user->first_name . ' ' . $user->last_name;
  $email = $user->email;

  //Send out email to register user
  $to = $email; // to e-mail address
  $from = "noreply@covidien.com"; // from e-mail address
  $subject = "Your account has been accepted"; // subject of e-mail 
  $body = "Dear " . $user_name . ",\n\nCongratulations! You have approved to " 
          . $base_url . " the Covidien Device Management portal.\nPlease click the following link to reset your password. " 
          . $base_url . "/self/reset_password/" . $user->id . '/' . $user->active_code . '/' . $user->email
          . ".\nIf you not reset your password, you cannot access GDMP.\n\n"
          . "Thank you,\n Covidien Admin";
  $params = array(
  'subject' => $subject,
  'body' => $body,
  );
  drupal_mail('covidien_user_registration', 'self_register', $to, language_default(), $params, $from);

  drupal_json(array("valid" => 1));
  exit();
}