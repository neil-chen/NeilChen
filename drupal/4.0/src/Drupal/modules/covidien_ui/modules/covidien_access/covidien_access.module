<?php

/**
 * @file
 * Implements access policy functionality.
 */

/**
 * Implements hook_menu().
 */
function covidien_access_menu() {
  $items = array();
  $items['covidien/access-denied'] = array(
    'page callback' => 'covidien_access_denied',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/devices/access-denied'] = array(
    'page callback' => 'covidien_access_denied',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/access-denied'] = array(
    'page callback' => 'covidien_access_denied',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/admin/access-denied'] = array(
    'page callback' => 'covidien_access_denied',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/no-reports'] = array(
    'page callback' => 'covidien_access_no_reports',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/404'] = array(
    'page callback' => 'covidien_404',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements the page callback.
 */
function covidien_access_denied() {
  $output = t('You are not authorized to view this page');
  $output = theme('covidien_access_no_access_theme', array('output' => $output));
  return $output;
}

/**
 * Implements the page callback.
 */
function covidien_404() {
  //header("HTTP/1.0 404 Not Found");
}

/**
 * Implements the page callback.
 */
function covidien_access_no_reports() {
  global $user;
  $pltitle = '';
  $plnid = $user->product_line;
  if ($plnid > 0) {
    $plnode = node_load($plnid);
    $pltitle = $plnode->title;
  }
  drupal_set_title(t('Select Report and Set Report Parameters'));
  $output = t('No defined reports for product line @pltitle', array('@pltitle' => $pltitle));
  $output = theme('covidien_access_no_reports_theme', array('output' => $output));
  return $output;
}

/**
 * Implements hook_theme()
 */
function covidien_access_theme() {
  return array(
    'covidien_access_no_reports_theme' => array(
      'template' => 'covidien_access_no_reports_theme',
      'arguments' => array('arg'),
    ),
    'covidien_access_no_access_theme' => array(
      'template' => 'covidien_access_no_access_theme',
      'arguments' => array('arg'),
    ),
  );
}

/**
 * Template preprocess for no-reports page - Reports
 */
function template_preprocess_covidien_access_no_reports_theme(&$vars) {
  $vars['output'] = $vars[0]['output'];
}

/**
 * Template preprocess for no-access page - Reports
 */
function template_preprocess_covidien_access_no_access_theme(&$vars) {
  $vars['output'] = $vars[0]['output'];
}

/**
 * Implements hook_views_default_views().
 */
function covidien_access_views_default_views() {
  $views = array();
  $files = file_scan_directory(drupal_get_path('module', 'covidien_access') . '/views', '.inc');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}

/**
 * Implements hook_init.
 * For implementing Productline access policy used in views arguments.
 */
function covidien_access_init() {
  module_load_include('inc', 'covidien_access', 'covidien_access_query');
  global $conf, $user;
  // After Installation process completed productline and access policy check.
  if (($conf['install_task'] == 'done')) {
    // Get Customer nid and Account numbers for Login Users and stored it in $user global.
    $user->cot_productline = array();
    $user->customer_nid = array();
    $user->customer_account_nid = array();
    if ($user->uid == 1) {
      $user->covidien_user = 'Yes';
    } else {
      $nid = getNodeDetailsAccess($user->name, 'person');
      $user_details = node_load($nid);
      $user->covidien_user = $user_details->field_covidien_employee[0]['value'];
      if ($user->covidien_user == 'No') {
        $user->customer_nid[] = $user_details->field_company_name[0]['nid'];
        $user->customer_account_nid[$user_details->field_company_name[0]['nid']] = $user_details->field_comp_account_no[0]['nid'];
      }
    }
    $devices_nid_arr = array();
    $access_nodetype = array();
    $report_access = allReportList();
    $expired = FALSE;
    $expired_user = userExpired($user->name);
    if (!empty($expired_user)) {
      $expired = TRUE;
    }

    if ((arg(3) != 'change_password') && (arg(0) != 'logout') && $user->uid != 0) {
      if ($expired) {
        drupal_goto('covidien/users/settings/change_password');
      }
    }
    foreach ($user->roles as $role) {
      $rname = explode('__', $role);
      if ($user->uid == 1) {
        $rname[0] = "all";
      }
      if ($rname[0] > 0) {
        $user->cot_productline[] = $rname[0];
      }
    }
    if ((arg(2) == 'users' && arg(3) == 'list') || (arg(2) == 'activity' && arg(1) == 'log') || (arg(1) == 'device') || (arg(1) == 'reports' && arg(3) == '5')) {
      $user->cot_productline = array();
      $user->cot_productline[] = $_SESSION['default_cot'];
    }
    if ($user->uid == 1) {
      $user->cot_productline[] = 'all';
    }
    $user->devices_access['reports'] = array();
    if (count($user->roles) > 0) {
      foreach ($user->roles as $role) {
        $rname = explode('__', $role);
        if ($user->uid == 1) {
          $rname[0] = "all";
        }
        if ($_SESSION['default_cot']) {
          $default_cot = $_SESSION['default_cot'];
        } else {
          $cot_result = getUserProductlinelist();
          $default_cot = $cot_result['default'];
          $_SESSION['default_cot'] = $default_cot;
        }

        if (($default_cot != $rname[0]) && ($user->uid != 1)) {
          continue;
        } else {
          $product_line = $rname[0];
        }
        if (arg(4) == 'mcot') {
          $product_line = implode("+", $user->cot_productline);
        }
        $view = views_get_view('access_role_devices_nid');
        if (is_object($view)) {
          $view->init_display();
          $view->pre_execute(array($product_line));
          $view->execute();
          $result = $view->result;
        } else {
          $result = array();
        }
        $roleaccess = getUserAccessDetails($role);
        $user->devices_access['system'] = array('view');
        if (is_array($roleaccess)) {
          $user->devices_access = covidien_user_access_tab($roleaccess, &$access_nodetype);
        }
        if (count($result) > 0) {
          foreach ($result as $rec) {
            if ($rec->nid != '') {
              $devices_nid_arr[] = $rec->nid;
              $pl_nid_arr[] = $rec->node_node_data_field_device_product_line_nid;
            }
            if (arg(4) == 'mcot') {
              $product_line = implode("+", $user->cot_productline);
            }
            $view = views_get_view('access_role_devices_nid');
            if (is_object($view)) {
              $view->init_display();
              $view->pre_execute(array($product_line));
              $view->execute();
              $result = $view->result;
            } else {
              $result = array();
            }
            $roleaccess = getUserAccessDetails($role);
            $user->devices_access['system'] = array('view');
            if (is_array($roleaccess)) {
              $user->devices_access = covidien_user_access_tab($roleaccess, &$access_nodetype);
            }
            if (count($result) > 0) {
              foreach ($result as $rec) {
                if ($rec->nid != '') {
                  $devices_nid_arr[] = $rec->nid;
                  $pl_nid_arr[] = $rec->node_node_data_field_device_product_line_nid;
                }
              }
            }
            $user->product_line = $_SESSION['default_cot'];
          }
        }
        $user->product_line = $_SESSION['default_cot'];
      }
    }
    // Content type list to perform product line based access level check.
    $user->access_check_nodetype = array('hardware', 'software', 'document', 'firmware', 'device_type_config', 'person', 'roles');
    if ($user->uid == 1) {
      $user->devices_nid = 'all';
      $user->pl_nid = 'all';
      $user->devices_access = array();
      $user->devices_access['system'] = array('view', 'edit');
      $user->devices_access['users'] = array('view', 'email', 'print', 'edit');
      $user->devices_access['hardware'] = array('view', 'edit');
      $user->devices_access['software'] = array('view', 'edit');
      $user->devices_access['firmware'] = array('view', 'edit');
      $user->devices_access['document'] = array('view', 'edit');
      $user->devices_access['configuration'] = array('view', 'edit');
      $user->access_nodetype = array('hardware', 'software', 'document', 'firmware', 'device_type_config', 'person', 'roles');
      $user->devices_access['reports'] = array('view');
      $user->devices_access['devices'] = array('view');
      $user->devices_access['feature'] = array('view', 'edit');
      $user->devices_access['alert'] = array('view', 'edit'); //add alert 
      $user->devices_access['trade_embargo'] = array('view', 'edit'); //add trade_embargo 
    } else {
      if (count($devices_nid_arr) > 0) {
        $user->devices_nid = implode(',', $devices_nid_arr);
      }
      if (count($pl_nid_arr) > 0) {
        $user->pl_nid = implode(',', $pl_nid_arr);
      }
      $user->access_nodetype = $access_nodetype;
    }
    //move access to template
    // Catalog Menu naviagation access controlled. 
  } //end if installed 
}

/**
 * Implements hook_nodeapi for access control.
 */
function covidien_access_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  $admin_nodetype = admin_nodetype();

  //Node device type based restrict on insert,update. Delete default no permission. 
  $req_device_id = $node->field_device_type[0]['nid'];
  $req_nodetype = $node->type;

  $patharg = arg(2);
  if ($op == 'prepare' && $patharg == 'edit' && $user->uid != 1) {
    if (in_array($req_nodetype, $admin_nodetype)) {
      drupal_goto("covidien/admin/access-denied");
    }
  }
  if ($op == 'prepare' && $patharg == 'edit') {
    $nid = arg(1);
    $val = checkExpirednodeQuery($nid);
    if ((!empty($val)) && $val != '0000-00-00 00:00:00') {
      drupal_goto("covidien/page-not-found");
    }
  }
  if (is_array($user->access_nodetype)) {
    $valid_nodetype = $user->access_nodetype;
  } else {
    $valid_nodetype = array();
  }
  $access_check_nodetype = $user->access_check_nodetype;
  //The function below prevent self reset password from generate node because it got redirect before node_save get call
  //so will skip it is it if self register call
  if (isset($node->from_page) && $node->from_page == 'self_reset') {
    $indexperson = array_search('person', $access_check_nodetype);
    unset($access_check_nodetype[$indexperson]);
  }

  if (is_array($access_check_nodetype)) {
    if (in_array($req_nodetype, $access_check_nodetype)) {
      if (($op != 'load') && (count($valid_nodetype) == 0 || !in_array($req_nodetype, $valid_nodetype)) || ($req_device_id != '' && __covidien_access_devices_nid($req_device_id) == 0)) {
        drupal_goto("covidien/admin/access-denied");
      }
    }
  }
}

/**
 * views device access check helper.
 */
function __covidien_access_devices_nid($arg) {
  //devices access policy
  global $user;
  if ($user->devices_nid != 'all') {
    $valid_devices = explode(',', $user->devices_nid);
    $dev_nid = $arg;
    if (is_numeric($dev_nid) && $dev_nid > 0) {
      if (in_array($dev_nid, $valid_devices)) {
        $arg = $dev_nid;
      } else {
        $arg = 0;
      }
    } else {
      $arg = $user->devices_nid;
    }
  }
  return $arg;
}

/**
 * Validate productline
 */
function __covidien_access_pl_nid($arg) {
  global $user;
  $pl_nid = $user->pl_nid;
  $pl_nidarr = explode(',', $pl_nid);
  if ($pl_nid != 'all') {
    if (!in_array($arg, $pl_nidarr)) {
      $arg = 0;
    }
  }
  return $arg;
}

function roleAccessforAPI($uid) {
  $role = getUserRoldQuery($uid);
  $roleaccess = getUserAccessDetails($role);
  if (is_array($roleaccess)) {
    if ($roleaccess['User management Tab'] == 'No') {
      $result['users'] = array();
    } elseif ($roleaccess['User management Tab'] == 'View Only') {
      $result['users'] = array('view');
    } elseif ($roleaccess['User management Tab'] == 'View & Edit') {
      $result['users'] = array('view', 'edit');
    }
    if ($roleaccess['Software catalog Tab'] == 'No') {
      $result['software'] = array();
    } elseif ($roleaccess['Software catalog Tab'] == 'View Only') {
      $result['software'] = array('view');
    } elseif ($roleaccess['Software catalog Tab'] == 'View & Edit') {
      $result['software'] = array('view', 'edit');
    }
    if ($roleaccess['Hardware catalog Tab'] == 'No') {
      $result['hardware'] = array();
    } elseif ($roleaccess['Hardware catalog Tab'] == 'View Only') {
      $result['hardware'] = array('view');
    } elseif ($roleaccess['Hardware catalog Tab'] == 'View & Edit') {
      $result['hardware'] = array('view', 'edit');
    }
    if ($roleaccess['Document Catalog Tab'] == 'No') {
      $result['document'] = array();
    } elseif ($roleaccess['Document Catalog Tab'] == 'View Only') {
      $result['document'] = array('view');
    } elseif ($roleaccess['Document Catalog Tab'] == 'View & Edit') {
      $result['document'] = array('view', 'edit');
    }
    if ($roleaccess['Configuration Management Tab'] == 'No') {
      $result['configuration'] = array();
    } elseif ($roleaccess['Configuration Management Tab'] == 'View Only') {
      $result['configuration'] = array('view');
    } elseif ($roleaccess['Configuration Management Tab'] == 'View & Edit') {
      $result['configuration'] = array('view', 'edit');
    }
    $result['system'] = array('view');
    if ($roleaccess['Devices Section'] == 'No') {
      $result['devices'] = array();
    } elseif ($roleaccess['Devices Section'] == 'Yes') {
      $result['devices'] = array('view');
    }
    if ($roleaccess['Reports Section'] == 'No') {
      $result['reports'] = array();
    } elseif ($roleaccess['Reports Section'] == 'Yes') {
      $result['reports'] = array('view');
    }
  }
  return $result;
}

/**
 * List of content types super admin only have access.
 */
function admin_nodetype() {
  $admin_nodetype = array('access_option', 'address_type', 'app_section', 'app_role_access_policy', 'bu_customer', 'bu_department', 'business_unit', 'component_option_type', 'contact_type', 'country', 'customer_facility', 'department', 'device', 'device_action_history', 'device_action_type', 'device_availability', 'device_component_entitlement', 'device_component_history', 'device_discrepancy', 'device_log', 'device_log_field', 'device_log_history', 'device_setting_history', 'devicetype', 'device_component_upgrade_log', 'device_language_availability', 'device_notification_subscription', 'device_notification_type', 'device_service_history', 'device_installation', 'device_service_type', 'document_type', 'hardwaretype', 'language', 'location', 'operating_company', 'page', 'party_contact', 'party', 'party_email_address', 'party_postal_address', 'party_type', 'postal_address', 'product_line', 'product_line_report', 'profile', 'region', 'sku', 'section_access_option', 'softwarestatus', 'softwaretype', 'story', 'device_config_hardware', 'device_config_software', 'device_user_privileges', 'email_notifications', 'person_application_role', 'user_settings', 'device_embargo', 'party_voice_address');
  return $admin_nodetype;
}

/**
 * List of Reports per product line.
 */
function getReportListByProductLine() {
  global $user;
  $pl = $_SESSION['default_cot'];
  $val = array();
  $is_pl = checkNodetype();
  if (!empty($is_pl)) {
    $result = getProductlinereportDetails($pl);
    while ($row = db_fetch_object($result)) {
      $val[] = $row->field_report_name_value;
    }
  }
  return $val;
}

/**
 * List of Reports per product line.
 * 
 * @deprecated Please use function {@link getReportListByProductLine()} instead.
 */
function getReportList() {
  return getReportListByProductLine();
}

/**
 * Function to check if user is expired; Returns user id if user expired
 */
function userExpired() {
  global $expire_notice;
  global $user;
  global $system_users;
  $expired_user = '';
  if (!is_array($system_users)) {
    $system_users = array();
  }
  if (!in_array($user->name, $system_users)) {
    $time = time();
    $date = format_date($time, 'custom', 'Y-m-d H:i:s', 0);
    $expired_user = getUserExpireinfo($date, $user->uid);
  }
  return $expired_user;
}

function covidien_user_access_tab($roleaccess, &$access_nodetype) {
  //update access string to array access 
  $user_access = array(
    'No' => array(),
    'Yes' => array('view', 'edit'),
    'View Only' => array('view'),
    'View & Edit' => array('view', 'edit'),
  );
  //user access catalog section
  $user_catalog = array(
    'Document Catalog Tab' => 'document',
    'User management Tab' => 'users',
    'Software catalog Tab' => 'software',
    'Firmware catalog Tab' => 'firmware',
    'Hardware catalog Tab' => 'hardware',
    'Document Catalog Tab' => 'document',
    'Configuration Management Tab' => 'configuration',
    'Alert Tab' => 'alert',
    'Trade Embargo Tab' => 'trade_embargo',
    'Feature catalog Tab' => 'feature',
    'Devices Section' => 'devices',
    'Reports Section' => 'reports',
  );
  $access_nodetype = array();
  $devices_access['system'] = array('view');
  foreach ($user_catalog as $key => $val) {
    $devices_access[$val] = $user_access[$roleaccess[$key]];
    if ($val == 'users') {
      $access_nodetype[] = 'person';
      $access_nodetype[] = 'roles';
    } elseif ($val == 'devices') {
      $access_nodetype[] = 'device_type_config';
    }
    $access_nodetype[] = $val;
  }
  return $devices_access;
}

function get_view_access_role_devices_nid_result() {
  $view = views_get_view('access_role_devices_nid');
  if (is_object($view)) {
    $view->init_display();
    $view->pre_execute(array($product_line));
    $view->execute();
    $result = $view->result;
  } else {
    $result = array();
  }
  return $result;
}
