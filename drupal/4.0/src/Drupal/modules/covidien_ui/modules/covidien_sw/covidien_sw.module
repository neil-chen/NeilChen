<?php

/**
 * @file
 * Software catlog Form Customization done here.
 */

/**
 * Adding the JS
 */
function covidien_sw_init() {
  module_load_include('php', 'covidien_sw', 'includes/covidien_sw_query');
  if (arg(0) == 'covidien' && arg(2) == 'software') {
    drupal_add_js('misc/ahah.js');
    drupal_add_js(drupal_get_path('module', 'covidien_sw') . '/js/covidien_sw.js');
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  }
}

/**
 * Customizing Forms
 */
function covidien_sw_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'software_node_form') {
    //GATEWAY-2971 use plupload 
    module_load_include('module', 'plupload');
    plupload_upload_page();
    drupal_add_js(drupal_get_path('module', 'covidien_sw') . '/js/covidien_sw.js');
    $nid = (is_numeric(arg(1))) ? arg(1) : 0;
    drupal_add_js(array('covidien_sw' => array('nid' => $nid)), 'setting');
    //Button customize
    $butcancel = array(
      '#type' => 'submit',
      '#access' => TRUE,
      '#value' => t('Cancel'),
      '#submit' => array('covidien_sw_form_cancel'),
      '#attributes' => array('class' => 'secondary_submit',),
    );
    $form['buttons']['cancel'] = $butcancel;
    if (arg(2) == 'edit') {
      $form['title']['#attributes'] = array('readonly' => 'readonly', 'class' => 'readonly');
      if (is_agent_software($form['#node']->field_device_type[0]['nid'], $form['#node']->field_sw_type[0]['nid'])) {
        $form['field_sw_part']['#pre_render'] = array('field_sw_part_readonly');
        $form['field_sw_version']['#pre_render'] = array('field_sw_part_readonly');
      }
    }
    unset($form['title']['#title']);
    //node reference type fileds
    unset($form['field_device_type']['#title']);
    unset($form['field_sw_list']['#title']);
    unset($form['field_sw_language']['#title']);
    unset($form['field_sw_status']['#title']);
    unset($form['field_sw_type']['#title']);
    //cck fields
    unset($form['field_sw_part'][0]['#title']);
    unset($form['field_sw_version'][0]['#title']);
    unset($form['field_sw_integrity_check'][0]['#title']);
    unset($form['field_sw_description'][0]['#title']);
    unset($form['field_sw_file'][0]['#title']);
    unset($form['field_hw_list'][0]['#title']);
    //order by key
    $form['field_sw_status']['#pre_render'] = array('field_sw_status_order');
    if ($form['nid']['#value']) {
      //edit
      //Validate deleted hardwares.
      $result_hw = _getfilteroptions('hw_list', '', 'all,all');
      $values = &$form['field_hw_list']['#default_value'];
      $vcount = count($values);
      for ($i = 0; $i < $vcount; $i++) {
        if ($values[$i]['nid'] > 0 && !array_key_exists($values[$i]['nid'], $result_hw)) {
          $values[$i] = array();
        }
      }
      $form['buttons']['submit']['#value'] = t('Save Changes');
      // RFC
      //$confirmmsg = t('Do you want to save the changes you just made to this page?');
      //$form['buttons']['submit']['#attributes'] = array('onclick' => 'if (!confirm("'.$confirmmsg.'")) {return false;}');
      $form['field_device_type']['#pre_render'] = array('field_device_type_disabled');
      $butdelete = array(
        '#type' => 'submit',
        '#access' => TRUE,
        '#value' => t('Delete this Software'),
        '#submit' => array('covidien_sw_form_delete', 'software_form_submit'),
      );
      $form['buttons']['delete'] = $butdelete;
      $confirmdelmsg = t('Are you sure you want to delete this software?');
      $form['buttons']['delete']['#attributes'] = array(
        'onclick' => 'if (!confirm("' . $confirmdelmsg . '")) {return false;}',
        'class' => 'secondary_submit',
      );
      drupal_set_title(t('Edit Software'));
    } else {
      //add
      //Add Blank Value
      $form['field_sw_language']['#default_value'][0]['nid'] = db_result(db_query("select nid from node where type='language' and title='English'"));
      $form['field_device_type']['#default_value'][0]['nid'] = $_SESSION['default_dtype'];
      $form['field_sw_type']['#pre_render'] = array('field_sw_type_pre_ren');
      //Setting Default value
      if ($form['title']['#default_value'] == '') {
        $form['title']['#default_value'] = t('Enter Software Name');
      }
      $form['buttons']['submit']['#submit'][] = 'software_node_form_submit';
      $form['buttons']['submit']['#value'] = t('Add New Software');
      drupal_set_title(t('Add New Software to Catalog'));
    }
    $form['buttons']['submit']['#attributes'] = array('onclick' => 'swcatlogconfirm()', 'disabled' => 'disabled');
    unset($form['buttons']['preview']);
    $butfiltergo = array(
      '#type' => 'button',
      '#value' => t('Go'),
      '#attributes' => array('class' => 'secondary_submit', 'onclick' => 'return false;'),
    );
    //Get the hardware type list using views
    $view_name = 'hw_type';
    $hw_type_val = _getoptions($view_name, 'all');
    $butfilter = array(
      '#type' => 'select',
      '#options' => $hw_type_val,
    );
    $form['filter']['hw_list_sort'] = array(
      '#type' => 'hidden',
      '#name' => 'hw_list_sort',
      '#default_value' => 'asc',
    );
    $form['filter']['hw_list_order'] = array(
      '#type' => 'hidden',
      '#name' => 'hw_list_order',
      '#default_value' => 'title',
    );
    $form['filter']['hw_list_page'] = array(
      '#type' => 'hidden',
      '#name' => 'hw_list_page',
      '#default_value' => '0',
    );
    $form['filter']['filter_hw_type'] = $butfilter;
    $form['filter']['go'] = $butfiltergo;
    //get the formware list 
    $form['filter']['fw_list_sort'] = array(
      '#type' => 'hidden',
      '#name' => 'fw_list_sort',
      '#default_value' => 'asc',
    );
    $form['filter']['fw_list_order'] = array(
      '#type' => 'hidden',
      '#name' => 'fw_list_order',
      '#default_value' => 'name',
    );
    $form['filter']['fw_list_page'] = array(
      '#type' => 'hidden',
      '#name' => 'fw_list_page',
      '#default_value' => '0',
    );
    $form['filter']['filter_fw_type'] = array(
      '#type' => 'hidden',
      '#name' => 'fw_list_page',
      '#default_value' => 'all',
    );
    //add check box no file
    $form['no_file'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not upload (e.g. - software bundle sub-component)'),
      '#id' => 'no_file',
      '#default_value' => 0,
    );
    //validate
    $form['#validate'][] = 'software_form_validate';
    $form['buttons']['submit']['#submit'][] = 'software_form_submit';
  }
  if ($form_id == 'views_exposed_form' && $form['submit']['#id'] == 'edit-submit-softwarelist') {
    // validate software search 
    $form['#validate'][] = 'software_list_validate';

    $request = filter_xss_arr($_REQUEST);
    $form['submit']['#value'] = t('Go');
    drupal_set_title(t('System Administration'));
    $form['field_hw_type_nid']['#options']['All'] = t('All');
    $form['field_hw_type_nid']['#ahah'] = array(
      'event' => 'change',
      'wrapper' => 'edit-title-1',
      'method' => 'replace',
      'path' => 'ahah-hwlist-exposed-callback',
    );
    $field_hw_title_value = array(
      '#type' => 'select',
      '#validated' => TRUE,
      '#options' => array('' => t('All')),
      '#default_value' => '',
    );
    $form['title_1'] = $field_hw_title_value;
    $form['title_1']['#prefix'] = '<div id="hwlist-ahah">';
    $form['title_1']['#suffix'] = '</div>';
    //based on hardware type load the hw list
    $hwtype = $request['field_hw_type_nid'];
    if ($hwtype > 0) {
      $arg = $hwtype;
      $devicenid = $request['field_device_type_nid'];
      if ($devicenid > 0) {
        $arg .= ',' . $devicenid;
      } else {
        global $user;
        $devicenid = $user->devices_nid;
        $tmp = explode(',', $devicenid);
        $devicenid = implode('+', $tmp);
        $arg .= ',' . $devicenid;
      }
      $opt = _getfilteroptions('hw_list', 'EAll', $arg, 'title');
      $form['title_1']['#options'] = $opt;
    } else {
      $arg = '';
    }
    $form['field_device_type_nid']['#options']['All'] = t('All');
    array_unshift($form['#submit'], 'sw_manage_custom_filters');
    $post['field_device_type_nid'] = $request['field_device_type_nid'];
    $swversion_arr = get_hwrevision($post);
    $field_hw_version_value = array(
      '#type' => 'select',
      '#options' => $swversion_arr,
      '#default_value' => '',
      '#value' => '',
      '#name' => 'field_hw_version_value',
    );
    $form['field_hw_version_value'] = $field_hw_version_value;
    //ajax
    $form['title_1']['#ahah'] = array(
      'event' => 'change',
      'wrapper' => 'hwverson-ahah',
      'method' => 'replace',
      'path' => 'ahah-hwverson-exposed-callback',
    );
    $form['field_hw_version_value']['#prefix'] = '<div id="hwverson-ahah">';
    $form['field_hw_version_value']['#suffix'] = '</div>';
    $form['filter_hidden_hwverson'] = array(
      '#type' => 'hidden',
      '#name' => 'filter_hidden_hwverson',
      '#value' => $request['field_hw_version_value'],
    );
    $form['title']['#autocomplete_path'] = 'covidien/software/autocomplete';
    $form['title']['#attributes'] = array('onfocus' => 'parentSelected($("#edit-field-device-type-nid"), "software");');
    $form['title']['#validated'] = TRUE;
  }
}

/**
 *  validate software search
 */
function software_list_validate(&$form_state) {
  $software_name = $form_state['#post']['title'];
  if (!covidien_ui_input_validate($software_name)) {
    form_set_error('title', t('Invalid Software Name'));
  }
}

/**
 *  validate software add & edit 
 */
function software_form_validate(&$form_state) {
  //GATEWAY-3020 Add check status when change  
  if ($form_state['nid']['#value']) {
    $status = db_result(db_query("SELECT title FROM node WHERE nid = %d", $form_state['#post']['field_sw_status']['nid']['nid']));
    if ($status != 'In Production') {
      module_load_include('module', 'covidien_named_config');
      $rows = named_config_check_status_change($form_state['nid']['#value']);
      if (count($rows) > 0) {
        form_set_error('field_sw_status', 'Please first change status ' . implode(',', $rows));
      }
    }
  }
  //validate filesize 
  if ($form_state['#post']['field_sw_file'][0]['fid']) {
    $file_size = db_result(db_query("SELECT filesize FROM files WHERE fid = %d", $form_state['#post']['field_sw_file'][0]['fid']));
    if ($file_size != $form_state['#post']['filesize']) {
      form_set_error('filesize', t('Received file size is not same as original, please re-upload.'));
      drupal_goto(referer_uri());
    }
  }
  $software_name = $form_state['#post']['title'];
  if (!covidien_ui_input_validate($software_name)) {
    form_set_error('title', t('Invalid Software Name'));
  }
  $software_part = $form_state['#post']['field_sw_part'][0]['value'];
  if (!covidien_ui_input_validate($software_part)) {
    form_set_error('field_sw_part', t('Invalid Software Name'));
  }
  $software_version = $form_state['#post']['field_sw_version'][0]['value'];
  if (!covidien_ui_input_validate($software_version)) {
    form_set_error('field_sw_version', t('Invalid Software Revision'));
  }
  $software_desc = $form_state['#post']['field_sw_description'][0]['value'];
  if (!covidien_ui_input_validate($software_desc)) {
    form_set_error('field_hw_description', t('Invalid Software Description'));
  }
}

/**
 * Implements hook_ajax_data_alter() to modify the ajax callback 
 * function to retrive the checked items.
 */
function covidien_sw_ajax_data_alter(&$object, $module, $view) {
  /*
   * Overwrite the 'Drupal.Views.Ajax.ajaxViewResponse' callback that's in Views core
   * as we don't want both callbacks running concurrently.
   */
  $view_details = $view->ajax_path[1];
  $display_id = $view->display['default']->handler->handlers['field']['title']->view->current_display;
  if ($view->name == 'hw_list' && ($display_id == 'block_1' || $display_id == 'block_3')) {
    $object->__callbacks = array('Drupal.covidien_sw.Ajax');
  }
}

/**
 * Implements hook_views_api() to placed the exported view in module.
 */
function covidien_sw_views_api() {
  return array(
    'api' => '2.0',
  );
}

/**
 * Implements hook_views_default_views().
 */
function covidien_sw_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'covidien_sw') . '/views', '.inc');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function covidien_sw_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of delete based on requirement
 */
function covidien_sw_form_delete($form, &$form_state) {
  //delete relationship between item and configurations.
  $software_id = check_plain($_POST['software_id']);
  module_load_include('module', 'covidien_firmware', 'module');
  $left_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name = '%s'", 'software_item'));
  save_config_item_relation($software_id, $left_type);
  db_query('commit;');

  $node = node_load($form_state['values']['nid']);
  $node->field_expiration_datetime[0]['value'] = date('Y-m-d h:i:s');
  $node->revision = TRUE;
  node_save($node);
}

/**
 * Implements cancel button.
 */
function covidien_sw_form_cancel() {
  form_set_error(NULL, '', TRUE);
  drupal_get_messages();
  drupal_goto('covidien/admin/software');
}

/**
 * check software is agent
 * @param int $device_type_nid
 * @param int $sw_type
 * @return boolean
 */
function is_agent_software($device_type_nid, $sw_type) {
  //only check device is Administrative_Agent and type is Software
  $check_type = db_result(db_query("SELECT nid FROM {node} WHERE type='softwaretype' AND title = '%s'", 'Software'));
  $check_device = db_result(db_query("SELECT nid FROM {node} WHERE title = '%s'", 'Administrative_Agent'));
  if (($device_type_nid == $check_device) && ($sw_type == $check_type)) {
    return true;
  }
  return false;
}

/**
 * Implements hook_nodeapi().
 * customized the node validation error message.
 */
function covidien_sw_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'software' && $op == 'validate') {
    drupal_add_js(drupal_get_path('module', 'covidien_sw') . '/js/covidien_sw.js');
    if ($node->op == $node->cancel) {
      $node_op = 'cancel';
      covidien_sw_form_cancel();
    } elseif ($node->op == $node->delete) {
      $node_op = 'delete';
    } else {
      $node_op = 'drupal';
    }
    if ($node_op == 'drupal') {
      $tmp_error = form_get_errors();
      form_set_error(NULL, '', TRUE);
      $errors = drupal_get_messages();
      if (trim($node->title) == '' || $node->title == t('Enter Software Name')) {
        form_set_error('title', t('Invalid Software Name'));
      }
      $is_swpart1 = (trim($node->field_sw_part[0]['value']) == '');
      $is_swpart2 = ($node->field_sw_part[0]['value'] == t('Enter Software Part #'));
      if ($is_swpart1 || $is_swpart2) {
        form_set_error('field_sw_part', t('Invalid Software Part #'));
      }
      $is_swversion1 = (trim($node->field_sw_version[0]['value']) == '');
      $is_swversion2 = ($node->field_sw_version[0]['value'] == t('Enter Software Version'));
      if ($is_swversion1 || $is_swversion2) {
        form_set_error('field_sw_version', t('Invalid Software Version'));
      }
      if ($node->field_sw_type[0]['nid'] == 0) {
        form_set_error('field_sw_type', t('Invalid Software Type'));
      }

      //if is no file, by pass file validate      
      if (!$node->no_file) {
        if (trim($node->field_sw_file[0]['filepath']) == '' && $node->field_sw_file[0]['fid'] == 0) {
          $terror_msg = "An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size that this server supports.";
          $is_terror = t($terror_msg);
          if ($tmp_error['field_sw_file_0'] != $is_terror) {
            form_set_error('files[field_sw_file_0]', t('Invalid File'));
          } else {
            form_set_error('files[field_sw_file_0]', t($terror_msg));
          }
        } else {
          //only check device is Administrative_Agent and type is Software
          if (arg(2) != 'edit') {
            if (is_agent_software($node->field_device_type[0]['nid'], $node->field_sw_type[0]['nid'])) {
              $file_version = get_product_version($node->field_sw_file[0]['filepath']);
              if ($node->field_sw_version[0]['value'] != $file_version) {
                form_set_error('files[field_sw_file_0]', t('This file version is @file_version', array('@file_version' => $file_version)));
              }
            }
          }
        }
      }

      if ($node->field_hw_list[0]['nid'] == '' && get_device_type_gateway_version($node->field_device_type[0]['nid'] > 2.0)) {
        form_set_error('hw_list_wraper', t('Invalid Hardware'));
      }
    } else {
      form_set_error(NULL, '', TRUE);
      drupal_get_messages();
    }
  }
  if ($node->type == 'software' && $op == 'presave') {
    if ($node->field_sw_integrity_check[0]['value'] == t('Enter Software Integrity Check')) {
      $node->field_sw_integrity_check[0] = array('value');
    }
    if (isset($node->nid) && $node->nid > 0) {
      //New file uploaded clear the field_sw_integrity_check.
      $query_sw_ichk = sw_integrity_query();
      $old_field_sw_integrity_check_res = db_fetch_object(db_query($query_sw_ichk, $node->vid, $node->nid));
      $old_field_sw_integrity_check_value = $old_field_sw_integrity_check_res->field_sw_integrity_check_value;
      $oldnode = node_load($node->nid);
      if ($node->field_sw_file[0]['timestamp'] == $oldnode->field_sw_file[0]['timestamp']) {
        $node->field_sw_integrity_check[0] = array('value' => $old_field_sw_integrity_check_value);
      } else {
        $node->field_sw_integrity_check[0] = array('value');
      }
    } else {
      $node->field_sw_integrity_check[0] = array('value');
    }
    if ($node->field_sw_description[0]['value'] == t('Enter Software Description')) {
      $node->field_sw_description[0]['value'] = '';
    }
    //GATEWAY-2971 use plupload 
    //rename file GATEWAY-1994
    /*
      $old_fid = db_result(db_query("SELECT field_sw_file_fid FROM {content_type_software} WHERE vid=%d AND nid=%d", $node->vid, $node->nid));
      if ($node->field_sw_file[0]['fid'] != $old_fid) {
      rename_upload_file($node->field_sw_file[0]['filepath'], $node->field_sw_file[0]['fid']);
      } */
  }

  if ($node->type == 'software' && ($op == 'insert' || $op == 'update')) {
    $software_id = $node->nid;
    if (!$software_id) {
      return;
    }
    $hc_list = filter_xss_arr($_POST['field_hc_list']);
    $fc_list = filter_xss_arr($_POST['field_fc_list']);
    $sw_priority = check_plain($_POST['sw_priority']);
    if (is_numeric($sw_priority)) {
      $update_sql = "update content_type_software a join node b on a.nid=b.nid and a.vid=b.vid
    	 set a.sw_priority = %d where a.nid = %d";
      db_query($update_sql, $sw_priority, $software_id);
    }
    $crc = check_plain($_POST['crc']);
    if (!empty($crc)) {
      $update_sql = "update content_type_software a join node b on a.nid=b.nid and a.vid=b.vid
    	 set a.CRC = '%s' where a.nid = %d";
      db_query($update_sql, $crc, $software_id);
    }
    //save to software relation
    module_load_include('module', 'covidien_firmware', 'module');
    $left_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name = '%s'", 'software_item'));
    $hc_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name = '%s'", 'hardware_configuration'));
    $fc_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name = '%s'", 'firmware_configuration'));
    //save hardware relation
    save_config_item_relation($software_id, $left_type, $hc_list, array(), array($hc_type));
    //save firmware relation
    save_config_item_relation($software_id, $left_type, $fc_list, array(), array($fc_type));
  }
}

/**
 * rename file GATEWAY-1994
 */
function rename_upload_file($file_path, $fid, $type = 'sw') {
  //rename file GATEWAY-1994
  if (!$file_path || !$fid) {
    return false;
  }
  global $drupal_abs_path;
  //update table data
  $old_path = $file_path;
  $new_path = create_new_file_path($old_path);
  db_query("UPDATE {files} SET filepath = '%s' WHERE fid = %d", $new_path, $fid);
  if ($type == 'sw') {
    db_query("UPDATE {content_type_software} SET field_sw_integrity_check_value = '' WHERE field_sw_file_fid = %d", $fid);
  }
  if ($type == 'doc') {
    db_query("UPDATE {content_type_document} SET field_document_md5sum_value = '' WHERE field_document_file_fid = %d", $fid);
  }
  //update file
  $old_file = $drupal_abs_path . $old_path;
  if (!file_exists($old_file)) {
    $old_file = $drupal_abs_path . file_directory_path() . '/' . $old_path;
  }
  if (!file_exists($old_file)) {
    return false;
  }
  //move new file name 
  $new_file = $drupal_abs_path . $new_path;
  file_move($old_file, $new_file, FILE_EXISTS_REPLACE);
}

/**
 * get new file name
 */
function create_new_file_path($file_path) {
  $path_info = pathinfo($file_path);
  $new_file = preg_replace('/(\d{10})/', time(), $file_path);
  if ($file_path == $new_file) {
    $new_file = $path_info['dirname'] . '/' . $path_info['filename'] . '.' . time() . '.' . $path_info['extension'];
  }
  return $new_file;
}

/**
 * ajax callback path defined
 */
function covidien_sw_menu() {
  $items = array();
  $items['covidien/software/ajax/%/%'] = array(
    'page callback' => 'covidien_sw_process_ajax_call',
    // arguments in the processing function
    'page arguments' => array(3, 4),
    'access callback' => 'covidien_sw_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/software/ajax/%/%/%/%/%/%'] = array(
    'page callback' => 'covidien_sw_process_ajax_call',
    // arguments in the processing function
    'page arguments' => array(3, 4, 5, 6, 7, 8),
    'access callback' => 'covidien_sw_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-hwlist-exposed-callback'] = array(
    'page callback' => 'hwlist_search_exposed_filters_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ahah-hwverson-exposed-callback'] = array(
    'page callback' => 'hwverson_search_exposed_filters_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/software/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_sw_autocomplete',
    'page arguments' => array(3, 4),
    'access callback' => 'covidien_sw_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['covidien/software/ajax_get_hw_config_list'] = array(
    'page callback' => 'sw_get_hw_config_list_table',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items ['covidien/software/ajax_get_fw_config_list'] = array(
    'page callback' => 'sw_get_fw_config_list_table',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items ['covidien/software/ajax_get_file_size/%'] = array(
    'page callback' => 'software_ajax_get_file_size',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

// Access callback, for this allow anyone to access the 'ACTION_URL'
function covidien_sw_check_access() {
  return covidien_cot_admin_access_callback('software');
}

/**
 * Autosugesstion
 * @parm
 * arg1: devicetype
 * arg2: search string
 */
function covidien_sw_autocomplete($arg1, $arg2) {
  $items = catalog_autocomplete('software', $arg1, $arg2);
  print drupal_to_js($items);
  exit();
}

/**
 * AJAX callback function
 * @param
 * arg1:viewid
 * arg6:device type
 * arg3:sort
 * arg4:order
 * arg5:page
 * arg2: hw_type
 */
function covidien_sw_process_ajax_call($arg1 = '', $arg2 = 0, $arg3 = '', $arg4 = '', $arg5 = '', $arg6 = 'all') {
  if ($arg2 == 'undefined') {
    drupal_json(array('view_output' => 'undefined input', 'view_id' => $arg1,));
  }
  //devices access policy
  $arg6 = __covidien_access_devices_nid($arg6);
  $_SESSION['default_dtype'] = $arg6;
  if ($arg6 == 0) {
    drupal_json(array('view_id' => $arg1, 'view_output' => t('Access denied')));
  }
  if ($arg3 == 'asc') {
    $block = 'block_1';
    $sort = 'ASC';
  } else {
    $block = 'block_2';
    $sort = 'DESC';
  }
  switch ($arg1) {
    case 'hw_list':
      $output = _swviews_by_sort('hw_list', $block, $sort, $arg4, array($arg2, $arg6), $arg5);
      drupal_json(array('view_id' => 'hw_list', 'view_output' => $output));
      break;
    case 'fw_list':
      $output = _fwviews_by_sort('fw_list', $block, $sort, $arg4, array($arg2, $arg6), $arg5);
      drupal_json(array('view_id' => 'fw_list', 'view_output' => $output));
    default:
      $output = 'arg1 missing';
      drupal_json(array('view_output' => $output, 'view_id' => $arg1));
  }
}

/**
 * Based on the given viewname and arg, array of nid,title will be returned.
 */
function _getoptions($view_name, $opt, $arg = '') {
  $hw_type_opt = array();
  $ref = array('advanced_view' => $view_name);
  if ($arg != '') {
    $ref['advanced_view_args'] = $arg;
  }
  $hw_type_val = _nodereference_potential_references_views($ref);
  $hw_type_cnt = count($hw_type_val);
  if ($hw_type_cnt > 0) {
    if ($opt === 'all') {
      $hw_type_opt['all'] = t('All');
    } elseif ($opt == 0) {
      $hw_type_opt[0] = '';
    }
    foreach ($hw_type_val as $hw_nid => $hwtype) {
      $hw_type_opt[$hw_nid] = $hwtype['title'];
    }
  }
  return $hw_type_opt;
}

/**
 * Implements views default value clear on query build.
 */
function sw_manage_custom_filters($form, &$form_state) {
  //modify form_state values of concerned field
  if ($form_state['values']['field_hw_version_value'] == 'all') {
    $form_state['values']['field_hw_version_value'] = '';
  }
  if ($form_state['values']['title'] == t('Enter Software Name')) {
    $form_state['values']['title'] = '';
  }
  if ($form_state['values']['title'] == t('Search - Enter Software Name')) {
    $form_state['values']['title'] = '';
  }
  //modify form_state of concerned field to pass to the view
}

/**
 * Callback function for ahah-hwlist-exposed-callback
 */
function hwlist_search_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $hwtype = $post['field_hw_type_nid'];
  $devicenid = $post['field_device_type_nid'];
  $_SESSION['default_dtype'] = $devicenid;
  if ($hwtype > 0) {
    $arg = $hwtype;
    if ($devicenid > 0) {
      $arg .= ',' . $devicenid;
    } else {
      global $user;
      $devicenid = $user->devices_nid;
      $tmp = explode(',', $devicenid);
      $devicenid = implode('+', $tmp);
      $arg .= ',' . $devicenid;
    }
    // EAll - Empty All
    $opt = _getfilteroptions('hw_list', 'EAll', $arg, 'title');
  } else {
    $arg = '';
    $hw_type_opt = array();
    $hw_type_opt[''] = t('All');
    $opt = $hw_type_opt;
  }
  $element = '';
  if (count($opt) > 0) {
    foreach ($opt as $key => $val) {
      if ($key == $post['title_1'] && $hwtype == $_SESSION['hwtype']) {
        $sel = 'selected="selected"';
      } else {
        $sel = '';
      }
      $element .= '<option value="' . $key . '" ' . $sel . '>' . $val . '</option>';
    }
  }
  $_SESSION['hwtype'] = $hwtype;
  $output = $element;
  drupal_json($output);
}

/**
 * Refreh views on filter
 */
function _getfilteroptions($view_name, $opt, $arg = '', $fkey = 'id') {
  $hw_type_opt = array();
  if ($opt == 'All') {
    $hw_type_opt['All'] = t('All');
  } elseif ($opt == 'EAll') {
    $hw_type_opt[''] = t('All');
  }
  $ref = array('advanced_view' => $view_name);
  if ($arg != '') {
    $ref['advanced_view_args'] = $arg;
  }
  $hw_type_val = _nodereference_potential_references_views($ref);
  $hw_type_cnt = count($hw_type_val);
  if ($hw_type_cnt > 0) {
    foreach ($hw_type_val as $hw_nid => $hwtype) {
      if ($fkey == 'title') {
        $hw_type_opt[trim($hwtype['title'])] = $hwtype['title'];
      } else {
        $hw_type_opt[$hw_nid] = $hwtype['title'];
      }
    }
  }
  return $hw_type_opt;
}

/**
 * Serach Filter
 */
function hwverson_search_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $swversion_arr = get_hwrevision($post);
  $_SESSION['default_dtype'] = $post['field_device_type_nid'];
  $field_hw_version_value = array(
    '#type' => 'select',
    '#options' => $swversion_arr,
    '#default_value' => '',
    '#value' => '',
    '#name' => 'field_hw_version_value',
    '#id' => 'edit-field-hw-version-value',
  );
  $output = drupal_render($field_hw_version_value);
  drupal_json($output);
}

/**
 * Implements functionality to customize the views sort.
 */
function _swviews_by_sort($view_name, $display = 'default', $sort = '', $order = '', $arg = array(), $page) {
  $output = '';
  $view = views_get_view($view_name);
  $view->set_display($display);
  $view->set_item($display, 'sort', 'random', NULL);
  if ($sort != '' && $order != '') {
    if ($order == 'title') {
      $view->add_item($display, 'sort', 'node', 'title', array('order' => $sort,));
    } elseif ($order == 'field-hw-version-value') {
      $view->add_item($display, 'sort', 'node_data_field_hw_version', 'field_hw_version_value', array('order' => $sort,));
    } elseif ($order == 'field-hw-part-value') {
      $view->add_item($display, 'sort', 'node_data_field_hw_part', 'field_hw_part_value', array('order' => $sort,));
    } elseif ($order == 'title-1') {
      $view->add_item($display, 'sort', 'node', 'title', array('relationship' => 'field_hw_type_nid', 'order' => $sort));
    }
  }
  $items_per_page = 10;
  $view->display_handler->set_option('items_per_page', $items_per_page);
  $view->set_items_per_page($items_per_page);
  $view->pager['current_page'] = $page;
  //template.php covidien_theme_pager
  $view->set_arguments($arg);
  $view->build($display);
  $view->pre_execute();
  $output = $view->display_handler->preview();
  $view->post_execute();
  $output = $view->preview();
  return $output;
}

/**
 * Implements functionality to order the status
 */
function field_sw_status_order($element) {
  $unknown_status = _get_software_status_unknown();
  if ($element['nid']['nid']['#value'] != $unknown_status->nid) {
    unset($element['nid']['nid']['#options'][$unknown_status->nid]);
  }
  //filter status
  $element['nid']['nid']['#options'] = item_filter_status($element['nid']['nid']['#value'], $element['nid']['nid']['#options']);
  ksort($element['nid']['nid']['#options']);
  return $element;
}

function field_sw_part_readonly($element) {
  $element[0]['value']['#attributes'] = array('readonly' => 'readonly', 'class' => 'readonly');
  return $element;
}

/**
 * Implements cron functioanlity.
 */
function covidien_sw_cron() {
  covidien_update_log('Run Start ' . __FUNCTION__);

  global $drupal_abs_path;
  $view = views_get_view('files_cron_sw');
  $view->init_display();
  $view->pre_execute();
  $view->execute();
  $result = $view->result;
  if (count($result) > 0) {
    $i = 0;
    foreach ($result as $rec) {
      $filepath = $rec->filepath;
      $sourcebasepath = $drupal_abs_path . $filepath;
      //added by Guangfeng: if the software package file does not exist in this server, skip the integrity check.
      if (!file_exists($sourcebasepath)) {
        continue;
      }
      $rep_output = upload_repo($rec);
      if (empty($rep_output['error'])) {
        $filesha1 = $rep_output['filesha1'];
        $filesize = $rep_output['filesize'];
        $filepath = $rep_output['filepath'];
      } else {
        $filesha1 = '0000';
      }
      drupal_set_message($i . ' ' . print_r($rep_output, 1));
      //$node = node_load($rec->nid);
      $query_node = covidien_sw_cron_query(0);
      $node_qry = db_query($query_node, $rec->nid);
      $node = db_fetch_object($node_qry);
      if (trim($filesha1) != '') {
        $query_update = covidien_sw_cron_query(1);
        db_query($query_update, $filesha1, $node->vid, $node->nid);
        $query_update2 = covidien_sw_cron_query(2);
        db_query($query_update2, $filepath, $filesize, $rec->files_node_data_field_sw_file_fid);
        $msg = 'Content nid:' . $rec->nid . ' field_sw_file_fid';
        $msg .= $rec->files_node_data_field_sw_file_fid . ' Path:' . $rec->filepath;
        watchdog("covidien_sw", $msg, array(), WATCHDOG_INFO);
      } else {
        $msg = 'Content nid:' . $rec->nid . ' field_sw_file_fid : ';
        $msg .= $rec->files_node_data_field_sw_file_fid . ' Path:' . $rec->filepath;
        watchdog("covidien_sw", $msg, array(), WATCHDOG_ERROR);
      }
      $i++;
    }
  }
  //update hardware sofware document files
  covidien_sw_create_file();
  covidien_hw_sw_create_file();
  covidien_update_log('Finished ' . __FUNCTION__);
}

/**
 * Helper function for upload a file to files repo.
 */
function upload_repo($file) {
  global $drupal_abs_path;
  global $drupal_repourl;
  global $drupal_swrepo;
  $filepath = $file->filepath;
  $filepatharr = explode('/', $filepath);
  $filename = array_pop($filepatharr);
  $filepath = implode('/', $filepatharr);
  $sourcebasepath = $drupal_abs_path . $filepath . '/';
  $repourl = $drupal_repourl;
  $path = $drupal_swrepo;
  /**
   * $newfilename created with timestamp to avoid file update.
   */
  $newfilename = time() . '_' . $filename;
  $command = 'zip -j "' . $sourcebasepath . $newfilename . '.zip" "' . $sourcebasepath . $filename . '"';
  $out = array();
  exec($command, $out) or $output = array('error' => 'Compression Failed' . $command);
  if (!empty($output['error'])) {
    return $output;
  }
  if ($filename != "") {
    unlink($sourcebasepath . $filename) or $output = array('error' => 'Error on UNLINKIN Original File');
  }
  if (!empty($output['error'])) {
    return $output;
  }
  encrypt_file($sourcebasepath, $newfilename, '.zip');
  $filesha1 = sha1_file($sourcebasepath . $newfilename . '.zip');
  // File size
  $filesize = filesize($sourcebasepath . $newfilename . '.zip');
  $command = 'curl -k -s https://' . $repourl . '/upload.php?path=' . $path;
  $command .= '  -F file=@"' . $sourcebasepath . $newfilename . '.zip"  -A "Mozilla/5.0  Firefox/1.5.0.2"';
  $out = array();
  $rtn = exec($command, $out);
  if (empty($rtn) || !preg_match('/.+uploaded$/', $rtn)) {
    $output = array('error' => 'Upload to Repository Failed');
  }
  if (!empty($output['error'])) {
    return $output;
  }
  if ($newfilename != "") {
    unlink($sourcebasepath . $newfilename . '.zip') or $output = array('error' => 'Error on UNLINK Zip');
  }
  if (empty($output['error'])) {
    $newfilepath = $path . $newfilename . '.zip';
    return array('filesha1' => $filesha1, 'filepath' => $newfilepath, 'filesize' => $filesize, 'module' => 'software');
  } else {
    return $output;
  }
}

/**
 * Implements hook_views_query_alter.
 */
function covidien_sw_views_query_alter(&$view, &$query) {
  if ($view->name == 'softwarelist') {
    $remove = array();
    if ($query->where[0]['args'][0] == '') {
      // When Views use isequal and arugment empty it result in empty row.
      $remove[] = 0;
    }
    if ($query->where[0]['args'][1] == '') {
      // When Views use isequal and arugment empty it result in empty row.
      $remove[] = 1;
    }
    $noof = count($remove);
    if ($noof > 0) {
      foreach ($remove as $i) {
        unset($query->where[0]['clauses'][$i]);
        unset($query->where[0]['args'][$i]);
      }
    }
    //To avoid escape string in query
    $tmparg = count($query->where[0]['args']);
    if ($tmparg > 0) {
      foreach ($query->where[0]['args'] as &$tmpvalue) {
        $tmpvalue = stripslashes($tmpvalue);
      }
    }
    //GATEWAY-2544 Add product line filter
    $query->where[0]['clauses'][] = " (node.nid IN (SELECT content_field_device_type.nid FROM content_field_device_product_line 
      JOIN content_field_device_type ON content_field_device_product_line.nid = content_field_device_type.field_device_type_nid
      WHERE field_device_product_line_nid = '%s')) ";
    $query->where[0]['args'][] = $_SESSION['default_cot'];
  }
  //GATEWAY-2754 Add status filter
  if ($view->name == 'hw_list') {
    $query->where[0]['clauses'][] = "node_data_field_hw_type.hw_status IN (SELECT nid FROM node WHERE type='hardwarestatus' AND title IN ('In Production', 'Unknown', 'Limited Release'))";
  }
}

// Helper function to get revision
function get_hwrevision($post = array()) {
  $hwtype = $post['field_hw_type_nid'];
  $hwlist = $post['title_1'];
  //Title based version search
  global $user;
  $field_device_type_nid = $post['field_device_type_nid']; //Device type based version
  if ($field_device_type_nid == 'All') {
    $devicenid = $user->devices_nid;
    $tmp = explode(',', $devicenid);
    $devicenid = implode('+', $tmp);
  } else {
    $devicenid = $field_device_type_nid;
  }
  $swversion_arr = array('' => t('All'));
  if ($hwlist != '') {
    $view = views_get_view('hw_version');
    $view->init_display();
    $view->set_arguments(array($hwlist, $devicenid, $hwtype));
    $view->pre_execute();
    $view->execute();
    $result = $view->result;
    $rescnt = count($result);
    if ($rescnt > 0) {
      foreach ($result as $key => $val) {
        $key = trim($val->node_data_field_hw_type_field_hw_version_value);
        $swversion_arr[$key] = $val->node_data_field_hw_type_field_hw_version_value;
      }
    }
  }
  return $swversion_arr;
}

/**
 * Helper function to Encrypt.
 */
function encrypt_file($sourcebasepath, $filename, $ext) {
  global $encrypt_key;
  $size = 1048576;
  $source_file = $sourcebasepath . $filename . $ext;
  $encrypt_file = $sourcebasepath . $filename . '_encrypt' . $ext;
  $fp = fopen($source_file, 'r');
  $fpw = fopen($encrypt_file, 'w');
  $key = $encrypt_key;
  $alg = MCRYPT_RIJNDAEL_128;
  $mode = MCRYPT_MODE_CFB;
  $iv = "123^&6781#@$456%";
  // read some data
  while (!feof($fp)) {
    $contents = fread($fp, $size);
    $data = mcrypt_encrypt($alg, md5($key), $contents, $mode, $iv);
    fwrite($fpw, $data);
  }
  fclose($fp);
  fclose($fpw);
  unlink($source_file);
  rename($encrypt_file, $source_file);
}

/**
 * Add Blank Value
 */
function field_sw_type_pre_ren($element) {
  $element['nid']['nid']['#options'] = array_reverse($element['nid']['nid']['#options'], TRUE);
  $element['nid']['nid']['#options'][0] = 'Select Software Type';
  $element['nid']['nid']['#options'] = array_reverse($element['nid']['nid']['#options'], TRUE);
  return $element;
}

/**
 * get agent file version number
 * @param string $file_name
 * @return string
 */
function get_product_version($file_name) {
  $key = "P\x00r\x00o\x00d\x00u\x00c\x00t\x00V\x00e\x00r\x00s\x00i\x00o\x00n\x00\x00\x00";
  if (!is_file($file_name)) {
    return '';
  }
  $fptr = fopen($file_name, 'rb');
  $data = '';
  while (!feof($fptr)) {
    $data .= fread($fptr, 65536);
    if (strpos($data, $key) !== FALSE) {
      break;
    }
    $data = substr($data, strlen($data) - strlen($key));
  }
  fclose($fptr);
  if (strpos($data, $key) === FALSE) {
    return '';
  }
  $pos = strpos($data, $key) + strlen($key);
  $version = '';
  for ($i = $pos; $data [$i] != "\x00"; $i += 2) {
    $version .= $data [$i];
  }
  return $version;
}

function _fwviews_by_sort($view_name, $display = 'default', $sort = '', $order = '', $arg = array(), $page) {
  return _get_firmware_list_table($arg[1], $sort, $order);
}

function _get_firmware_list_table($device_type_id = '', $sort = '', $order = '') {
  $sql = "SELECT * FROM {view_firmware}";
  $query_arg = array();
  if (is_numeric($device_type_id)) {
    $sql .= " WHERE device_type_id = %d ";
    $query_arg[] = $device_type_id;
  }

  $header = array(
    array('data' => ''),
    array('data' => t('Firmware Name'), 'field' => 'name', 'sort' => 'asc'),
    array('data' => t('Part Number'), 'field' => 'part', 'sort' => 'asc'),
    array('data' => t('Revision'), 'field' => 'version', 'sort' => 'asc'),
    array('data' => t('File'), 'field' => 'file', 'sort' => 'asc'),
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY update_time DESC ";

  //check the checked firmware 
  $fcheckeds = array();
  $software_id = check_plain($_GET['swnid']);
  if (is_numeric($software_id)) {
    $fsql = "SELECT firmware_id FROM {firmware_software_relations} WHERE software_id = %d";
    $fresult = db_query($fsql, $software_id);
    while ($frow = db_fetch_object($fresult)) {
      $fcheckeds[] = $frow->firmware_id;
    }
  }
  //get table list
  $result = db_query($sql, $query_arg);
  while ($row = db_fetch_object($result)) {
    //check seleted
    $checked = '';
    if ($fcheckeds) {
      if (in_array($row->id, $fcheckeds)) {
        $checked = ' checked="checked" ';
      }
    }
    $rows[$row->id]['id'] = '<input type="checkbox" class="form-checkbox" ' . $checked . ' value="' . $row->id . '" id="edit-field-fw_list-nid-nid-' . $row->id . '" name="field_fw_list[nid][nid][' . $row->id . ']">';
    $rows[$row->id]['name'] = $row->name;
    $rows[$row->id]['part'] = $row->part;
    $rows[$row->id]['version'] = $row->version;
    $rows[$row->id]['file'] = $row->file;
  }

  // table head need to customize
  $output = theme_table($header, $rows);
  return $output;
}

function software_node_form_submit($form, &$form_state) {
  
}

function sw_get_hw_config_list_table($device_type_id = '', $software_id = '') {
//   $sql = "SELECT c.nid, n.title, c.type_id, c.version, c.description, c.device_type_id, c.create_time, c.update_time
  $sql = "SELECT c.nid, n.title, c.type_id, c.version, c.description, c.device_type_id
			FROM {view_named_configuration} c 
			JOIN {node} n ON c.nid = n.nid
			JOIN {named_configuration_type} t ON c.type_id = t.id 
			WHERE t.name = '%s'
			and c.is_obsolete='0'";
  $device_type_id = $device_type_id ? $device_type_id : check_plain($_GET['device_type_id']);
  $software_id = $software_id ? $software_id : check_plain($_GET['software_id']);
  $query_arg[] = 'hardware_configuration';
  if ($device_type_id && is_numeric($device_type_id)) {
    $sql .= " AND device_type_id = %d ";
    $query_arg[] = $device_type_id;
  }

  $header = array(
    array('data' => ''),
    array('data' => t('Hardware configuration name')),
    array('data' => t('Version')),
    array('data' => t('Description')),
  );

  //check the checked software
  $refs = array();
  module_load_include('module', 'covidien_named_config', 'module');
  if ($software_id && is_numeric($software_id)) {
    $left_type_id = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", 'software_item'));
    $right_type_id = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", 'hardware_configuration'));
    $refs = get_configuration_ref_list($software_id, $left_type_id, $right_type_id);
  }
  //get table list
  $result = db_query($sql, $query_arg);
  while ($row = db_fetch_object($result)) {
    //check seleted
    $checked = check_ref_checked($row->nid, $refs, $row->type_id);
    $rows[$row->nid]['id'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\" id=\"edit-field-hc_list-$row->nid\" name=field_hc_list[$row->type_id][$row->nid]\">";
    $rows[$row->nid]['name'] = "<a href=\"/covidien/?q=named-config/edit/$row->nid\" target=\"_blank\">$row->title</a>";
    $rows[$row->nid]['version'] = $row->version;
    $rows[$row->nid]['description'] = $row->description;
  }
  // edit 2014.05.22
  $output = "<div style=\"float:left; position: relative; width: 45% \">";
  $output .= "<span title=\"This field is required.\" class=\"form-required\">*</span>Candidate Hardware configurations";
  $output .= "<div style=\"overflow: auto; max-height: 400px;\">";
  // table head need to customize
  $output .= theme_table($header, $rows, array('class' => 'hw-list-table', 'id' => 'left_hc_table'));
  $output .= "</div></div>";
  $output .= "<div style=\"float:left\">";
  $output .= "<br>";
  $output .= "<table style=\"border:0px;\"><tbody style=\"border:0px;\"><tr onclick=\"move_table_item_right('left_hc_table','right_hc_table');\"><td style=\"border:0px;\">";
  $output .= "<input type=\"button\" class=\"form-submit\"  value=\"-->\" /> ";
  $output .= "</td></tr>";
  $output .= "<tr onclick=\"move_table_item_left('left_hc_table','right_hc_table');\"><td style=\"border:0px;\">";
  $output .= "<input type=\"button\" class=\"form-submit\"  value=\"<--\" /> ";
  $output .= "</td></tr>";
  $output .= "</tbody></table></div>";
  $output .= "<div style=\"float:left; position: relative; width: 45% \"><span title=\"This field is required.\" class=\"form-required\">*</span>Selected Hardware configurations";
  $output .= "<div style=\"overflow: auto; max-height: 400px;\">";
  $output .= "<table id='right_hc_table'>
  <thead>
    <tr>
      <th>Select</th>
      <th>Name</th>
      <th>Version</th>
      <th>Description</th>
    </tr>
  </thead>
  </table> ";
  $output .= "</div></div>";
  drupal_json(array('status' => 'success', 'data' => $output));
}

function sw_get_fw_config_list_table($device_type_id = '', $software_id = '') {
//   $sql = "SELECT c.nid, n.title, c.type_id, c.version, c.description, c.device_type_id, c.create_time, c.update_time
  $sql = "SELECT c.nid, n.title, c.type_id, c.version, c.description, c.device_type_id
			FROM {view_named_configuration} c 
			JOIN {node} n ON c.nid = n.nid
			JOIN {named_configuration_type} t ON c.type_id = t.id
			WHERE t.name = '%s'
			and c.is_obsolete='0'";
  $device_type_id = $device_type_id ? $device_type_id : check_plain($_GET['device_type_id']);
  $software_id = $software_id ? $software_id : check_plain($_GET['software_id']);
  $query_arg[] = 'firmware_configuration';
  if ($device_type_id && is_numeric($device_type_id)) {
    $sql .= " AND device_type_id = %d ";
    $query_arg[] = $device_type_id;
  }

  $header = array(
    array('data' => ''),
    array('data' => t('Firmware configuration name')),
    array('data' => t('Version')),
    array('data' => t('Description')),
  );

  //check the checked software
  $refs = array();
  module_load_include('module', 'covidien_named_config', 'module');
  if ($software_id && is_numeric($software_id)) {
    $left_type_id = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", 'software_item'));
    $right_type_id = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", 'firmware_configuration'));
    $refs = get_configuration_ref_list($software_id, $left_type_id, $right_type_id);
  }
  //get table list
  $result = db_query($sql, $query_arg);
  while ($row = db_fetch_object($result)) {
    //check seleted
    $checked = check_ref_checked($row->nid, $refs, $row->type_id);
    $rows[$row->nid]['id'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\" id=\"edit-field-fc_list-$row->nid\" name=field_fc_list[$row->type_id][$row->nid]\">";
    $rows[$row->nid]['name'] = "<a href=\"/covidien/?q=named-config/edit/$row->nid\" target=\"_blank\">$row->title</a>";
    $rows[$row->nid]['version'] = $row->version;
    $rows[$row->nid]['description'] = $row->description;
  }

  // table head need to customize
  // edit 2014.05.22
  $output = "<div style=\"float:left; position: relative; width: 45% \">";
  $output .= "<span title=\"This field is required.\" class=\"form-required\">*</span>Candidate Firmware configurations";
  $output .= "<div style=\"overflow: auto; max-height: 400px;\">";
  // table head need to customize
  $output .= theme_table($header, $rows, array('class' => 'hw-list-table', 'id' => 'left_fc_table'));
  $output .= "</div></div>";
  $output .= "<div style=\"float:left\">";
  $output .= "<br>";
  $output .= "<table style=\"border:0px;\"><tbody style=\"border:0px;\"><tr onclick=\"move_table_item_right('left_fc_table','right_fc_table');\"><td style=\"border:0px;\">";
  $output .= "<input type=\"button\" class=\"form-submit\"  value=\"-->\" /> ";
  $output .= "</td></tr>";
  $output .= "<tr onclick=\"move_table_item_left('left_fc_table','right_fc_table');\"><td style=\"border:0px;\">";
  $output .= "<input type=\"button\" class=\"form-submit\"  value=\"<--\" /> ";
  $output .= "</td></tr>";
  $output .= "</tbody></table></div>";
  $output .= "<div style=\"float:left; position: relative; width: 45% \"><span title=\"This field is required.\" class=\"form-required\">*</span>Selected Firmware configurations";
  $output .= "<div style=\"overflow: auto; max-height: 400px;\">";
  $output .= "<table id='right_fc_table'>
  <thead>
    <tr>
      <th>Select</th>
      <th>Name</th>
      <th>Version</th>
      <th>Description</th>
    </tr>
  </thead>
  </table> ";
  $output .= "</div></div>";
  drupal_json(array('status' => 'success', 'data' => $output));
}

function software_form_submit(&$form_state) {
  $device_type_nid = $form_state['#node']->field_device_type[0]['nid'];
  increase_components_version();
  module_load_include('module', 'covidien_ui');
  covidien_ui_create_device_type_file($device_type_nid, '_software');
  covidien_ui_create_device_type_file($device_type_nid, '_config');
  covidien_sw_create_file($device_type_nid);
  covidien_hw_sw_create_file($device_type_nid);
  drupal_goto('covidien/admin/software');
}

/**
 * create file software
 */
function covidien_sw_create_file($device_type = '') {
  global $hw_sw_config, $hw_sw_config_url;
  if (!file_exists($hw_sw_config)) {
    mkdir($hw_sw_config, 0777);
  }
  //GATEWAY-2734 remove Limited Release
  $sql = "SELECT s.nid AS software_id, n.title AS name, s.field_sw_part_value, s.field_sw_version_value, sn.title AS status_value, tn.title AS software_type,
    s.field_sw_integrity_check_value AS md5_value, ed.field_expiration_datetime_value AS expiration, f.filesize, f.filepath, lan.title AS language,
    dn.title AS device_type, s.sw_priority
    FROM {content_type_software} s 
    JOIN {node} n ON s.vid = n.vid 
    JOIN {content_field_device_type} dt ON s.vid = dt.vid
    JOIN {node} dn ON dt.field_device_type_nid = dn.nid 
    JOIN {node} sn ON s.field_sw_status_nid = sn.nid AND sn.title IN ('In Production', 'Limited Release')
    JOIN {node} tn ON s.field_sw_type_nid = tn.nid 
    LEFT JOIN {content_field_expiration_datetime} ed ON n.vid = ed.vid 
    JOIN {files} f ON s.field_sw_file_fid = f.fid
    LEFT JOIN {node} lan ON s.field_sw_language_nid = lan.nid AND lan.type = 'language'
    WHERE s.field_sw_integrity_check_value is NOT NULL AND s.field_sw_integrity_check_value !='0000'
    AND ed.field_expiration_datetime_value IS NULL";
  if ($device_type) {
    $sql .= " AND dn.nid = %d ";
  }
  $sql .= " GROUP BY s.nid ";
  $result = db_query($sql, $device_type);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->device_type][$row->software_id]['expiration'] = $row->expiration ? $row->expiration : 0;
    $rows[$row->device_type][$row->software_id]['file_size'] = $row->filesize;
    $rows[$row->device_type][$row->software_id]['hash'] = md5(json_encode(array(
      'name' => strtolower($row->name),
      'revision' => $row->field_sw_version_value,
      'part_number' => $row->field_sw_part_value)));
    $rows[$row->device_type][$row->software_id]['md5'] = $row->md5_value;
    $rows[$row->device_type][$row->software_id]['name'] = $row->name;
    $rows[$row->device_type][$row->software_id]['nid'] = $row->software_id;
    $rows[$row->device_type][$row->software_id]['part_number'] = $row->field_sw_part_value;
    $rows[$row->device_type][$row->software_id]['revision'] = $row->field_sw_version_value;
    $rows[$row->device_type][$row->software_id]['status'] = $row->status_value;
    $rows[$row->device_type][$row->software_id]['software_type'] = $row->software_type;
    $rows[$row->device_type][$row->software_id]['filepath'] = $row->filepath;
    $rows[$row->device_type][$row->software_id]['language'] = $row->language;
    $rows[$row->device_type][$row->software_id]['priority'] = $row->sw_priority;
  }
  $files = array();
  foreach ($rows as $device_type => $software) {
    if (!$device_type) {
      continue;
    }
    $file_name = $device_type . '_software';
    $content = '<?xml version="1.0" encoding="UTF-8"?>';
    $content .= '<components>';
    foreach ($software as $software_id => $item) {
      $software_regulatory_exceptions = covidien_get_sw_exceptions_country($software_id);
      $content .= '<component software_type="' . $item['software_type'] . '" type="software">';
      $content .= '<expiration>' . $item['expiration'] . '</expiration>';
      $content .= '<file_size>' . $item['file_size'] . '</file_size>';
      $content .= '<hash>' . $item['hash'] . '</hash>';
      $content .= '<md5>' . $item['md5'] . '</md5>';
      $content .= '<name>' . $item['name'] . '</name>';
      $content .= '<nid>' . $item['nid'] . '</nid>';
      $content .= '<part_number>' . $item['part_number'] . '</part_number>';
      $content .= '<revision>' . $item['revision'] . '</revision>';
      $content .= '<status>' . $item['status'] . '</status>';
      $content .= '<language>' . $item['language'] . '</language>';
      $content .= '<comparison_order>' . $item['priority'] . '</comparison_order>';
      $content .= '<uri>' . $hw_sw_config_url . '/' . $item['filepath'] . '</uri>';
      if (!empty($software_regulatory_exceptions)) {
        $content .= '<unavailale_countries>' . implode(' , ', $software_regulatory_exceptions) . '</unavailale_countries>';
      }
      $content .= '</component>';
    }
    $content .= '</components>';
    file_put_contents($hw_sw_config . '/' . $file_name, $content);
    $files[] = $file_name;
  }
  return $files;
}

/**
 * create file hardware software relationship
 */
function covidien_hw_sw_create_file($device_type = '') {
  global $hw_sw_config;
  if (!file_exists($hw_sw_config)) {
    mkdir($hw_sw_config, 0777);
  }
  //GATEWAY-2734 remove Limited Release
  $sql = "SELECT h.nid AS hardware_nid, hn.title AS hardware_name, h.field_hw_part_value AS hardware_part, h.field_hw_version_value AS hardware_version,
    s.nid AS software_nid, sn.title AS software_name, s.field_sw_part_value AS software_part, s.field_sw_version_value AS software_version,
    dtn.title AS device_type
    FROM {content_field_hw_list} hs
    JOIN {node} hn ON hs.field_hw_list_nid = hn.nid
    JOIN {content_type_hardware} h ON hn.vid = h.vid
    LEFT JOIN {content_field_expiration_datetime} edh ON hn.vid = edh.vid 
    JOIN {node} sn ON hs.vid = sn.vid
    JOIN {content_type_software} s ON s.vid = sn.vid AND s.field_sw_integrity_check_value is NOT NULL AND s.field_sw_integrity_check_value !='0000'
    JOIN {node} ssn ON s.field_sw_status_nid = ssn.nid AND ssn.title IN ('In Production', 'Limited Release')
    LEFT JOIN {content_field_expiration_datetime} eds ON sn.vid = eds.vid 
    JOIN {content_field_device_type} dt ON dt.vid = h.vid
    JOIN {node} dtn ON dt.field_device_type_nid = dtn.nid
    WHERE edh.field_expiration_datetime_value IS NULL AND eds.field_expiration_datetime_value IS NULL";
  if ($device_type) {
    $sql .= " AND dtn.nid = %d ";
  }
  $result = db_query($sql, $device_type);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->device_type][$row->hardware_nid]['hash'] = md5(json_encode(array(
      'name' => strtolower($row->hardware_name),
      'revision' => $row->hardware_version,
      'part_number' => $row->hardware_part)));
    $rows[$row->device_type][$row->hardware_nid]['software'][$row->software_nid] = md5(json_encode(array(
      'name' => strtolower($row->software_name),
      'revision' => $row->software_version,
      'part_number' => $row->software_part)));
  }
  $files = array();
  foreach ($rows as $device_type => $hardware) {
    if (!$device_type) {
      continue;
    }
    $file_name = $device_type . '_config';
    $content = '<?xml version="1.0" encoding="UTF-8"?>';
    $content .= '<components>';
    foreach ($hardware as $item) {
      $content .= '<component type="relationship">';
      $content .= '<hash>' . $item['hash'] . '</hash>';
      $content .= '<software>';
      foreach ($item['software'] as $software_hash) {
        $content .= '<component>' . $software_hash . '</component>';
      }
      $content .= '</software>';
      $content .= '</component>';
    }
    $content .= '</components>';
    file_put_contents($hw_sw_config . '/' . $file_name, $content);
    $files[] = $file_name;
  }
  return $files;
}

/**
 * get the software Regulatory Exceptions countrys
 * @param int $software_id
 * @return array
 */
function covidien_get_sw_exceptions_country($software_id) {
  $sql = "select c.field_iso_3166_2lcode_value as country 
    from {node} n
    join {content_type_software_approval_unavailable} sau on sau.field_reg_approved_country_nid=n.nid and sau.field_reg_approved_component_nid= %d
    join {content_field_expiration_datetime} ed on ed.vid = sau.vid and ed.nid=sau.nid and ed.field_expiration_datetime_value IS NULL 
    join {content_type_country} c on c.vid = n.vid";
  $result = db_query($sql, $software_id);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[] = $row->country;
  }
  return $rows;
}

function _get_software_status_unknown() {
  $result = db_query("SELECT nid, title FROM {node} WHERE type='softwarestatus' AND title='%s'", 'Unknown');
  return db_fetch_object($result);
}

function software_ajax_get_file_size() {
  $file_size = 0;
  $fid = arg(3);
  if ($fid) {
    $file_size = db_result(db_query("SELECT filesize FROM files WHERE fid = %d", $fid));
  }
  $date = array('fid' => $fid, 'filesize' => $file_size);
  drupal_json($date);
}
