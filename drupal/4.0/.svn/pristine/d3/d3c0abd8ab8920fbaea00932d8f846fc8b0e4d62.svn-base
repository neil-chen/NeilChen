<?php

/**
 * Implement hook_menu
 */
function covidien_download_pic_menu() {
  $items = array();
  $items ['download_pic/list'] = array(
    'page callback' => 'covidien_download_pic',
    'access callback' => 'covidien_download_pic_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['download_pic/download'] = array(
    'page callback' => 'covidien_download_pic_action',
    'access callback' => 'covidien_download_pic_check_access',
    'type' => MENU_CALLBACK,
  );
  $items ['download_pic/downloadlogfile'] = array(
    'page callback' => 'covidien_download_logfile_action',
    'access callback' => 'covidien_download_pic_check_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme()
 */
function covidien_download_pic_theme() {
  return array(
    'download_pic_list' => array(
      'template' => 'download_pic_list',
      'arguments' => array('form' => NULL, 'get' => NULL)
    ),
    'download_pic_action' => array(
      'template' => 'download_pic_action',
      'arguments' => array('form' => NULL, 'get' => NULL)
    ),
    'download_logfile_action' => array(
      'template' => 'download_logfile_action',
      'arguments' => array('form' => NULL, 'get' => NULL)
    )
  );
}

function covidien_download_pic_check_access() {
  return true;
}

function covidien_download_pic() {
  drupal_set_title(t('Client Download List'));
  $output = theme('download_pic_list');
  echo $output;
  exit;
}

function covidien_download_pic_action() {
  $output = theme('download_pic_action');
  return $output;
}

function covidien_download_logfile_action() {
  $output = theme('download_logfile_action');
  return $output;
}

function template_preprocess_download_pic_action(&$vars) {
  $filePath = check_plain($_GET['filePath']);
  $filename = get_download_foler() . '/' . $filePath;
  header("Content-Type: application/force-download");
  header("Content-Transfer-Encoding: binary");
  // header ( 'Content-Type: application/zip' );
  header("Content-Disposition: attachment; filename=" . basename($filename));
  readfile($filename);
}

function template_preprocess_download_logfile_action(&$vars) {
  $filePath = check_plain($_GET['filePath']);
  $filename = str_replace(".db.gz.decode.html.gz", ".db.gz", basename($filePath));
  $filename = str_replace(".decode.html.gz", ".html.gz", $filename);
  $filename = str_replace("decodeDecrypt", "", $filename);
  header("Content-Type: application/force-download");
  header("Content-Transfer-Encoding: binary");
  // header ( 'Content-Type: application/zip' );
  header("Content-Disposition: attachment; filename=" . $filename);
  readfile($filePath);
}

function get_download_foler() {
  global $drupal_abs_path;
  global $drupal_downloadrepo;
  $download_path = $drupal_abs_path . 'sites/default/files/' . $drupal_downloadrepo;
  return $download_path;
}

function get_download_config_file() {
  global $drupal_downloadrepo;
  $download_path = get_download_foler();
  //check path 
  file_check_directory($download_path, FILE_CREATE_DIRECTORY);
  $config_path = 'sites/default/download_config.xml';
  if (!file_exists($config_path)) {
    return array();
  }
  $xml = simplexml_load_file($config_path);
  $list = array();
  foreach ($xml->item as $item) {
    $list[(int) $item->id]['title'] = (string) $item->title;
    $list[(int) $item->id]['image'] = 'sites/default/files/' . $drupal_downloadrepo . ((string) $item->image);
    $list[(int) $item->id]['text'] = (string) $item->text;
    $list[(int) $item->id]['filepath'] = 'sites/default/files/' . $drupal_downloadrepo . ((string) $item->filepath);
  }
  return $list;
}

function template_preprocess_download_pic_list(&$vars) {
  global $agent_file, $base_url;
  $agent_file = $base_url . $agent_file;
  $files = get_download_config_file();
  $vars['files'] = $files;
  $vars['agent_file'] = $agent_file;
}
