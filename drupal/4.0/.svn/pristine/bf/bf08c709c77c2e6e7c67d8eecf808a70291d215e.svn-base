<?php 
// $Id: password_expire.module,v 1.4 2010/02/14 17:16:42 limitingfactor Exp $

/**
 * @file
 * password_expire.module
 * 
 */

define('PASSWORD_OK', 0);
define('PASSWORD_NEEDS_RENEWAL', 1);
define('PASSWORD_EXPIRED', 2);

/**
* Display help and module information
* 
*/
function password_expire_help($path, $arg) {
  switch ($path) {
    case "admin/help#password_expire":
      return t("<p>Allows administrators to set an expiry date on passwords. Users that do not renew their passwords within the given time will have their passwords reset to a randomly generated one.</p><p>You can schedule warning messages notifying users when their password is close to expiry. If you have the actions module enabled, then you can also schedule emails to be sent. Both messages and emails can use (but do not require) the <a href='http://drupal.org/project/token'>token</a> module, and provides tokens such as [pass-expire-days-left] and [pass-expire-date].</p><p>Note: In order for password expiry to work properly, cron must be scheduled regularly.</p>");
  } 
}

/**
 * Define tokens this module contributes
 *
 * @param string $type
 * @return array
 */
function password_expire_token_list($type = 'all') {
  if ($type == 'user' || $type == 'all') {  
    $tokens['user']['pass-expire-yyyy']      = t('Password expiry year (four digit)');
    $tokens['user']['pass-expire-yy']        = t('Password expiry year (two digit)');
    $tokens['user']['pass-expire-month']     = t('Password expiry month (full word)');
    $tokens['user']['pass-expire-mon']       = t('Password expiry month (abbreviated)');
    $tokens['user']['pass-expire-mm']        = t('Password expiry month (two digit, zero padded)');
    $tokens['user']['pass-expire-m']         = t('Password expiry month (one or two digit)');
    $tokens['user']['pass-expire-ww']        = t('Password expiry week (two digit)');
    $tokens['user']['pass-expire-date']      = t('Password expiry date (day of month)');
    $tokens['user']['pass-expire-day']       = t('Password expiry day (full word)');
    $tokens['user']['pass-expire-ddd']       = t('Password expiry day (abbreviation)');
    $tokens['user']['pass-expire-dd']        = t('Password expiry day (two digit, zero-padded)');
    $tokens['user']['pass-expire-d']         = t('Password expiry day (one or two digit)');
    $tokens['user']['pass-expire-days-left'] = t("Days left till user's password expires");
    return $tokens;
  }
}

/**
 * Token values
 *
 * @param string $type
 * @param object $object
 */
function password_expire_token_values($type, $object = NULL) {
  global $user;
  if($type == 'user') {
    if($expiry_date = db_result(db_query('SELECT timestamp FROM {password_expire} WHERE uid = %d', $object->uid))) {
      
      $days_left = round(($expiry_date - time()) / 86400);
      
      // Adjust expiry date for user timezone settings
      if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
        $timezone = $user->timezone;
      }
      else {
        $timezone = variable_get('date_default_timezone', 0);
      }
      $expiry_date += $timezone;
      
      // set tokens
      $tokens = array();
      $tokens['pass-expire-days-left']  = $days_left;
      $tokens['pass-expire-yyyy']       = date('Y', $expiry_date);
      $tokens['pass-expire-yy']         = date('y', $expiry_date);
      $tokens['pass-expire-month']      = date('F', $expiry_date);
      $tokens['pass-expire-mon']        = date('M', $expiry_date);
      $tokens['pass-expire-mm']         = date('m', $expiry_date);
      $tokens['pass-expire-m']          = date('n', $expiry_date);
      $tokens['pass-expire-ww']         = date('W', $expiry_date);
      $tokens['pass-expire-date']       = date('N', $expiry_date);
      $tokens['pass-expire-day']        = date('l', $expiry_date);
      $tokens['pass-expire-ddd']        = date('D', $expiry_date);
      $tokens['pass-expire-dd']         = date('d', $expiry_date);
      $tokens['pass-expire-d']          = date('j', $expiry_date);
      return $tokens;
    }
  }
}

/**
 * Implementation of hook_hook_info()
 *
 */
function password_expire_hook_info() {
  return array(
    'password_expire' => array(
      'password_expire' => array(
        'warning' => array(
          'runs when' => t('When a users password is due to expire soon.'),
        ),
        'expire' => array(
          'runs when' => t('When a users password has expired.'),
        ),        
      ),
    ),
  );
}

/**
 * Implementation of hook_form_formid_alter
 * 
 * Add options to enforce password strength and password expiry date
 */
function password_expire_form_user_admin_settings_alter(&$form) {
  
  $form['password_expire'] = array(
    '#type' => 'fieldset',
    '#title' => t('Password Expiry Settings'),
    '#weight' => -1,
  );
  $form['password_expire']['password_expire_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Password Expiry Length'),
    '#default_value' => variable_get('password_expire_length', NULL),
    '#description' => t('Enter the period before a password will expire (e.g. +1days, +3months). If blank, passwords never expire.'),
  );
  $form['password_expire']['password_expire_warning'] = array(
    '#type' => 'textfield',
    '#title' => t('Warning period'),
    '#default_value' => variable_get('password_expire_warning', '+1week'),
    '#description' => t('The period of time a user is warned before their password expires.'),
  );
  $form['password_expire']['password_expire_warning_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Warning message'),
    '#description' => t('The message that will be displayed upon login to the user if their password is in the warning period. Leave blank for no message.'),
    '#default_value' => variable_get('password_expire_warning_message', ''),
    '#rows' => 2,
  );
  if (module_exists('token')) {
    $form['password_expire']['token_help'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['password_expire']['token_help']['tokens'] = array(
      '#value' => theme('token_help', 'user'),
    );
  }
  else {
    $form['password_expire']['password_expire_warning_message']['#description'] .= t(' If you have the <a href="http://drupal.org/project/token">tokens</a> module. This message can encorporate tokens.');
  }
  $form['password_expire']['password_expire_repeat_warning_message'] = array(
    '#type' => 'checkbox',
    '#title' => t('Repeat warning'),
    '#description' => t('If this is not checked the message will only be displayed each time the user logs in.'),
    '#default_value' => variable_get('password_expire_repeat_warning_message', 0),
  );
}

/**
 * Implementation of hook_action_info_alter()
 * 
 */
function password_expire_action_info_alter(&$info) {
  foreach ($info as $type => $data) {
    // Allow system and user actions
    if (stripos($type, "user_") === 0 || stripos($type, "system_") === 0) {
      if (isset($info[$type]['hooks']['password_expire'])) {
        array_merge($info[$type]['hooks']['password_expire'], array('warning', 'expire'));
      }
      else {
        $info[$type]['hooks']['password_expire'] = array('warning', 'expire');
      }
    }
  }

  // Add token_actions
  if (isset($info['token_actions_send_email_action'])) {
    if (isset($info['token_actions_send_email_action']['hooks']['password_expire'])) {
      array_merge($info['token_actions_send_email_action']['hooks']['password_expire'], array('warning', 'expire'));
    } else {
      $info['token_actions_send_email_action']['hooks']['password_expire'] = array('warning', 'expire');
    }
  }
}

/**
 * Implementation of hook_user
 *
 * Handles updating password expiry dates and warning the user when they login if their password is going to expire soon
 * 
 * @param string $op
 * @param array $edit
 * @param object $account
 * @param $category
 */
function password_expire_user($op, &$edit, &$account, $category = NULL) {
  
  switch ($op) {
    case 'login':
      
      // roots password never expires
      if ($account->uid != 1 && $expire = variable_get('password_expire_length', FALSE)) {
      
        // check if user has a password expiry set up, if not create one.  
        $expiry_date = db_result(db_query('SELECT timestamp FROM {password_expire} WHERE uid = %d', $account->uid));    
        
        if (empty($expiry_date)) {
          // automatically create an expiry date for this user when they first login
          _password_expire_renew_password($account->uid);
        }
        else {

          // check when users password expires and warns them
          if ($warning_period = variable_get('password_expire_warning', NULL)) {

            // convert warning period into seconds
            $warning_period = strtotime($warning_period, 0);
            $today = time();
            
            if ($today > $expiry_date - $warning_period) {
              // user is in warning period
              if ($warning_message = variable_get('password_expire_warning_message', FALSE)) {
                // display a (possibly tokenised) message to the user warning them their password is due to expire
                $repeat = variable_get('password_expire_repeat_warning_message', FALSE);
                $warning_message = module_exists('token') ? token_replace($warning_message, 'user', $account) : $warning_message;
                drupal_set_message($warning_message, 'warning', $repeat);
              }
            }
          }
        }
      }
      break;
    
    case 'delete':
      // remove entry from password_expire table
      db_query('DELETE FROM {password_expire} WHERE uid=%d', $account->uid); 
      break;
    case 'update':
      if ($edit['pass']) {
        // if password changed, renew expiry date
        _password_expire_renew_password($account->uid);
      }
      break;
  }
}

/**
 * Implementation of hook_cron()
 * 
 * Checks for soon to expire passwords and expired passwords
 *
 */
function password_expire_cron() {
  
  if ($expire = variable_get('password_expire_length', FALSE)) {

    // Get time to the nearest day
    $today = mktime(0, 0, 0);
    
    // expire passwords and trigger actions
    _password_expire_handle_expiry($today);
      
    // warn users of imminent password expiry and trigger actions    
    if ($warning_period = strtotime(variable_get('password_expire_warning', '+1week'), 0)) {
      _password_expire_handle_warnings($today - $warning_period);    
    }
  }
}

/**
 * Trigger actions for users whos passwords are about to expire
 *
 * @param int $threshold
 */
function _password_expire_handle_warnings($threshold) {
   
  if (module_exists('trigger')) {
    
    $query =  'SELECT u.uid, u.name, p.timestamp FROM {users} u ' .
              'INNER JOIN {password_expire} p ON u.uid = p.uid '.
              'WHERE p.timestamp > %d '.
              'AND p.state = '. PASSWORD_OK . ' '; 

    $result = db_query($query, $threshold);
  
    $aids = array_keys(_trigger_get_hook_aids('password_expire', 'warning'));
    if (!empty($aids)) {
      $context = array(
        'hook' => 'password_expire',
        'op' => 'warning',
      );
      
      while ($user = db_fetch_object($result)) {
        $user = user_load(array('uid' => $user->uid));
        $context['user'] = $user;
        actions_do($aids, $user, $context);
      }
    }          
  }
  db_query('UPDATE {password_expire} SET state = %d WHERE timestamp > %d AND state = %d', PASSWORD_NEEDS_RENEWAL, $threshold, PASSWORD_OK);    
}

/**
 * Trigger actions for users whos passwords have expired
 *
 * @param int $threshold
 */
function _password_expire_handle_expiry($threshold) {
    
  $query =  'SELECT u.uid, u.name, p.timestamp FROM {users} u ' .
            'INNER JOIN {password_expire} p ON u.uid = p.uid '.
            'WHERE %d >= p.timestamp ';
    
  $result = db_query($query, $threshold);
  
  $trigger = module_exists('trigger');
  $context = array(
    'hook' => 'password_expire',
    'op' => 'expire',
  );
    
  $aids = array();
  if($trigger) {
    $aids = array_keys(_trigger_get_hook_aids('password_expire', 'expire'));
  }    
    
  while ($user = db_fetch_object($result)) {
    // reset users password to a radomly generated one
    _password_expire_reset_password($user->uid);
    
    if($trigger && !empty($aids)) {
      // trigger any actions waiting on this event
      $user = user_load(array('uid' => $user->uid));
      $context['user'] = $user;
      actions_do($aids, $user, $context);
    }
  }
  db_query('UPDATE {password_expire} SET timestamp = 0, state = %d WHERE %d >= timestamp', PASSWORD_EXPIRED, $threshold);    
}

/**
 * Reset a users password to a randomly generated one
 *
 * @param object $user
 */
function _password_expire_reset_password($uid) {
  $new_pass = md5(user_password());
  db_query('UPDATE {users} SET pass="%s" WHERE uid=%d', $new_pass, $uid);
}

/**
 * Renew a users password expiry date
 *
 * @param int $uid
 */
function _password_expire_renew_password($uid) {  
  $now = mktime(0, 0, 0); // get time to nearest day  
  if ($expiry_date = strtotime(variable_get('password_expire_length', ''), $now)) {
     db_query('UPDATE {password_expire} SET timestamp = %d, state = 0 WHERE uid = %d', $expiry_date, $uid);
    if(!db_affected_rows()) {
      db_query('INSERT INTO {password_expire} () VALUES (%d, %d, 0)', $uid, $expiry_date);
    }
  }
}
