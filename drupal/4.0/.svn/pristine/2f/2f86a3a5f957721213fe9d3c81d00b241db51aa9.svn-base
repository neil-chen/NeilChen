<?php

/**
 * @file
 * Reports functionality defined here.
 */

/**
 * Implements hook_init().
 * global variables used in xlsx report generation in views_data_export module.
 * modules/views_data_export/plugins/views_data_export_plugin_display_export.inc
 * libraries/pChart
 */
function covidien_reports_init() {
  module_load_include('php', 'covidien_reports', 'includes/covidien_reports_query');
  module_load_include('inc', 'covidien_reports', 'includes/device_country_change_report');
  module_load_include('inc', 'covidien_reports', 'includes/covidien_reports_common');
  //3.2.3. SW Versions Report (SRD-570) 
  module_load_include('inc', 'covidien_reports', 'includes/software_version_report');
  module_load_include('inc', 'covidien_reports', 'includes/software_audit_report');
  module_load_include('inc', 'covidien_reports', 'covidien_reports.module.alert_event');
  module_load_include('inc', 'covidien_reports', 'includes/device_historical_configuration');
  module_load_include('inc', 'covidien_reports', 'includes/named_configurations_report');

  global $report_dataexport_px, $sw_upgrade_status_kv;
  $report_dataexport_px = array();
  $sw_upgrade_status_kv = array(
    'installed' => 'Pass',
    'notattempted' => 'Download Only',
    'fail' => 'Fail',
  );

  if (arg(2) == 2) {
//for xlsx converstion
    $report_dataexport_px[] = 'xlsx';
// For Chart insertion
    $report_dataexport_px[] = 'imgchart';
  }
}

/**
 * Implements hook_menu().
 */
function covidien_reports_menu() {
  $items['covidien/reports/filter'] = array(
    'page callback' => 'covidien_reports_filter',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/filter/%'] = array(
    'page callback' => 'covidien_reports_filter',
    'page arguments' => array(3),
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/report/7'] = array(
    'page callback' => 'total_device_report_view',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
//Audit Trail Report 
  $items['covidien/report/5/audit-trail'] = array(
    'page callback' => 'get_audit_trail_report',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/covidien_reports.pages.inc',
  );
  $items['covidien/report/5/audit-trail-csv'] = array(
    'page callback' => 'get_audit_trail_report_csv',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/covidien_reports.pages.inc',
  );
  $items['covidien/report/5/audit-trail-pdf'] = array(
    'page callback' => 'get_audit_trail_report_pdf',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/covidien_reports.pages.inc',
  );
  $items['covidien/report/5/audit-trail-xls'] = array(
    'page callback' => 'get_audit_trail_report_xls',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/covidien_reports.pages.inc',
  );
//Audit Trail Report end
  $items['ahah-report-pl-dtype-exposed-callback'] = array(
    'page callback' => 'report_dtype_search_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-customer-name-exposed-callback'] = array(
    'page callback' => 'report_customer_name_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-account-number-exposed-callback'] = array(
    'page callback' => 'report_account_number_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-software-name-exposed-callback'] = array(
    'page callback' => 'report_software_name_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-part-number-exposed-callback'] = array(
    'page callback' => 'report_part_number_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-version-exposed-callback'] = array(
    'page callback' => 'report_version_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-hw-name-exposed-callback'] = array(
    'page callback' => 'report_hw_name_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-hw-part-number-exposed-callback'] = array(
    'page callback' => 'report_hw_part_number_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-hw-version-exposed-callback'] = array(
    'page callback' => 'report_hw_version_exposed_filters_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_reports_autocomplete',
    'page arguments' => array(3, 4, 5, 6, 7, 8, 9),
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/customername/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_reports_customername_autocomplete',
    'page arguments' => array(2, 3, 4, 5, 6, 7),
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/filtertype/tcname/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_reports_filtertype_customername_autocomplete',
    'page arguments' => array(3, 4, 5, 6, 7, 8),
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/filtertype/customername/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_reports_filtertype_customername_autocomplete',
    'page arguments' => array(3, 4, 5, 6, 7, 8),
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/tacno/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_reports_accountnumber_autocomplete',
    'page arguments' => array(2, 3, 4, 5, 6, 7),
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/reports/accountnumber/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_reports_accountnumber_autocomplete',
    'page arguments' => array(2, 3, 4, 5, 6, 7),
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-report-trainer-exposed-callback'] = array(
    'page callback' => 'report_trainer_exposed_callback',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
  );
// URL to access autocomplete function for Company account number in Audit trial Report filter
  $items['covidien/reports/account/filter'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'get_CustomerAccount_report',
    'page arguments' => array(4, 5, 6, 7),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
// URL to access autocomplete function for Company name in Audit trial Report filter
  $items['covidien/reports/customername/filter'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'get_CustomerName_report',
    'page arguments' => array(4, 5, 6, 7),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // report result
  $items['reports/result/%'] = array(
    'title' => t('Report'),
    'description' => t('get_customer_report'),
    'page callback' => 'get_customer_report',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/covidien_reports_common.inc',
  );
  $items['covidien/reports/software_audit_report'] = array(
    'title' => t('Software Audit Report'),
    'description' => t('Software Audit Report'),
    'page callback' => 'software_audit_report',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_audit_report.inc',
  );
  $items['covidien/reports/software_audit_report_csv'] = array(
    'title' => t('Software Audit Report'),
    'description' => t('Software Audit Report'),
    'page callback' => 'software_audit_report_csv',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_audit_report.inc',
  );
  $items['covidien/reports/software_audit_report_xls'] = array(
    'title' => t('Software Audit Report'),
    'description' => t('Software Audit Report'),
    'page callback' => 'software_audit_report_xls',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_audit_report.inc',
  );
  $items['covidien/reports/software_audit_report_pdf'] = array(
    'title' => t('Software Audit Report'),
    'description' => t('Software Audit Report'),
    'page callback' => 'software_audit_report_pdf',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_audit_report.inc',
  );
  $items['covidien/reports/software_version_report'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'software_version_report',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/software_version_report_csv'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'software_version_report_csv',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/software_version_report_xls'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'software_version_report_xls',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/software_version_report_pdf'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'software_version_report_pdf',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/filtertype/customer_address/autocomplete'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'customer_address_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/filtertype/customer_city/autocomplete'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'customer_city_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/filtertype/customer_state/autocomplete'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'customer_state_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/filtertype/user_facility/autocomplete'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'user_facility_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/filtertype/ds_number/autocomplete'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'ds_number_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/filtertype/sw_version/autocomplete'] = array(
    'title' => t('Software Version Report'),
    'description' => t('Software Version Report'),
    'page callback' => 'sw_version_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/software_version_report.inc',
  );
  $items['covidien/reports/named_configurations_report'] = array(
    'title' => t('Named Configurations Report'),
    'description' => t('Named Configurations Report'),
    'page callback' => 'named_configurations_report',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/named_configurations_report.inc',
  );
  $items['covidien/reports/named_configurations_report_csv/%'] = array(
    'page callback' => 'get_named_configurations_report_csv',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/named_configurations_report.inc',
  );
  $items['covidien/reports/named_configurations_report_pdf/%'] = array(
    'page callback' => 'get_named_configurations_report_pdf',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/named_configurations_report.inc',
  );
  $items['covidien/reports/named_configurations_report_xls/%'] = array(
    'page callback' => 'get_named_configurations_report_xls',
    'access callback' => 'covidien_reports_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/named_configurations_report.inc',
  );
  $items['covidien/reports/check_covidien_or_noncovidien'] = array(
    'title' => 'Check to see if user is Cov or Non-Cov',
    'page callback' => 'check_covidien_or_noncovidien',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * function to check to see if the user is the covidien or non-covidien
 */
function check_covidien_or_noncovidien($email) {
  if (strlen($email) > 3) {
    $name = explode(' ', $email);
    $user_result = db_query("SELECT field_covidien_employee_value as value
                              FROM content_type_person where
                              field_last_name_value= '%s' and field_first_name_value = '%s'
                              order by vid desc
                              limit 1", $name[1], $name[0]);
    while ($user_data = db_fetch_object($user_result)) {
      if ($user_data) {
        drupal_json(array("value" => strtolower($user_data->value)));
        exit();
      }
    }
  }
}

/**
 * Access callback, for this allow anyone to access the 'ACTION_URL'
 */
function covidien_reports_check_access() {
  return covidien_cot_admin_access_callback('reports');
}

/**
 * Autosugesstion
 * @parm
 * arg1: devicetype
 * arg7: search string
 */
function covidien_reports_autocomplete($arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7) {
  $post = array();
  $post['product_line'] = $arg1;
  $post['device_type'] = $arg2;
  $post['customer_name'] = $arg3;
  $post['software_name'] = $arg4;
  $post['part_number'] = $arg5;
  $post['version'] = $arg6;
  $post['string'] = trim($arg7);
  $post = filter_xss_arr($post);
  if (strlen($arg7) > 2) {
    $items = get_ds_number($post);
  } else {
    $items = array();
  }
  print drupal_to_js($items);
  exit();
}

/**
 * Helper function for covidien_reports_theme.
 * Based on the given arg the form will be rendered.
 */
function covidien_reports_filter($arg3 = 1) {
  $output = '';
  switch ($arg3) {
    case 1:
      $output = drupal_get_form('device_configuration_report_form');
      break;
    case 2:
      $output = drupal_get_form('software_upgrade_report_form');
      break;
    case 3:
      // Sprint 7
      $output = drupal_get_form('component_discrepancy_report_form');
      break;
    case 4:
      // Sprint 7
      $output = drupal_get_form('service_records_report_form');
      break;
    case 5:
      // Sprint 7
      $output = drupal_get_form('audit_trial_report');
      break;
    case 6:
      // Sprint 8 Training Report
      $output = drupal_get_form('training_report_form');
      break;
    case 7:
      // Phase 2 Sprint 3 Total Devices Report
      $output = drupal_get_form('total_devices_report_form');
      break;
    case 8:
      $output = drupal_get_form('sw_configuration_report_form');
      break;
    // Reports added in Release 2.1
    case 9:
      $output = drupal_get_form('alert_event_report_form');
      break;
    case 12:
      $output = drupal_get_form('device_historical_configuration_form');
      break;
    case 13:
      module_load_include('inc', 'covidien_reports', 'includes/named_configurations_report');
      $output = drupal_get_form('named_configurations_report_form');
      break;
    // 3.3.3 Device Country Change Report (SRD-664)
    case 15:
      $output = drupal_get_form('device_country_change_form');
      break;
    case 16:
      $output = drupal_get_form('software_audit_report_form');
      break;
    case 17:
      $output = drupal_get_form('software_version_report_form');
      break;
  }
  return $output;
}

/**
 * Implements hook_theme()
 * Used to define the template for reports filter
 */
function covidien_reports_theme() {
  return array(
    'device_configuration_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/device_configuration_report_form', // this is the name of the template
    ),
    'software_upgrade_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'software_upgrade_report_form', // this is the name of the template
    ),
    //sprint 7
    'service_records_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'service_records_report_form', // this is the name of the template
    ),
    //sprint 7
    'component_discrepancy_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'component_discrepancy_report_form', // this is the name of the template
    ),
    //sprint 8
    'training_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'training_report_form', // this is the name of the template
    ),
    'alert_event_report_form' => array(
      'arguments' => array('form' => NULL),
      // this is the name of the template
      'template' => 'alert_event_report_form',
    ),
    'covidien_reports_chart' => array(
      'template' => 'covidien_reports_chart',
      'arguments' => array('report_v'),
    ),
    'covidien_reports_header' => array(
      'template' => 'covidien_reports_header',
      'arguments' => array('report_v'),
    ),
    'covidien_reports_footer' => array(
      'template' => 'covidien_reports_footer',
      'arguments' => array(),
    ),
    'covidien_reports_filter' => array(
      'template' => 'covidien_reports_filter',
      'arguments' => array('report' => NULL),
    ),
    'audit_trial_report' => array(
      'arguments' => array('form' => NULL),
      'template' => 'audit_trial_report', // this is the name of the template
    ),
    'total_devices_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'total_devices_report_form', // this is the name of the template
    ),
    'get_audit_trail_report_buttom' => array(
      'arguments' => array('filter' => NULL),
      'template' => 'get_audit_trail_report_buttom',
    ),
    'get_audit_trail_report_filter' => array(
      'arguments' => array('filter' => NULL),
      'template' => 'get_audit_trail_report_filter',
    ),
    'get_audit_trail_report_buttom' => array(
      'arguments' => array('filter' => NULL),
      'template' => 'get_audit_trail_report_buttom',
    ),
    // 3.3.3 Device Country Change Report (SRD-664)
    'device_country_change_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/device_country_change_form',
    ),
    // GATEWAY-2115
    'device_historical_configuration_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/device_historical_configuration_form',
    ),
    'device_historical_configuration_report' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/device_historical_configuration_report',
    ),
    'device_country_change_report' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/device_country_change_report',
    ),
    'software_audit_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/software_audit_report_form',
    ),
    'software_audit_report' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/software_audit_report',
    ),
    'software_version_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/software_version_report_form',
    ),
    'software_version_report' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/software_version_report',
    ),
    'named_configurations_report_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/named_configurations_report_form',
    ),
    'named_configurations_report' => array(
      'arguments' => array('form' => NULL),
      'template' => 'template/named_configurations_report',
    ),
    'get_named_configurations_report_filter' => array(
      'arguments' => array('filter' => NULL),
      'template' => 'get_named_configurations_report_filter',
    ),
    'get_named_configurations_report_buttom' => array(
      'arguments' => array('filter' => NULL),
      'template' => 'get_named_configurations_report_buttom',
    ),
  );
}

/**
 * Implements template_preprocess_hook
 * Used to render a chart on the report list screen and pdf
 */
function template_preprocess_covidien_reports_chart(&$vars) {
  $pass_per = $vars[0]['pass_per']['value'];
  $fails_per = $vars[0]['fails_per']['value'];
  $vars['chart_arg'] = array(
    'label' => array(t('Pass'), t('Fail')),
    'value' => array($pass_per, $fails_per),
  );
  $vars['pass_per'] = $pass_per;
  $vars['fails_per'] = $fails_per;
  $vars['chart_lib_path'] = url('sites/all/libraries/pChart', array('absolute' => TRUE));
}

/**
 * Implements template_preprocess_hook
 * Used to set the header on reports
 */
function template_preprocess_covidien_reports_header(&$vars) {
  if ($vars[0]['report_v'] == 1) {
    $vars['report_title'] = t("Device Current Configuration Report");
  } elseif ($vars[0]['report_v'] == 2) {
    $vars['report_title'] = t("Software Upgrade Report");
  } elseif ($vars[0]['report_v'] == 3) {
    $vars['report_title'] = t("Component Discrepancy Report");
  } elseif ($vars[0]['report_v'] == 4) {
    $vars['report_title'] = t("Service Records Report");
  } elseif ($vars[0]['report_v'] == 5) {
    $vars['report_title'] = t("Audit Trail Report");
  } elseif ($vars[0]['report_v'] == 6) {
    $vars['report_title'] = t("Training Report");
  } elseif ($vars[0]['report_v'] == 7) {
    $vars['report_title'] = t("Total Devices Report");
  } elseif ($vars[0]['report_v'] == 8) {
    $vars['report_title'] = t("SW Configuration Report");
  } elseif ($vars[0]['report_v'] == 9) {
    $vars['report_title'] = t("Alert Event by Device Serial Number & Date Range");
  }
  $vars['report_date'] = date("m/d/Y");
}

/**
 * Implements template_preprocess_hook
 * Used to print the filters choosen for generating the report
 */
function template_preprocess_covidien_reports_filter(&$vars) {
  $vars['covidien_reports_filter'] = $vars[0]['covidien_reports_filter'];
}

/**
 * Form Customisation
 */
function covidien_reports_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['submit']['#id'] == 'edit-submit-report-1') {
    $form['submit']['#value'] = t('View Report');
  }
}

/**
 * Implements hook_views_api() to define our custom views to drupal views.
 */
function covidien_reports_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'covidien_reports'),
  );
}

/**
 * Implements hook_views_default_views().
 * Enable the views defined in files
 */
function covidien_reports_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'covidien_reports') . '/views', '.inc');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}

/**
 * Implements hook_views_data() to define our custom views to drupal views.
 */
function covidien_reports_views_data() {
  $data['device_software_upgrade_view'] = device_software_upgrade_view_data();
  $data['device_component_discrepancy_view'] = device_component_discrepancy_view_data();
  $data['device_service_history_view'] = device_service_history_view_data();
  // report 5 data defined in covidien_activity
  $data['device_software_version_view'] = device_software_version_view_data();
  $data['view_named_configuration'] = view_named_configuration_data();
  $data['device_emerald_software_version_view'] = device_emerald_software_version_view_data();
  $data['device_scd700_software_version_view'] = device_scd700_software_version_view_data();
  $data['training_record_view'] = training_record_view_data();
  $data['view_device_sw_configuration'] = view_device_sw_configuration_data();
  module_load_include('inc', 'covidien_reports', 'covidien_reports.module.alert_event');
  $data['alert_event_report_form_view_data'] = alert_event_report_form_view_data();
  return $data;
}

/**
 * get Total at each SW version for each country by device type.
 * The original query from get_device_category_by_customer_report_query() doesn't take in serial number as filter
 */
function get_device_with_sw_version_query($arg,$table) { 
  $query = "SELECT devicetype, software_version,country_name as country, count(devicetype) as total 
            FROM " . $table . "
            where productline_nid = '%d' and devicetype_nid = '%d' ";
  $additional_where = '';
  //original dev use customer nid as customer name. If have time will have to make the correction on this one
  if(!empty($arg['customer_nid'])){
    $additional_where .= " and customername = trim('%s') ";
  }
  if(!empty($arg['country'])){
    $additional_where .= " and country_nid = '%d' ";
  }
  if(!empty($arg['deviceserial'])){
    $additional_where .= " and deviceserial = '%s' ";
  } 
  
  $query .= $additional_where . " group by devicetype, software_version,country_name ORDER BY software_version ASC ";
         
  return $query;
}
/**
 * Implements hook_views_pre_render
 * Used to cusomize the reports export and report list
 */
function covidien_reports_views_pre_render(&$view, &$display_id = 'default', &$args = array()) {
  $view->covidien_reports_header_thh = 0;
  if ($view->name == 'report_1' || $view->name == 'report_1_scd' || $view->name == 'report_1_emerald') {
    $view->base_table = str_replace('_software_version_view', '_software_version_table', $view->base_table); 
    $subqry = '';
    $covidien_reports_sub = array();
    drupal_set_title('<span class="title_bold">' . t('Device Current Configuration Report') . '</span>');
    $get = filter_xss_arr($_GET);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $row = ($row / 2) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 1));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 1));
    $view->covidien_reports_header_dh = 4.85 * 7;
    //used to increase title header height
    $view->covidien_reports_header_thh = 5;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4.85 * $row);
    //Reports Sub result where condition logic
    $covidien_reports_subval = array();
    $covidien_reports_subkey = array(t('Customer Name'), t('S/W  Version'), t('Total'));
    $subwhere_arr = $view->display['page_1']->handler->handlers['field']['customername']->query->where;
    $subwhere_valid = array();
    $subargs = array();
    if (count($subwhere_arr[0]['args']) > 0) {
      $j = 0;
      foreach ($subwhere_arr[0]['args'] as $key => $arg) {
        if ($arg != '') {
          $subargs[$j] = $arg;
          $j++;
          if ($subwhere_arr[0]['clauses'][$key] != '') {
            $subwhere_valid[$key] = str_replace('_software_version_view', '_software_version_table', $subwhere_arr[0]['clauses'][$key]);
          }
        }
      } 
      
      $subwhere = implode(' AND ', $subwhere_valid);
      $subqry = "select customername,software_version,count(software_version) as total";
      $subqry = str_replace('_software_version_view', '_software_version_table', $subqry);
      $subqry .= " from " . $view->base_table . " ";
      if (trim($subwhere) != '') {
        $subqry .= ' WHERE  ' . $subwhere;
      }
      $subqry .= " group by customername,software_version";
    
      /**
       * Used in helper report_sub_result_session
       * xls, csv report
       */
      if (!$get['eid'] > 0) { 
        variable_set('report_sub_qry', $subqry);
        variable_set('report_sub_arg', $subargs); 
      }
    }
    $qarr = explode('/', $get['q']);
    $qarr_count = count($qarr);
    $is_chk1 = (($qarr[$qarr_count - 2] == 'pdf') && ($qarr[$qarr_count - 1] != ''));
    $is_chk2 = ($qarr[$qarr_count - 1] == 'xls');
    $is_chk3 = ($qarr[$qarr_count - 1] == 'xlsx');
    $is_chk4 = ($qarr[$qarr_count - 1] == 'csv');
    if ($is_chk1 || $is_chk2 || $is_chk3 || $is_chk4) { 
      if (variable_get('report_sub_qry', '') != '') { 
        $subqry = variable_get('report_sub_qry', '');
        $subargs = variable_get('report_sub_arg', '');
      } else {
        drupal_goto('/covidien/reports/filter');
      }
    }
    if ($subqry != '') {
      $subqry = str_replace('_software_version_view', '_software_version_table', $subqry);
      $subres = db_query($subqry, $subargs);
      while ($subrec = db_fetch_object($subres)) {
        //note: software_version can be empty, HW without SW
        array_push($covidien_reports_sub, array(
          $subrec->customername,
          $subrec->software_version,
          $subrec->total,
        ));
      }
    }
    $view->covidien_reports_subline = t('Total at each SW version by Account');
    $view->covidien_reports_subkey = $covidien_reports_subkey;
    $view->covidien_reports_subval = $covidien_reports_sub;
    if (count($covidien_reports_sub) == 0) {
      $view->covidien_reports_noresult = t('Total at each SW version by Account');
      $view->covidien_reports_noresult .= '</br>';
      $view->covidien_reports_noresult .= t('No Results');
    }
    //get report sub2 result by query
    $covidien_reports_sub2key = array(t('Device Type'), t('S/W  Version'), t('Country'), t('Total'));
    $covidien_reports_sub2val = array();
    $prepra_sub2args = Array(
      'productline_nid' => $get['productline_nid'], 
      'devicetype_nid' => $get['devicetype_nid'],
      'customer_nid' => $get['customer_nid'],
      'country' => $get['country'],
      'deviceserial' => $get['deviceserial']); 
    
    $sub2args = Array($get['productline_nid'],$get['devicetype_nid']);
    
    if($get['customer_nid']){
      $sub2args[] = $get['customer_nid']; 
    }
    if($get['country']){
      $sub2args[] = $get['country']; 
    }
    if($get['deviceserial']){
      $sub2args[] = $get['deviceserial']; 
    }
    //$sub2qry = get_device_category_by_customer_report_query();
    $sub2qry = get_device_with_sw_version_query($prepra_sub2args,$view->base_table);

    if ($sub2qry != '') { 
      /**
       * Used in helper report_sub2_result_session
       * xls, csv report
       */
      if ($get['productline_nid'] != '') { 
        variable_set('report_sub2_qry', $sub2qry);
        variable_set('report_sub2_arg', $sub2args); 
      }
      //change table name from view to physical table for faster performance
      $sub2qry = str_replace('_software_version_view', '_software_version_table', $sub2qry);  
      $subres = db_query($sub2qry, $sub2args);
      while ($subrec = db_fetch_object($subres)) {
        //note: software_version can be empty, HW without SW
        array_push($covidien_reports_sub2val, array(
          $subrec->devicetype,
          $subrec->software_version,
          $subrec->country,
          $subrec->total,
        ));
      }
    }
    $view->covidien_reports_sub2line = t('Total at each SW version for each country by device type');
    $view->covidien_reports_sub2key = $covidien_reports_sub2key;
    $view->covidien_reports_sub2val = $covidien_reports_sub2val;
    if (count($covidien_reports_sub2val) == 0) {
      $view->covidien_reports_sub2noresult = t('Total at each SW version for each country by device type');
      $view->covidien_reports_sub2noresult .= '</br>';
      $view->covidien_reports_sub2noresult .= t('No Results');
    }
  } elseif ($view->name == 'report_2') {
    $subqry = '';
    drupal_set_title('<span class="title_bold">' . t('Software Upgrade Report') . '</span>');
    $get = filter_xss_arr($_GET);
    $request = filter_xss_arr($_REQUEST);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 2));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 2));
    $view->covidien_reports_header_dh = 4.85 * 8;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4 * $row);
    /**
     * Chart and summary removed
     */
    if (count($view->result, 1) == 0) {
      $view->covidien_reports_noresult = t('No Results');
    }
  } elseif ($view->name == 'report_3') {
    $get = filter_xss_arr($_GET);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $row = ($row / 2) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 3));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 3));
    $view->covidien_reports_header_dh = 4.85 * 7;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4.85 * $row);
    drupal_set_title('<span class="title_bold">' . t("Component Discrepancy Report") . '</span>');
    if (count($view->result, 1) == 0) {
      $view->covidien_reports_noresult = t('No Results');
    }
  } elseif ($view->name == 'report_4') {
    $get = filter_xss_arr($_GET);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $row = ($row / 2) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 4));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 4));
    $view->covidien_reports_header_dh = 4.85 * 7;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4.85 * $row);
    drupal_set_title('<span class="title_bold">' . t("Service Records Report") . '</span>');
    if (count($view->result, 1) == 0) {
      $view->covidien_reports_noresult = t('No Results');
    }
  } elseif ($view->name == 'report_5') {
    $get = filter_xss_arr($_GET);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $row = ($row / 2) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 5));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 5));
    $view->covidien_reports_header_dh = 4.85 * 7;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4.85 * $row);
    drupal_set_title('<span class="title_bold">' . t("Audit Trail Report") . '</span>');
    if (count($view->result, 1) == 0) {
      $view->covidien_reports_noresult = t('No Results');
    }
  } elseif ($view->name == 'report_6') {
    $get = filter_xss_arr($_GET);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $row = ($row / 2) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 6));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 6));
    $view->covidien_reports_header_dh = 4.85 * 7;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4.85 * $row);
    drupal_set_title('<span class="title_bold">' . t("Training Report") . '</span>');
    if (count($view->result, 1) == 0) {
      $view->covidien_reports_noresult = t('No Results');
    }
  } elseif ($view->name == 'report_8') {
    $get = filter_xss_arr($_GET);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $row = ($row / 2) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 8));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 8));
    $view->covidien_reports_header_dh = 4.85 * 7;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4.85 * $row);
    drupal_set_title('<span class="title_bold">' . t("SW Configuration Report") . '</span>');
    if (count($view->result, 1) == 0) {
      $view->covidien_reports_noresult = t('No Results');
    }
  } elseif ($view->name == 'report_9') {
    $get = filter_xss_arr($_GET);
    $report['covidien_reports_filter'] = get_report_filter($get);
    $report_op = theme('covidien_reports_filter', $report);
    $row = count($report['covidien_reports_filter']) + 1;
    $row = ($row / 2) + 1;
    $view->covidien_reports_header = theme('covidien_reports_header', array('report_v' => 9));
    $view->covidien_reports_footer = theme('covidien_reports_footer', array('report_v' => 9));
    $view->covidien_reports_header_dh = 4.85 * 7;
    $view->covidien_reports_filter = $report_op;
    $view->covidien_reports_filter_dh = $view->covidien_reports_header_dh + (4.85 * $row);
    drupal_set_title('<span class="title_bold">' . t("Alert Event ") . '</span>');
    if (count($view->result, 1) == 0) {
      $view->covidien_reports_noresult = t('No Results');
    }
  }
}

/**
 * Implements hook_preprocess_views_view
 * Used to customize the views template variables
 */
function covidien_reports_preprocess_views_view(&$vars) {
  $ischk1 = ($vars['view']->name == 'report_3');
  $ischk2 = ($vars['view']->name == 'report_4');
  $ischk3 = ($vars['view']->name == 'report_5');
  $ischk4 = ($vars['view']->name == 'report_6');
  $ischk5 = ($vars['view']->name == 'report_8');
  $ischk9 = ($vars['view']->name == 'report_9');
  if ($vars['view']->name == 'report_1' || $vars['view']->name == 'report_1_scd' || $vars['view']->name == 'report_1_emerald') {
    $get = filter_xss_arr($_GET);
    $vars['report_filter'] = get_report_filter($get);
    $filter_url = request_uri();
    if ($filter_url != '') {
      $export_filter_arr = explode('?', $filter_url);
      $filter_url = $export_filter_arr[1];
    }
    //used in template buttons
    $vars['export_filter_param'] = $filter_url;
    $vars['covidien_reports_subline'] = $vars['view']->covidien_reports_subline;
    $vars['covidien_reports_subkey'] = $vars['view']->covidien_reports_subkey;
    $vars['covidien_reports_subval'] = $vars['view']->covidien_reports_subval;
    $vars['covidien_reports_noresult'] = $vars['view']->covidien_reports_noresult;

    $vars['covidien_reports_sub2line'] = $vars['view']->covidien_reports_sub2line;
    $vars['covidien_reports_sub2key'] = $vars['view']->covidien_reports_sub2key;
    $vars['covidien_reports_sub2val'] = $vars['view']->covidien_reports_sub2val;
    $vars['covidien_reports_sub2noresult'] = $vars['view']->covidien_reports_sub2noresult;
  } elseif ($vars['view']->base_table == 'device_software_upgrade_view' && $vars['view']->name == 'report_2') {
    $get = filter_xss_arr($_GET);
    $vars['report_filter'] = get_report_filter($get);
    $filter_url = request_uri();
    if ($filter_url != '') {
      $export_filter_arr = explode('?', $filter_url);
      $filter_url = $export_filter_arr[1];
    }
    //used in template buttons
    $vars['export_filter_param'] = $filter_url;
    //Chart and summary code commented
    //$vars['covidien_reports_subrow'] = $vars['view']->covidien_reports_subrow;
    //$vars['covidien_reports_chart'] = $vars['view']->covidien_reports_chart;
    $vars['covidien_reports_noresult'] = $vars['view']->covidien_reports_noresult;
  } elseif ($ischk1 || $ischk2 || $ischk3 || $ischk4 || $ischk9) {
    //sprint 7,8.2
    $get = filter_xss_arr($_GET);
    $vars['report_filter'] = get_report_filter($get);
    $filter_url = request_uri();
    if ($filter_url != '') {
      $export_filter_arr = explode('?', $filter_url);
      $filter_url = $export_filter_arr[1];
    }
    //used in template buttons
    $vars['export_filter_param'] = $filter_url;
    $vars['covidien_reports_noresult'] = $vars['view']->covidien_reports_noresult;
  }
}

/**
 * Implements hook_preprocess_views_template
 * Used to customize the views xls header template variables
 */
function covidien_reports_preprocess_views_data_export_xls_header(&$vars) {
  $get = filter_xss_arr($_GET);
  $vars['report_filter'] = get_report_filter($get);
}

/**
 * Implements hook_preprocess_views_template
 * Used to customize the views xls footer template variables
 */
function covidien_reports_preprocess_views_data_export_xls_footer(&$vars) {
  $vars['covidien_reports_subline'] = $vars['view']->covidien_reports_subline;
  $vars['covidien_reports_subkey'] = $vars['view']->covidien_reports_subkey;
  if (count($vars['view']->covidien_reports_subkey) > 0) {
    $vars['covidien_reports_subval'] = report_sub_result_session();
  }

  $vars['covidien_reports_sub2line'] = $vars['view']->covidien_reports_sub2line;
  $vars['covidien_reports_sub2key'] = $vars['view']->covidien_reports_sub2key;
  if (count($vars['view']->covidien_reports_sub2key) > 0) {
    $vars['covidien_reports_sub2val'] = report_sub2_result_session();
  }

  $vars['covidien_reports_subrow'] = $vars['view']->covidien_reports_subrow;
}

/**
 * Implements hook_preprocess_views_template
 * Used to customize the views csv header template variables
 */
function covidien_reports_preprocess_views_data_export_csv_header(&$vars) {
  $get = filter_xss_arr($_GET);
  $vars['report_filter'] = get_report_filter($get);
}

/**
 * Implements hook_preprocess_views_template
 * Used to customize the views csv footer template variables
 */
function covidien_reports_preprocess_views_data_export_csv_footer(&$vars) {
  $get = filter_xss_arr($_GET);
  $vars['report_filter'] = get_report_filter($get);
  $vars['covidien_reports_subline'] = $vars['view']->covidien_reports_subline;
  $vars['covidien_reports_subkey'] = $vars['view']->covidien_reports_subkey;
  if (count($vars['view']->covidien_reports_subkey) > 0) {
    $vars['covidien_reports_subval'] = report_sub_result_session();
  }
  $vars['covidien_reports_sub2line'] = $vars['view']->covidien_reports_sub2line;
  $vars['covidien_reports_sub2key'] = $vars['view']->covidien_reports_sub2key;
  if (count($vars['view']->covidien_reports_sub2key) > 0) {
    $vars['covidien_reports_sub2val'] = report_sub2_result_session();
  }
  $vars['separator'] = ',';
  $vars['covidien_reports_subrow'] = $vars['view']->covidien_reports_subrow;
}

/**
 * Query alter for the report generation with date between for custom defined view.
 * report_6
 */
function covidien_reports_views_query_alter(&$view, &$query) {
  global $user;
  if ($user->covidien_user != 'Yes') {
    $tmp_where = '';
    if ($view->name == 'report_1') { 
      $tmp_where = "device_software_version_view.customer_nid";
    } elseif ($view->name == 'report_1_emerald') {
      $tmp_where = "device_emerald_software_version_view.customer_nid";
    } elseif ($view->name == 'report_1_scd') {
      $tmp_where = "device_scd700_software_version_view.customer_nid";
    } elseif ($view->name == 'report_2') {
      $tmp_where = "device_software_upgrade_view.customer_nid";
    } elseif ($view->name == 'report_3') {
      $tmp_where = "device_component_discrepancy_view.customer_nid";
    } elseif ($view->name == 'report_4') {
      $tmp_where = "device_service_history_view.customer_nid";
    } elseif ($view->name == 'report_6') {
      $tmp_where = "training_record_view.customer_nid";
    } elseif ($view->name == 'report_8') {
      $tmp_where = "view_device_sw_configuration.customer_nid";
    } elseif ($view->name == 'report_9') {
      $tmp_where = "device_service_history_view.customer_nid";
    }
    if ($tmp_where != '') {
      if (count($user->customer_nid) > 0) {
        $customer_nid = implode(',', $user->customer_nid);
        array_push($query->where[0]['clauses'], " " . $tmp_where . " IN (%s) ");
        array_push($query->where[0]['args'], $customer_nid);
      }
    }
  }
  if ($view->name == 'report_2') {
    $tmp = explode(',', $query->where[0]['args'][0]);
    $wherecount = count($query->where);
    unset($query->where[0]['clauses'][0]);
    unset($query->where[0]['args'][0]);
    //TODO $query->where
    unset($query->where[0]['clauses'][5]);
    $counry_id = $query->where[0]['args'][5];
    unset($query->where[0]['args'][5]);
    if ($counry_id == 0) {
      $query->where[0]['clauses'][2] = "(device_software_upgrade_view.customername) = ('%s') " . check_plain($_GET['hid_condition']) . " device_software_upgrade_view.country_nid is not null";
    } else {
      $query->where[0]['clauses'][2] = "(device_software_upgrade_view.customername) = ('%s') " . check_plain($_GET['hid_condition']) . " device_software_upgrade_view.country_nid = %d ";
      array_splice($query->where[0]['args'], 2, 0, array($counry_id));
    }
    if ($_GET['from_date']) {
      $query->where[0]['clauses'][] = "device_software_upgrade_view.Event_datetime > '%s'";
      $query->where[0]['args'][] = check_plain($_GET['from_date']);
    }
    if ($_GET['to_date']) {
      $query->where[0]['clauses'][] = "device_software_upgrade_view.Event_datetime < '%s'";
      $query->where[0]['args'][] = check_plain($_GET['to_date']);
    }
    $query->where[$wherecount] = array('clauses' => array(), 'args' => array(), 'type' => 'OR');
    foreach ($tmp as $val) {
      $query_where = "device_software_upgrade_view.SW_upgrade_status LIKE ('%%%s%%')";
      if ($val == 'notattempted') {
        $val = "not attempted";
        $query_where = "(device_software_upgrade_view.SW_upgrade_status LIKE ('%%%s%%') OR device_software_upgrade_view.SW_upgrade_status LIKE '%%%s%%')";
        array_splice($query->where[$wherecount]['args'], 1, 0, 'Download');
      }
      array_push($query->where[$wherecount]['clauses'], $query_where);
      array_push($query->where[$wherecount]['args'], $val);
    }
  }
  $is_chk1 = ($view->name == 'report_1' || $view->name == 'report_1_emerald');
//  $is_chk1 = ($view->name == 'report_1_emerald');
  $is_chk2 = ($view->name == 'report_1_scd');
  $is_chk3 = ($view->name == 'report_3');
  $is_chk4 = ($view->name == 'report_6');
  $is_chk5 = ($view->name == 'report_8');
  $is_chk9 = ($view->name == 'report_9');
  if ($is_chk1 || $is_chk2 || $is_chk3 || $is_chk4 || $is_chk5) {
    $remove = array();
    $cnt = count($query->where[0]['args']);

    if ($cnt > 0) {
      foreach ($query->where[0]['args'] as $i => $valarg) {
        if ($valarg == '') {
          // When Views use isequal and arugment empty it result in empty row.
          $remove[] = $i;
        }
      }
    }
    //object clear start
    $noof = count($remove);
    if ($noof > 0) {
      foreach ($remove as $i) {
        unset($query->where[0]['clauses'][$i]);
        unset($query->where[0]['args'][$i]);
      }
    }
    $remove = array();
    //object clear end
    if ($view->name == 'report_1' || $view->name == 'report_1_emerald') {
      //For two Hardwares and One Software
      $view_base_table = $view->base_table;
      $cnt = count($query->where[0]['args']);
      if ($cnt > 0) {
        foreach ($query->where[0]['args'] as $i => $valarg) {
          //note: Hardware with OR
          $key1 = "(" . $view_base_table . ".hardware_name) = ('%s')";
          $key2 = "(" . $view_base_table . ".hardware_part) LIKE ('%%%s%%')";
          $key3 = "(" . $view_base_table . ".hardware_version) LIKE ('%%%s%%')";
          $condarray = array(
            $key1 => "(" . $view_base_table . ".hardware1_name) = ('%s')",
            $key2 => "(" . $view_base_table . ".hardware1_part) LIKE ('%%%s%%')",
            $key3 => "(" . $view_base_table . ".hardware1_version) LIKE ('%%%s%%')",
          );
          if (array_key_exists($query->where[0]['clauses'][$i], $condarray)) {
            $wherecount = count($query->where);
            $query->where[$wherecount] = array('clauses' => array(), 'args' => array(), 'type' => 'OR');
            array_push($query->where[$wherecount]['clauses'], $query->where[0]['clauses'][$i]);
            array_push($query->where[$wherecount]['args'], $query->where[0]['args'][$i]);
            array_push($query->where[$wherecount]['clauses'], $condarray[$query->where[0]['clauses'][$i]]);
            array_push($query->where[$wherecount]['args'], $query->where[0]['args'][$i]);
            $remove[] = $i;
          }
        }
        //object clear start
        $noof = count($remove);
        if ($noof > 0) {
          foreach ($remove as $i) {
            unset($query->where[0]['clauses'][$i]);
            unset($query->where[0]['args'][$i]);
          }
        }
        $remove = array();
        //object clear end
      }
    }
    if (count($query->where[0]['clauses']) == 0) {
      array_push($query->where[0]['clauses'], '1=1');
    }
  }

  if ($view->name == 'report_1') {
    module_load_include('inc', 'covidien_reports', 'includes/covidien_reports_edit_view_query');
    device_current_configuration_report_query(check_plain($_GET['hid_condition']), $query);
  }

  if ($view->name == 'report_3') {
    unset($query->where[0]['clauses'][4]);
    $counry_id = $query->where[0]['args'][4];
    unset($query->where[0]['args'][4]);
    if ($counry_id == 0) {
      $query->where[0]['clauses'][1] = "(device_component_discrepancy_view.customername) LIKE ('%%%s%%') AND " . check_plain($_GET['hid_condition']) . " device_component_discrepancy_view.country_nid is not null";
    } else {
      $query->where[0]['clauses'][1] = "(device_component_discrepancy_view.customername) LIKE ('%%%s%%') AND " . check_plain($_GET['hid_condition']) . " device_component_discrepancy_view.country_nid = %d ";
      array_splice($query->where[0]['args'], 2, 0, array($counry_id));
    }
  } elseif ($view->name == 'report_2' || $view->name == 'report_4' || $view->name == 'report_6' || $view->name == 'report_9') {
    $request = filter_xss_arr($_REQUEST);
    if ($request['v'] == 2 || $request['v'] == 4 || $request['v'] == 6) {
      if ($view->name == 'report_2') {
        $tmp_where = "device_software_upgrade_view.Event_datetime";
      } elseif ($view->name == 'report_4') {
        $tmp_where = "device_service_history_view.service_date";
      } elseif ($view->name == 'report_6') {
        $tmp_where = "training_record_view.training_completion_date";
      }
      $from_date = $request['from_date'];
      $to_date = $request['to_date'];
      if ($from_date != '' && $to_date != '') {
        array_push($query->where[0]['clauses'], " " . $tmp_where . " BETWEEN '%s' AND '%s' ");
        array_push($query->where[0]['args'], $from_date, $to_date);
      }
    }
  } elseif ($view->name == 'report_5') {
    $request = filter_xss_arr($_REQUEST);
    if ($request['v'] == 5) {
      $tmp_where = "activity_log.logtime";
      $from_date = strtotime($request['from_date']);
      $to_date = strtotime($request['to_date']);
      $keyword = isset($request['last_name']) ? trim($request['last_name']) : '';
      $username = isset($request['username']) ? trim($request['username']) : '';
      $cid = $request['cid'];
      $tmpwhere = '';
      if ($user->covidien_user != 'Yes') {
        $customer_nid = implode(',', $user->customer_nid);
        $customer_nid = helper_queryin($customer_nid);
        $val1 = 'node_activity_log_node_data_field_last_name.field_company_name_nid IN (' . $customer_nid . ')';
        $query->where[0]['clauses'][] = $val1;
      }
      if ($from_date != '' && $to_date != '') {
        $to_date_alter = mktime(23, 59, 59, date('m', $to_date), date('d', $to_date), date('Y', $to_date));
        $wc = count($query->where[0]['clauses']);
        $query->where[0]['clauses'][] = " " . $tmp_where . " BETWEEN '%s' AND '%s' ";
        $wa = count($query->where[0]['args']);
        $query->where[0]['args'][] = $from_date;
        $wa++;
        $query->where[0]['args'][] = $to_date_alter;
      } elseif ($from_date != '') {
        $query->where[0]['clauses'][] = " activity_log.logtime > '%s' ";
        $query->where[0]['args'][] = $from_date;
      } elseif ($to_date != '') {
        $to_date_alter = strtotime(23, 59, 59, date('m', $to_date), date('d', $to_date), date('Y', $to_date));
        $query->where[0]['clauses'][] = " activity_log.logtime < '%s' ";
        $query->where[0]['args'][] = $to_date_alter;
      }
      if ($keyword != '') {
        $query->where[0]['clauses'][0] = '((node_activity_log_node_data_field_last_name.field_last_name_value) LIKE ("%%%s%%") OR (node_activity_log_node_data_field_last_name.field_first_name_value) LIKE ("%%%s%%") OR CONCAT(node_activity_log_node_data_field_last_name.field_first_name_value," ",node_activity_log_node_data_field_last_name.field_last_name_value) LIKE "%%%s%%")';
        array_splice($query->where[0]['args'], 0, 0, $keyword);
        array_splice($query->where[0]['args'], 2, 0, $keyword);
      }
      if (($keyword == '') && ($username == '')) {
        unset($query->where[0]['clauses'][0]);
        unset($query->where[0]['args'][0]);
        unset($query->where[0]['clauses'][1]);
        unset($query->where[0]['args'][1]);
      }
    }
  }
}

/**
 * Rewrite View Query for Activity Log group customer_name
 */
function covidien_reports_views_pre_execute(&$view) {
  if ($view->name == "report_5") {
    $post = filter_xss_arr($_GET);
    $cid = $post['cid'];
    if (!empty($cid)) {
      $alter_query = " join content_type_party on content_type_party.nid=node_node_data_field_comp_account_no_node_data_field_bu_customer_account_number.field_customer_party_pk_nid join node as node3 on node3.nid=content_type_party.nid and node3.vid=content_type_party.vid join content_type_party_type on content_type_party.field_party_type_nid=content_type_party_type.nid join node as node1 on node1.nid=content_type_party_type.nid and node1.vid=content_type_party_type.vid and node1.title='Customer' WHERE node3.title like '%$cid%' and ";
      $query = $view->build_info['query'];
      $view_query = str_replace('WHERE', $alter_query, $query);
      $view->build_info['query'] = $view_query;
      $view->build_info['count_query'] = $view_query;
    }
  }
  if ($view->name == 'report_1' || $view->name == 'report_1_scd' || $view->name == 'report_1_emerald') {

    $query = '';
    $post = filter_xss_arr($_GET);
    if ($view->name == 'report_1') {
      $view->base_table = str_replace('device_software_version_view', 'device_software_version_table', $view->base_table);
      $query = "SELECT 
                device_service_history_view.productline,
                device_service_history_view.devicetype_nid AS device_software_version_view_device_nid,
                device_service_history_view.customername AS device_software_version_view_customername,
                device_service_history_view.deviceserial AS device_software_version_view_deviceserial,
                content_type_hardware.field_hw_version_value AS device_software_version_view_hardware_version,
                view_hardware.VERSION AS device_software_version_view_hardware1_version,
                view_software.VERSION AS device_software_version_view_software_version,
                device_service_history_view.service_date AS device_software_version_view_lastest_sw_update,
                device_service_history_view.technician_email AS device_software_version_view_service_person ";
    
    } elseif ($view->name == 'report_1_scd') {
      $query = "SELECT device_service_history_view.productline AS productline,
                device_service_history_view.devicetype_nid AS device_scd700_software_version_view_device_nid,
                device_service_history_view.customername AS device_scd700_software_version_view_customername,
                device_service_history_view.deviceserial AS device_scd700_software_version_view_deviceserial,
                view_hardware.VERSION AS device_scd700_software_version_view_hardware_version,
                view_software.VERSION AS device_scd700_software_version_view_software_version,
                device_service_history_view.service_date AS device_scd700_software_version_view_lastest_sw_update,
                device_service_history_view.technician_email AS device_scd700_software_version_view_service_person ";
    } else {
      $query = "SELECT device_service_history_view.productline AS productline,
                device_service_history_view.devicetype_nid AS device_emerald_software_version_view_device_nid,
                device_service_history_view.customername AS device_emerald_software_version_view_customername,
                device_service_history_view.deviceserial AS device_emerald_software_version_view_deviceserial,
                device_service_history_view.country_name AS device_emerald_software_version_view_country_name,
                content_type_hardware.field_hw_version_value AS device_emerald_software_version_view_hardware_version,
                view_hardware.VERSION AS device_emerald_software_version_view_hardware1_version,
                view_software.NAME AS device_emerald_software_version_view_software_name,
                view_software.VERSION AS device_emerald_software_version_view_software_version,
                device_service_history_view.service_date AS device_emerald_software_version_view_lastest_sw_update,
                device_service_history_view.technician_email AS device_emerald_software_version_view_service_person ";
    }
    $query .= " FROM 
                (
                  select * from
                  device_service_history_view
                  order by service_date desc
                )
                device_service_history_view
                LEFT JOIN view_software on view_software.nid = device_service_history_view.to_component_nid
                LEFT JOIN content_field_hw_list on content_field_hw_list.nid = view_software.nid 
                AND content_field_hw_list.vid = view_software.vid 
                LEFT JOIN view_hardware on view_hardware.nid = content_field_hw_list.field_hw_list_nid
                LEFT JOIN content_field_device_type on content_field_device_type.nid = view_hardware.nid
                LEFT JOIN content_type_hardware on content_type_hardware.nid = view_hardware.nid
                AND content_type_hardware.vid =  view_hardware.vid "; 
    $query .= ' where (device_service_history_view.productline_nid = %d) ';
    $args = array();
    $args[] = $post['productline_nid'];
    //CASE I , if serial, then device type and customer is optional
    $view->base_table = str_replace('_software_version_view', '_software_version_table', $view->base_table); 
    if (isset($post['deviceserial']) && !empty($post['deviceserial'])) {
      $query_where .= " AND device_service_history_view.deviceserial = '%s' ";
      $args[] = $post['deviceserial'];

      if (isset($post['devicetype_nid']) && !empty($post['devicetype_nid'])) {
        $query_where .= " AND device_service_history_view.devicetype_nid = %d ";
        $args[] = $post['devicetype_nid'];
      }

      if (isset($post['customer_nid']) && !empty($post['customer_nid'])) {
        $query_where .= " AND device_service_history_view.customername = '%s' ";
        $args[] = $post['customer_nid'];
      }
    } else {
      //CASE II, if not serial #, then (Customer AND/OR Country)
      if (isset($post['customer_nid']) && !empty($post['customer_nid'])) {
        $query_where .= " AND device_service_history_view.customername = '%s' ";
        $args[] = $post['customer_nid'];
      }
      //And or Or Condition
      $condition = " AND ";
      if ($post['hid_condition'] == 'or') {
        $condition = " OR ";
      }
      if (isset($post['country']) && !empty($post['country'])) {
        $query_where .= $condition . " device_service_history_view.country_nid = %d ";
        $args[] = $post['country'];
      }
    }
    $query .=  $query_where;
    //AND content_type_hardware.nid <> '' removed for GATEWAY-2220
    $query .= " AND device_service_history_view.to_component_nid <> ''
                AND view_software.nid <> '' 
                group by device_service_history_view.deviceserial 
                order by servicehistory_nid desc";
    $view->build_info['query'] = $query; // wrapped for legibility
    $view->build_info['query_args'] = $args;
    $view->build_info['count_query'] = $query; 
  }
}

//*****************************************************************************/
//
// Individual Reports
//
//*****************************************************************************/

/**
 * sprint 7
 * Used for Service Records
 */
function service_records_report_form() {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter4.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  $post = array();
  $post['form_id'] = 'service_records_report_form';
  $form = array();
  $form['product_line'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['default_cot'],
    '#options' => get_productline(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-device-type',
      'method' => 'replace',
      'path' => 'ahah-report-pl-dtype-exposed-callback',
    )
  );
  $form['device_type'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_device_type(),
  );
  $form['country'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_country(),
  );
  $form['customer_name'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['customer_name']['#autocomplete_path'] = 'covidien/reports/filtertype/customername/autocomplete';
  $form['customer_name']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/filtertype/customername", "edit-customer-name");',
  );
  $form['device_type_hidden'] = array(
    '#type' => 'hidden',
  );

  if (is_numeric($_SESSION['default_dtype'])) {
    $form['device_type_hidden']['#default_value'] = $_SESSION['default_dtype'];
  }
  $form['customer_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['account_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['account_number']['#autocomplete_path'] = 'covidien/reports/accountnumber/autocomplete';
  $form['account_number']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/accountnumber", "edit-account-number");',
    'onblur' => "setcustomername('" . $form['customer_name']['#autocomplete_path'] . "');",
  );
  $form['account_number_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['servicetype'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_servicetype(),
  );
  $form['ds_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['ds_number']['#autocomplete_path'] = 'covidien/reports/autocomplete';
  $form['ds_number']['#attributes'] = array(
    'onfocus' => 'parentvalues("reports");',
  );
  $form['from_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#maxlength' => 10,
    '#date_format' => 'm/d/Y',
    '#date_year_range' => '-5:+6',
  );
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#date_format' => 'm/d/Y',
    '#maxlength' => 10,
    '#date_year_range' => '-5:+6',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
  );
  return $form;
}

/**
 * Used for total Devices Report
 */
function total_devices_report_form() {
  $post = array();
  $post['form_id'] = 'total_devices_report';
  $form = array();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
  );
  return $form;
}

function total_devices_report_form_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $url = "/covidien/report/7?v=7";
// Drupal goto encode the values and views filter not able to process.
  header('location:' . $base_url . $url);
  exit;
}

/**
 * Helper function for covidien_reports_theme
 * Define the form for reports filter.
 */
function software_upgrade_report_form() {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter2.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  $form = array();
  $form['product_line'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['default_cot'],
    '#options' => get_productline(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-device-type',
      'method' => 'replace',
      'path' => 'ahah-report-pl-dtype-exposed-callback',
    )
  );

  $form['device_type'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_device_type(),
  );

  $form['customer_name'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );

  $form['condition_button'] = array(
    '#type' => 'button',
    '#value' => t('and'),
    '#id' => t('condition_button'),
//       '#attributes' => array('onclick' => 'this.value= this.value=="or"?"and":"or" ; return false ;'),
    '#attributes' => array('onclick' => 'return change_condeition();'),
    '#button_type' => 'submit',
    '#submit' => FALSE,
  );

  $form['hid_condition'] = array(
    '#type' => 'hidden',
    '#id' => t('hid_condition'),
    '#value' => 'and',
    '#name' => t('hid_condition'),
    '#default_value' => '',
  );

  $form['customer_name']['#autocomplete_path'] = 'covidien/reports/customername/autocomplete';
  $form['customer_name']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/customername", "edit-customer-name");',
  );
  $form['device_type_hidden'] = array(
    '#type' => 'hidden',
  );

  if (is_numeric($_SESSION['default_dtype'])) {
    $form['device_type_hidden']['#default_value'] = $_SESSION['default_dtype'];
  }
  $form['customer_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['account_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['account_number']['#autocomplete_path'] = 'covidien/reports/accountnumber/autocomplete';
  $form['account_number']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/accountnumber", "edit-account-number");',
    'onblur' => "setcustomername('" . $form['customer_name']['#autocomplete_path'] . "');",
  );
  $form['account_number_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['from_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#date_format' => 'm/d/Y',
    '#maxlength' => 10,
    '#date_year_range' => '-5:+6',
  );
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#date_format' => 'm/d/Y',
    '#maxlength' => 10,
    '#date_year_range' => '-5:+6',
  );
  $form['pass_fail_status'] = array(
    '#type' => 'checkboxes',
    '#default_value' => array('pass', 'fail', 'notattempted'),
    '#options' => array(
      'pass' => t('Pass'),
      'fail' => t('Fail'),
      'notattempted' => t('Download Only'),
    ),
  );
  $form['country'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_country(),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
  );
  return $form;
}

/**
 * Helper function for covidien_reports_theme
 * Define the form for reports filter.
 */
function device_configuration_report_form() {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter1.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  $form = array();
  $form['product_line'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['default_cot'],
    '#options' => get_productline(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-device-type',
      'method' => 'replace',
      'path' => 'ahah-report-pl-dtype-exposed-callback',
    )
  );
  $form['device_type'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_device_type(),
    '#attributes' => array('onchange' => 'get_software();get_report_hardware();',)
  );
  $form['customer_name'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['customer_name']['#autocomplete_path'] = 'covidien/reports/customername/autocomplete';
  $form['customer_name']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/customername", "edit-customer-name");',
  );
  $form['device_type_hidden'] = array(
    '#type' => 'hidden',
  );

  //TODO add 'and' 'or'
  $form['condition_button'] = array(
    '#type' => 'button',
    '#value' => t('and'),
    '#id' => t('condition_button'),
    //       '#attributes' => array('onclick' => 'this.value= this.value=="or"?"and":"or" ; return false ;'),
    '#attributes' => array('onclick' => 'return change_condeition();'),
    '#button_type' => 'submit',
    '#submit' => FALSE,
  );

  $form['hid_condition'] = array(
    '#type' => 'hidden',
    '#id' => t('hid_condition'),
    '#value' => 'and',
    '#name' => t('hid_condition'),
    '#default_value' => '',
  );


  if (is_numeric($_SESSION['default_dtype'])) {
    $form['device_type_hidden']['#default_value'] = $_SESSION['default_dtype'];
  }
  $form['customer_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['account_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['account_number']['#autocomplete_path'] = 'covidien/reports/accountnumber/autocomplete';
  $form['account_number']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/accountnumber", "edit-account-number");',
    'onblur' => "setcustomername('" . $form['customer_name']['#autocomplete_path'] . "');",
  );
  $form['software_name'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_software_name(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-part-number',
      'method' => 'replace',
      'path' => 'ahah-report-part-number-exposed-callback',
    ),
  );
  $form['software_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['part_number'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_part_number(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-version',
      'method' => 'replace',
      'path' => 'ahah-report-version-exposed-callback',
    ),
  );
  $form['part_number_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['version'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_version(),
  );
  $form['version_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['hw_name'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_hw_name(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-hw-part-number',
      'method' => 'replace',
      'path' => 'ahah-report-hw-part-number-exposed-callback',
    ),
  );
  $form['hw_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['hw_part_number'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_hwpart_number(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-hw-version',
      'method' => 'replace',
      'path' => 'ahah-report-hw-version-exposed-callback',
    ),
  );
  $form['hw_part_number_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['hw_version'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_hwversion(),
  );
  $form['hw_version_hidden'] = array(
    '#type' => 'hidden',
  );

  $form['condition_button'] = array(
    '#type' => 'button',
    '#value' => t('and'),
    '#id' => t('condition_button'),
    //       '#attributes' => array('onclick' => 'this.value= this.value=="or"?"and":"or" ; return false ;'),
    '#attributes' => array('onclick' => 'return change_condeition();'),
    '#button_type' => 'submit',
    '#submit' => FALSE,
  );

  $form['hid_condition'] = array(
    '#type' => 'hidden',
    '#id' => t('hid_condition'),
    '#value' => 'and',
    '#name' => t('hid_condition'),
    '#default_value' => '',
  );
  $form['country'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_country(),
  );
  $form['ds_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'covidien/reports/autocomplete',
    '#attributes' => array('onfocus' => 'parentvalues("reports");'),
    '#autocomplete_path' => 'covidien/reports/autocomplete',
    '#attributes' => array('onfocus' => 'parentvalues("reports");'),
  );
  $form['configuration_name'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#options' => get_configuration_name(),
  );
//  $form['configuration_version'] = array(
//    '#type' => 'select',
//    '#default_value' => '',
//    '#options' => get_configuration_version(),
//  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
    '#attributes' => array('onclick' => 'return report_validate(1);',)
  );
  return $form;
}

function get_configuration_name() {
  $result = get_configuration_name_query();
  $names['all'] = '';
  while ($row = db_fetch_object($result)) {
    $names[$row->title] = $row->title;
  }
  return $names;
}

function get_configuration_version() {
  $result = get_configuration_version_query();
  $versions['all'] = '';
  while ($row = db_fetch_object($result)) {
    $versions[$row->ver] = $row->ver;
  }
  return $versions;
}

/**
 * Implements hook_form_validate for device_configuration_report_form
 */
function device_configuration_report_form_validate(&$form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter1.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  $filter = $form_state['values'];
  if ($filter['device_type'] == 'all') {
    form_set_error('device_type', t("Invalid Device Type"));
  }
//  if (!covidien_ui_input_validate($filter['customer_name'], true)) {
//    form_set_error('customer_name', t("Invalid Customer Name"));
//  }
  if (!covidien_ui_input_validate($filter['account_number'])) {
    form_set_error('account_number', t("Invalid Customer Account Number"));
  }
  if (!covidien_ui_input_validate($filter['ds_number'])) {
    form_set_error('ds_number', t("Invalid Device Serial Number"));
  }
}

/**
 * Implements hook_form_submit for device_configuration_report_form
 */
function device_configuration_report_form_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $url = "/covidien/report/1?v=1";
  if ($filter['device_type'] != 'all') {
    $deviceTypeName = get_nodetitle($filter['device_type']);
    if ($deviceTypeName == 'SCD 700') {
      $url = "/covidien/report/1/scd?v=1";
    } elseif ($deviceTypeName == 'Valleylab LS10') {
      $url = "/covidien/report/1/emerald?v=1";
    }
    $url .= "&devicetype_nid=" . $filter['device_type'];
  }
  if ($filter['product_line'] != 'all') {
    $url .= "&productline_nid=" . $filter['product_line'];
  }
  if ($filter['customer_name'] != '') {
    $url .= "&customer_nid=" . $filter['customer_name'];
  }
  if ($filter['account_number'] != '') {
    $url .= "&accountnumber=" . $filter['account_number'];
  }
  if ($filter['country'] != 'all') {
    $url .= "&country=" . $filter['country'];
  }
  if ($filter['hw_name'] != 'all') {
    $url .= "&hardware_name=" . $filter['hw_name'];
  }
  if ($filter['hw_part_number'] != 'all') {
    $url .= "&hardware_part=" . $filter['hw_part_number'];
  }
  if ($filter['hw_version'] != 'all') {
    $url .= "&hardware_version=" . $filter['hw_version'];
  }
  if ($filter['software_name'] != 'all') {
// Changed exposefilter
    $url .= "&software_name=" . $filter['software_name'];
  }
  if ($filter['part_number'] != 'all') {
    $url .= "&software_part=" . $filter['part_number'];
  }
  if ($filter['version'] != 'all') {
    $url .= "&software_version=" . $filter['version'];
  }
  if ($filter['configuration_name'] != 'all') {
    $url .= "&configuration_name=" . $filter['configuration_name'];
  }
  if ($filter['configuration_version'] != 'all') {
    $url .= "&configuration_version=" . $filter['configuration_version'];
  }

  $url .= "&deviceserial=" . $filter['ds_number'];
  $url .= "&hid_condition=" . check_plain($_POST['hid_condition']);

// Drupal goto encode the values and views filter not able to process.
  header('location:' . $base_url . $url);
  exit;
}

/**
 * Implements hook_form_validate for software_upgrade_report_form
 */
function software_upgrade_report_form_validate(&$form, &$form_state) {
  form_set_error(NULL, '', TRUE);
  drupal_get_messages();
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter2.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  $filter = $form_state['values'];
  if ($filter['device_type'] == 'all') {
    form_set_error('device_type', t("Invalid Device Type"));
  }
  if (empty($filter['customer_name']) && $filter['country'] == 'all') {
    form_set_error('customer_name', t("You must select Customer Name AND/OR Country"));
  }
  if (!covidien_ui_input_validate($filter['account_number'])) {
    form_set_error('account_number', t("Invalid Customer Account Number"));
  }
  if (covidien_ui_input_validate($filter['from_date'], true) && covidien_ui_input_validate($filter['to_date'], true)) {
    $isdate_valid = FALSE;
    $isdate_valid = date_is_valid($filter['from_date'], DATE_DATETIME, array('year', 'month', 'day'));
    if (!covidien_ui_input_validate($filter['from_date'], true) && !$isdate_valid) {
      form_set_error('from_date', t('Invalid From Date'));
    }
    $isdate_valid1 = FALSE;
    $isdate_valid1 = date_is_valid($filter['to_date'], DATE_DATETIME, array('year', 'month', 'day'));
    if (!covidien_ui_input_validate($filter['to_date']) && !$isdate_valid1) {
      form_set_error('to_date', t('Invalid To Date'));
    }
    if ($isdate_valid && $isdate_valid1) {
      $from_date = strtotime($filter['from_date']);
      $to_date = $filter['to_date'] ? strtotime($filter['to_date']) : time();
      if ($to_date < $from_date) {
        form_set_error('to_date', t('Invalid From/To Date'));
      }
    }
  }
}

/**
 * Implements hook_form_submit for software_upgrade_report_form
 */
function software_upgrade_report_form_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $url = "/covidien/report/2?v=2";
  if ($filter['product_line'] != 'all') {
    $url .= "&productline_nid=" . $filter['product_line'];
  }
  if ($filter['device_type'] != 'all') {
    $url .= "&devicetype_nid=" . $filter['device_type'];
  }
  if ($filter['customer_name'] != 'all') {
    $url .= "&customer_nid=" . $filter['customer_name'];
  }


  $url .= "&hid_condition=" . check_plain($_POST['hid_condition']);

  if ($filter['account_number'] != 'all') {
    $url .= "&accountnumber=" . $filter['account_number'];
  }
  if ($filter['country'] != 'all') {
    $url .= "&country=" . $filter['country'];
  }
  $pass_fail_status_pass = (string) $filter['pass_fail_status']['pass'];
  $pass_fail_status_fail = (string) $filter['pass_fail_status']['fail'];
  $pass_fail_status_na = (string) $filter['pass_fail_status']['notattempted'];
  $surl = '';
  if ($pass_fail_status_na != '0') {
//download only 
    $surl .= "&SW_upgrade_status=" . $pass_fail_status_na;
  }

  if ($pass_fail_status_fail != '0') {
//only fail
    if ($surl == '') {
      $surl = "&SW_upgrade_status=" . $pass_fail_status_fail;
    } else {
      $surl.= ',' . $pass_fail_status_fail;
    }
  }

  if ($pass_fail_status_pass != '0') {
//only pass
    if ($surl == '') {
      $surl = "&SW_upgrade_status=installed";
    } else {
      $surl .= ",installed";
    }
  }
  $url.= $surl;

  if ($filter['from_date'] != '') {
    $url .= "&from_date=" . $filter['from_date'];
  }
  if ($filter['to_date'] != '') {
    $to_date = strtotime($filter['to_date']);
    $url .= "&to_date=" . date('Y-m-d', $to_date) . ' 23:59:59';
  } else {
    $url .= "&to_date=" . date('Y-m-d', time()) . ' 23:59:59';
  }
// Drupal goto encode the values and views filter not able to process.
  header('location:' . $base_url . $url);
  exit;
}

/**
 * Implements template_preprocess_hook
 * Used to set the footer on reports
 */
function template_preprocess_covidien_reports_footer(&$vars) {
  $vars['report_footer'] = t("Covidien Report");
}

/**
 * Implements preprocess form
 * Used to set the template variabales for device_configuration_report_form
 */
function covidien_reports_preprocess_device_configuration_report_form(&$vars, $hook) {
  drupal_set_title(t('Select Report and Set Report Parameters'));
  $vars['title'] = t('Select Report and Set Report Parameters');
  $vars['product_line'] = drupal_render($vars['form']['product_line']);
  $vars['device_type'] = drupal_render($vars['form']['device_type']);
  $vars['customer_name'] = drupal_render($vars['form']['customer_name']);
  $vars['account_number'] = drupal_render($vars['form']['account_number']);
  $vars['software_name'] = drupal_render($vars['form']['software_name']);
  $vars['part_number'] = drupal_render($vars['form']['part_number']);
  $vars['ds_number'] = drupal_render($vars['form']['ds_number']);
  $vars['version'] = drupal_render($vars['form']['version']);
  $vars['country'] = drupal_render($vars['form']['country']);

  $vars['condition_button'] = drupal_render($vars['form']['condition_button']);
  $vars['hid_condition'] = drupal_render($vars['form']['hid_condition']);
  $vars['configuration_name'] = drupal_render($vars['form']['configuration_name']);
//  $vars['configuration_version'] = drupal_render($vars['form']['configuration_version']);

  $vars['hw_name'] = drupal_render($vars['form']['hw_name']);
  $vars['hw_part_number'] = drupal_render($vars['form']['hw_part_number']);
  $vars['hw_version'] = drupal_render($vars['form']['hw_version']);

  $vars['search_button'] = drupal_render($vars['form']['submit']);

  // this is must
  $vars['form_extras'] = drupal_render($vars['form']);


  $vars['report_menu'] = get_all_report_menu();
}

/**
 * Implements preprocess form
 * Used to set the template variabales for total_devices_report_form
 */
function covidien_reports_preprocess_total_devices_report_form(&$vars, $hook) {

  $vars['search_button'] = drupal_render($vars['form']['submit']);
// this is must
  $vars['form_extras'] = drupal_render($vars['form']);
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportListByProductLine(); // Get all reports related to the Product line
// build menu
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      if (arg(3) == $key) {
        $class = array('attributes' => array('style' => 'color:#000000'));
      }
      $vars['report_menu'] .= l($val, "covidien/reports/filter/$key", $class) . "<br />";
    }
  }
}

/**
 * Implements preprocess form
 * Used to set the template variabales for software_upgrade_report_form
 */
function covidien_reports_preprocess_software_upgrade_report_form(&$vars, $hook) {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_set_title(t('Select Report and Set Report Parameters'));
  $vars['title'] = t('Select Report and Set Report Parameters');
  $vars['product_line'] = drupal_render($vars['form']['product_line']);
  $vars['device_type'] = drupal_render($vars['form']['device_type']);
  $vars['customer_name'] = drupal_render($vars['form']['customer_name']);

  $vars['condition_button'] = drupal_render($vars['form']['condition_button']);
  $vars['hid_condition'] = drupal_render($vars['form']['hid_condition']);

  $vars['account_number'] = drupal_render($vars['form']['account_number']);
  $vars['from_date'] = drupal_render($vars['form']['from_date']);
  $vars['to_date'] = drupal_render($vars['form']['to_date']);
  $vars['pass_fail_status'] = drupal_render($vars['form']['pass_fail_status']);
  $vars['country'] = drupal_render($vars['form']['country']);
  $vars['search_button'] = drupal_render($vars['form']['submit']);
// this is must
  $vars['form_extras'] = drupal_render($vars['form']);
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportListByProductLine(); // Get all reports related to the Product line
// build menu
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      if (arg(3) == $key) {
        $class = array('attributes' => array('style' => 'color:#000000'));
      }
      $vars['report_menu'] .= l($val, "covidien/reports/filter/$key", $class) . "<br />";
    }
  }
}

/**
 * sprint 7
 * @Reports navigation
 * @File : covidien_activity.module
 * @Function : allReportList
 * @Access Policy
 * @content Type : Product Line Report
 */
function covidien_reports_preprocess_service_records_report_form(&$vars, $hook) {
  drupal_set_title(t('Select Report and Set Report Parameters'));
  $vars['title'] = t('Select Report and Set Report Parameters');
  $vars['product_line'] = drupal_render($vars['form']['product_line']);
  $vars['device_type'] = drupal_render($vars['form']['device_type']);
  $vars['country'] = drupal_render($vars['form']['country']);
  $vars['servicetype'] = drupal_render($vars['form']['servicetype']);
  $vars['customer_name'] = drupal_render($vars['form']['customer_name']);
  $vars['account_number'] = drupal_render($vars['form']['account_number']);
  $vars['ds_number'] = drupal_render($vars['form']['ds_number']);
  $vars['from_date'] = drupal_render($vars['form']['from_date']);
  $vars['to_date'] = drupal_render($vars['form']['to_date']);
  $vars['search_button'] = drupal_render($vars['form']['submit']);
// this is must
  $vars['form_extras'] = drupal_render($vars['form']);
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportListByProductLine(); // Get all reports related to the Product line
// build menu
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      if (arg(3) == $key) {
        $class = array('attributes' => array('style' => 'color:#000000'));
      }
      $vars['report_menu'] .= l($val, "covidien/reports/filter/$key", $class) . "<br />";
    }
  }
}

/**
 * sprint 7
 * @Reports navigation
 * @File : covidien_activity.module
 * @Function : allReportList
 * @Access Policy
 * @content Type : Product Line Report
 */
function covidien_reports_preprocess_component_discrepancy_report_form(&$vars, $hook) {
  drupal_set_title(t('Select Report and Set Report Parameters'));
  $vars['title'] = t('Select Report and Set Report Parameters');
  $vars['product_line'] = drupal_render($vars['form']['product_line']);
  $vars['device_type'] = drupal_render($vars['form']['device_type']);
  $vars['country'] = drupal_render($vars['form']['country']);

  $vars['condition_button'] = drupal_render($vars['form']['condition_button']);
  $vars['hid_condition'] = drupal_render($vars['form']['hid_condition']);

  $vars['customer_name'] = drupal_render($vars['form']['customer_name']);
  $vars['account_number'] = drupal_render($vars['form']['account_number']);
  $vars['ds_number'] = drupal_render($vars['form']['ds_number']);
  $vars['search_button'] = drupal_render($vars['form']['submit']);
// this is must
  $vars['form_extras'] = drupal_render($vars['form']);
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportListByProductLine(); // Get all reports related to the Product line
// build menu
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      if (arg(3) == $key) {
        $class = array('attributes' => array('style' => 'color:#000000'));
      }
      $vars['report_menu'] .= l($val, "covidien/reports/filter/$key", $class) . "<br />";
    }
  }
}

/**
 * Helper function for audit_trial_report
 */
function get_productline() {
  global $user;
  $pl_nid = $user->pl_nid;
  $product_arr = array();
//  $product_arr['all'] = 'All';
  if ($pl_nid == 'all') {
    $query = get_productline_query(0);
    $product_line = db_query($query);
  } elseif ($pl_nid != '') {
    $query = get_productline_query(1);
    $product_line = db_query($query, $pl_nid);
  }
  while ($val = db_fetch_object($product_line)) {
    $product_arr[$val->nid] = $val->title;
  }
  return $product_arr;
}

/**
 * Helper function for report_dtype_search_exposed_filters_callback.
 */
function get_device_type($product_line = '') {
  $dtype_arr = array();
  $dtype_arr['all'] = '';
  if ($product_line != '') {
    $product_line = __covidien_access_pl_nid($product_line);
    $query = get_device_type_query();
    $dtype_res = db_query($query, $product_line);
    while ($val = db_fetch_object($dtype_res)) {
      $dtype_arr[$val->devicetype_nid] = $val->device_type;
    }
  }
  return $dtype_arr;
}

/**
 * Implements callback functio for ahah-report-pl-dtype-exposed-callback
 */
function report_dtype_search_exposed_filters_callback() {
  $product_line = check_plain($_POST['product_line']);
  $option = get_device_type($product_line);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
    '#value' => $_SESSION['default_dtype'],
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Implements callback function for ahah-report-customer-name-exposed-callback
 */
function report_customer_name_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $option = get_customer_name($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Implements callback function for ahah-report-account-number-exposed-callback
 */
function report_account_number_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $option = get_account_number($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Implements call back function for ahah-report-software-name-exposed-callback
 */
function report_software_name_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $_SESSION['default_dtype'] = $post['device_type'];
  if ($post['device_type'] == '') {
    $option_arr = array();
    $option_arr['all'] = '';
    $option = $option_arr;
  } else {
    $option = get_software_name($post);
  }
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Implements call back function for ahah-report-part-number-exposed-callback
 */
function report_part_number_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $_SESSION['default_dtype'] = $post['device_type'];
  $option = get_part_number($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Implements call back function for ahah-report-version-exposed-callback
 */
function report_version_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $_SESSION['default_dtype'] = $post['device_type'];
  $option = get_version($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Helper function for report_customer_name_exposed_filters_callback
 */
function get_customer_name($post = array()) {
  $option_arr = array();
  $product_line = $post['product_line'];
  $device_type = $post['device_type'];
  $customer_str = $post['customer_str'];
  global $user;
  $query = get_customer_name_query($post, $user);
  $option_res = db_query($query, $customer_str);
  while ($val = db_fetch_object($option_res)) {
    $option_arr[$val->customer_name] = $val->customer_name;
  }
  return $option_arr;
}

/**
 * Helper function for report_account_number_exposed_filters_callback
 */
function get_account_number($post = array(), $rtype = '') {
  global $user;
  $pl_nid = $user->pl_nid;
  $option_arr = array();
  $product_line = $post['product_line'];
//$device_type = $post['device_type'];
  $customer_name = $post['customer_name'];
  $account_str = $post['account_str'];
  if ($customer_name == '') {
    $query = get_account_number_query(0, $post);
    $option_res = db_query($query, $account_str);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[trim($val->account_number)] = $val->account_number;
    }
  } else {
    $query = get_account_number_query(1, $post);
    $option_res = db_query($query, $customer_name, $account_str);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[trim($val->account_number)] = $val->account_number;
    }
  }
  return $option_arr;
}

/**
 * Helper function for report_software_name_exposed_filters_callback
 */
function get_software_name($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  $product_line = $post['product_line'];
  $device_type = $post['device_type'];
  $customer_name = $post['customer_name'];
  if ($device_type != '') {
    $query = get_software_name_query();
    $option_res = db_query($query, $device_type);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[strtolower(trim($val->software_name))] = $val->software_name;
    }
  }
  return $option_arr;
}

/**
 * Helper function to get the part number
 */
function get_part_number($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  $product_line = $post['product_line'];
  $device_type = $post['device_type'];
  $customer_name = $post['customer_name'];
  $software_name = $post['software_name'];
  $software_name = isvalid_software_name($software_name, $post);
  if ($product_line > 0 && $device_type > 0 && $software_name != '') {
    $query = get_part_number_query();
    $option_res = db_query($query, $software_name);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[trim($val->field_sw_part_value)] = $val->field_sw_part_value;
    }
  }
  return $option_arr;
}

/**
 * Helper function to get the device serial number
 */
function get_ds_number($post = array()) {
  global $user;
  $option_arr = array();
  $product_line = $post['product_line'];
  $device_type = $post['device_type'];
  $device_type = __covidien_access_devices_nid($device_type);
  $software_name = $post['software_name'];
  $software_name = isvalid_software_name($software_name, $post);
  $part_number = $post['part_number'];
  $part_number = isvalid_part_number($part_number, $post);
  $version = $post['version'];
  $string = $post['string'];
  $product_line = __covidien_access_pl_nid($product_line);
  $customer_name = $post['customer_name'];
  if ($product_line > 0 && $device_type > 0) {
    $query = get_ds_number_query($user, $device_type, $software_name, $part_number, $version, $string);
    $option_res = db_query($query['query'], $query['arg']);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[trim($val->field_device_serial_number_value)] = $val->field_device_serial_number_value;
    }
  }
  return $option_arr;
}

/**
 * Helper function to get the version for the software
 */
function get_version($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  $product_line = $post['product_line'];
  $device_type = $post['device_type'];
  $customer_name = $post['customer_name'];
  $software_name = $post['software_name'];
  $part_number = $post['part_number'];
  $version = $post['version'];
//$software_name = isvalid_software_name($software_name, $post);
//$part_number = isvalid_part_number($part_number, $post);
//note: Query changed based on node title
  if ($product_line > 0 && $device_type > 0 && $software_name != '' && $part_number != '') {
    $query = get_version_query();
    $option_res = db_query($query, $software_name, $part_number);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[trim($val->field_sw_version_value)] = $val->field_sw_version_value;
    }
  }
  return $option_arr;
}

/**
 * helper function to validate data.
 */
function isvalid_customer_name($arg = '', $post = array()) {
  $retarg = 0;
  $customer_res = get_customer_name($post);
  if (count($customer_res) > 0) {
    foreach ($customer_res as $key => $val) {
      if ($key == $arg) {
        $retarg = $arg;
      }
    }
  }
  return $retarg;
}

/**
 * Helper function to validate
 */
function isvalid_software_name($arg = '', $post = array()) {
  $retarg = '';
  $customer_res = get_software_name($post);
  if (count($customer_res) > 0) {
    foreach ($customer_res as $key => $val) {
      if ($key == $arg) {
        $retarg = $arg;
      }
    }
  }
  return $retarg;
}

/**
 * Helper function to validate
 */
function isvalid_part_number($arg = '', $post = array()) {
  $retarg = '';
  $customer_res = get_part_number($post);
  if (count($customer_res) > 0) {
    foreach ($customer_res as $key => $val) {
      if ($key == $arg) {
        $retarg = $arg;
      }
    }
  }
  return $retarg;
}

/**
 * Helper function to get node title
 */
function get_nodetitle($nid = 0) {
  if ($nid > 0) {
    $qry = get_nodetitle_query();
    $res = db_query($qry, $nid);
    $rec = db_fetch_object($res);
    return $rec->title;
  } else {
    return '';
  }
}

/**
 * Helper function to generate filter data
 * report_6
 */
function get_report_filter($get = array()) {
  $get = filter_xss_arr($get);
  if ($get['q'] != '') {
    $qarr = explode('/', $get['q']);
    if ($qarr[0] == 'covidien') {
      $_SESSION['report_filter'] = $get;
    }
  }
  $get = $_SESSION['report_filter'];
  $productline = get_nodetitle($get['productline_nid']);
  if ($productline == '') {
    $productline = t('All');
  }
  $report_header[] = array(
    'label' => t("Class of Trade:"),
    'value' => $productline,
  );
  if (($get['v'] == 1) || ($get['v'] == 2) || ($get['v'] == 3) || ($get['v'] == 4) || ($get['v'] == 8)) {
    $devicetype = get_nodetitle($get['devicetype_nid']);
    if ($devicetype == '') {
      $devicetype = t('All');
    }
    $report_header[] = array(
      'label' => t("Device Type:"),
      'value' => $devicetype,
    );
    if (($get['v'] == 3) || ($get['v'] == 4) || ($get['v'] == 8)) {
      $deviceserial = $get['deviceserial'];
      if ($deviceserial == '') {
        $deviceserial = t('All');
      }
      $report_header[] = array(
        'label' => t("Device Serial Number:"),
        'value' => $deviceserial,
      );
    }
//base condition
    $customer = $get['customer_nid'];
    if ($customer == '') {
      $customer = t('All');
    }
    $report_header[] = array(
      'label' => t("Customer Name:"),
      'value' => $customer,
      //'colspan' => 2,
    );
    $accountnumber = $get['accountnumber'];
    if ($accountnumber == '') {
      $accountnumber = t('All');
    }
    $report_header[] = array(
      'label' => t("Customer Account Number:"),
      'value' => $accountnumber,
    );
    $country = get_nodetitle($get['country']);
    if ($country == '') {
      $country = t('All');
    }
    $report_header[] = array(
      'label' => t("Country:"),
      'value' => $country,
    );
//base condition
    if ($get['v'] == 4) {
      $servicetype = get_nodetitle($get['servicetype_nid']);
      if ($servicetype == '') {
        $servicetype = t('All');
      }
      $report_header[] = array(
        'label' => t("Service Type:"),
        'value' => $servicetype,
      );
      $from_date = $get['from_date'];
      if ($from_date != '') {
        $from_date = date('m/d/Y', strtotime($from_date));
      }
      if ($from_date == '') {
        $from_date = t('All');
      }
      $report_header[] = array(
        'label' => t("From Date:"),
        'value' => $from_date,
      );
      $to_date = $get['to_date'];
      if ($to_date != '') {
        $to_date = date('m/d/Y', strtotime($to_date));
      }
      if ($to_date == '') {
        $to_date = date('m/d/Y', time());
      }
      $report_header[] = array(
        'label' => t("To Date:"),
        'value' => $to_date,
      );
    } elseif ($get['v'] == 1) {
      $deviceserial = $get['deviceserial'];
      if ($deviceserial == '') {
        $deviceserial = t('All');
      }
      $report_header[] = array(
        'label' => t("Device Serial Number:"),
        'value' => $deviceserial,
        'colspan' => 2,
      );
//Hardware name from url
      $hardware = $get['hardware_name'];
      if ($hardware == '') {
        $hardware = t('All');
      }
      $report_header[] = array(
        'label' => t("Hardware Name:"),
        'value' => $hardware,
      );
      $hardware_version = $get['hardware_version'];
      if ($hardware_version == '') {
        $hardware_version = t('All');
      }
      $report_header[] = array(
        'label' => t("Hardware Revision:"),
        'value' => $hardware_version,
      );
      $hardware_part = $get['hardware_part'];
      if ($hardware_part == '') {
        $hardware_part = t('All');
      }
      $report_header[] = array(
        'label' => t("Hardware Part #:"),
        'value' => $hardware_part,
      );
//Software name from url
      $software = $get['software_name'];
      if ($software == '') {
        $software = t('All');
      }
      $report_header[] = array(
        'label' => t("Software Name:"),
        'value' => $software,
      );
      $software_version = $get['software_version'];
      if ($software_version == '') {
        $software_version = t('All');
      }
      $report_header[] = array(
        'label' => t("Software Version:"),
        'value' => $software_version,
      );
      $software_part = $get['software_part'];
      if ($software_part == '') {
        $software_part = t('All');
      }
      $report_header[] = array(
        'label' => t("Software Part #:"),
        'value' => $software_part,
      );
      $report_header[] = array(
        'label' => t("Configuration Name:"),
        'value' => $get['configuration_name'] ? $get['configuration_name'] : t('All'),
      );
      $report_header[] = array(
        'label' => t("Configuration Version:"),
        'value' => $get['configuration_version'] ? $get['configuration_version'] : t('All'),
      );
    } elseif ($get['v'] == 2) {
      $from_date = $get['from_date'];
      if ($from_date != '') {
        $from_date = date('m/d/Y', strtotime($from_date));
      }
      if ($from_date == '') {
        $from_date = t('All');
      }
      $report_header[] = array(
        'label' => t("From Date:"),
        'value' => $from_date,
      );

      $SW_upgrade_status = $get['SW_upgrade_status'];
      $tmp = explode(',', $SW_upgrade_status);
      $print_status = '';
      global $sw_upgrade_status_kv;
      if ($SW_upgrade_status == '' || count($tmp) == count($sw_upgrade_status_kv)) {
        $print_status = t('All');
      } else {
        foreach ($tmp as $val) {
          if ($print_status != '') {
            $print_status.=', ' . $sw_upgrade_status_kv[$val];
          } else {
            $print_status = $sw_upgrade_status_kv[$val];
          }
        }
      }
      $report_header[] = array(
        'label' => t("Status:"),
        'value' => $print_status,
      );

      $to_date = $get['to_date'];
      if ($to_date != '') {
        $to_date = date('m/d/Y', strtotime($to_date));
      }
      if ($to_date == '') {
        $to_date = date('m/d/Y', time());
      }
      $report_header[] = array(
        'label' => t("To Date:"),
        'value' => $to_date,
      );
    }
  } elseif ($get['v'] == 6) {
    $devicetype = get_nodetitle($get['devicetype_nid']);
    if ($devicetype == '') {
      $devicetype = t('All');
    }
    $report_header[] = array(
      'label' => t("Device Type:"),
      'value' => $devicetype,
    );
    $customer = $get['customername'];
    if ($customer == '') {
      $customer = t('All');
    }
    $report_header[] = array(
      'label' => t("Customer Name:"),
      'value' => $customer,
    );
//colspan=2
    $report_header[] = array(
      'label' => "",
      'value' => "",
    );
    $accountnumber = $get['accountnumber'];
    if ($accountnumber == '') {
      $accountnumber = t('All');
    }
    $report_header[] = array(
      'label' => t("Customer Account Number:"),
      'value' => $accountnumber,
    );
//colspan=2
    $report_header[] = array(
      'label' => "",
      'value' => "",
    );
    $trainer_nid = get_nodetitle($get['trainer_nid']);
    if ($trainer_nid == '') {
      $trainer_nid = t('All');
    }
    $report_header[] = array(
      'label' => t("Trainer User ID:"),
      'value' => $trainer_nid,
    );
    if ($training_status == 0 || $training_status == 1) {
      $options = content_allowed_values(content_fields('field_active_flag'), FALSE);
      $training_status = $options[$get['training_status']];
    }
    if ($training_status == '') {
      $training_status = t('All');
    }
    $report_header[] = array(
      'label' => t("Status:"),
      'value' => $training_status,
    );
    $from_date = $get['from_date'];
    if ($from_date != '') {
      $from_date = date('m/d/Y', strtotime($from_date));
    }
    if ($from_date == '') {
      $from_date = t('All');
    }
    $report_header[] = array(
      'label' => t("From Date:"),
      'value' => $from_date,
    );
    $to_date = $get['to_date'];
    if ($to_date != '') {
      $to_date = date('m/d/Y', strtotime($to_date));
    }
    if ($to_date == '') {
      $to_date = date('m/d/Y', time());
    }
    $report_header[] = array(
      'label' => t("To Date:"),
      'value' => $to_date,
    );
  } elseif ($get['v'] == 5) {
    $last_name = $get['last_name'];
    if ($last_name == '') {
      $last_name = t('All');
    }
    $report_header[] = array(
      'label' => t("User:"),
      'value' => $last_name,
    );
    $username = $get['username'];
    if ($username == '') {
      $username = t('All');
    }
    $report_header[] = array(
      'label' => t("Email Address:"),
      'value' => $username,
    );
    $activity_type = $get['activity_type'];
    if ($activity_type == '') {
      $activity_type = t('All');
    }
    $report_header[] = array(
      'label' => t("Activity Type:"),
      'value' => $activity_type,
    );
    $cid = $get['cid'];
    if ($cid == '') {
      $cid = t('All');
    }
    $report_header[] = array(
      'label' => t("Customer Name:"),
      'value' => $cid,
      'colspan' => 2,
    );
    $comp_account_no = $get['comp_account_no'];
    if ($comp_account_no == '') {
      $comp_account_no = t('All');
    }
    $report_header[] = array(
      'label' => t("Customer Account Number:"),
      'value' => $comp_account_no,
    );
//colspan=2
    $report_header[] = array(
      'label' => "",
      'value' => "",
    );
    $from_date = $get['from_date'];
    if ($from_date != '') {
      $from_date = date('m/d/Y', strtotime($from_date));
    }
    if ($from_date == '') {
      $from_date = t('All');
    }
    $report_header[] = array(
      'label' => t("From Date:"),
      'value' => $from_date,
    );
    $to_date = $get['to_date'];
    if ($to_date != '') {
      $to_date = date('m/d/Y', strtotime($to_date));
    }
    if ($to_date == '') {
      $to_date = date('m/d/Y', time());
    }
    $report_header[] = array(
      'label' => t("To Date:"),
      'value' => $to_date,
    );
  }
  return $report_header;
}

/**
 * Helper function for reports
 * Used in sub table result generating
 */
function report_sub_result_session() {
  $i = 0;
  if (variable_get('report_sub_qry', '') != '') {
    $subqry = variable_get('report_sub_qry', '');
    $subargs = variable_get('report_sub_arg', '');
  } else {
    drupal_goto('/covidien/reports/filter');
  }
  if ($subqry != '') {
    $subres = db_query($subqry, $subargs);
    while ($subrec = db_fetch_object($subres)) {
//note: software_version can be empty, HW without SW
      $covidien_reports_sub[$i] = array(
        $subrec->customername,
        $subrec->software_version,
        $subrec->total,
      );
      $i++;
    }
  }
  return $covidien_reports_sub;
}

/**
 * Helper function for reports
 * Used in sub2 table result generating
 */
function report_sub2_result_session() {
  $i = 0;
  if (variable_get('report_sub2_qry', '') != '') {
    $sub2qry = variable_get('report_sub2_qry', '');
    $sub2args = variable_get('report_sub2_arg', '');
  } else {
    drupal_goto('/covidien/reports/filter');
  }
  if ($sub2qry != '') {
    $subres = db_query($sub2qry, $sub2args);
    while ($subrec = db_fetch_object($subres)) {
      //note: software_version can be empty, HW without SW
      $covidien_reports_sub2[$i] = array(
        $subrec->devicetype,
        $subrec->software_version,
        $subrec->country,
        $subrec->total,
      );
      $i++;
    }
  }
  return $covidien_reports_sub2;
}

/**
 * Helper function for custom table/views to use in drupal views
 */
function device_software_upgrade_view_data() {
  $device_software_upgrade_view = array();
  $device_software_upgrade_view['table']['group'] = t('device_software_upgrade_view');
  $device_software_upgrade_view['table']['base'] = array(
    'field' => 'customername',
    'title' => t('device_software_upgrade_view'),
    'help' => t('customername from device_software_upgrade_view'),
  );
  $device_software_upgrade_view['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['device_nid'] = array(
    'title' => t('device_nid'),
    'help' => t("device_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['device_owner'] = array(
    'title' => t('device_owner'),
    'help' => t("device_owner from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['deviceserial'] = array(
    'title' => t('deviceserial'),
    'help' => t("deviceserial from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['service_device_nid'] = array(
    'title' => t('service_device_nid'),
    'help' => t("service_device_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['SW_upgrade_status'] = array(
    'title' => t('SW_upgrade_status'),
    'help' => t("SW_upgrade_status from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['Attempts'] = array(
    'title' => t('Attempts'),
    'help' => t("Attempts from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['field_from_device_component_nid'] = array(
    'title' => t('field_from_device_component_nid'),
    'help' => t("field_from_device_component_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['field_to_device_component_nid'] = array(
    'title' => t('field_to_device_component_nid'),
    'help' => t("field_to_device_component_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_upgrade_view['Event_datetime'] = array(
    'title' => t('Event_datetime'),
    'help' => t("Event_datetime from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['service_person'] = array(
    'title' => t('service_person'),
    'help' => t("service_person from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['Prior_SW_Version'] = array(
    'title' => t('Prior_SW_Version'),
    'help' => t("Prior_SW_Version from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['New_SW_Version'] = array(
    'title' => t('New_SW_Version'),
    'help' => t("New_SW_Version from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['country_name'] = array(
    'title' => t('country_name'),
    'help' => t("country_name from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_upgrade_view['country_nid'] = array(
    'title' => t('country_nid'),
    'help' => t("country_nid from device_software_upgrade_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  return $device_software_upgrade_view;
}

/**
 * sprint 7
 * Component Discrepansy report
 */
function device_component_discrepancy_view_data() {
  $device_component_discrepancy_view = array();
  $device_component_discrepancy_view['table']['group'] = t('device_component_discrepancy_view');
  $device_component_discrepancy_view['table']['base'] = array(
    'field' => 'customername',
    'title' => t('device_component_discrepancy_view'),
    'help' => t('discrepancy from device_component_discrepancy_view'),
  );
  $device_component_discrepancy_view['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_component_discrepancy_view['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_component_discrepancy_view['deviceserial'] = array(
    'title' => t('deviceserial'),
    'help' => t("deviceserial from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_component_discrepancy_view['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['component_name'] = array(
    'title' => t('component_name'),
    'help' => t("component_name from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['component_type'] = array(
    'title' => t('component_type'),
    'help' => t("component_type from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['part_value'] = array(
    'title' => t('part_value'),
    'help' => t("part_value from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['previous_version'] = array(
    'title' => t('previous_version'),
    'help' => t("previous_version from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['new_component_description'] = array(
    'title' => t('new_component_description'),
    'help' => t("new_component_description from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['new_version'] = array(
    'title' => t('new_version'),
    'help' => t("new_version from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['old_component_description'] = array(
    'title' => t('old_component_description'),
    'help' => t("old_component_description from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_component_discrepancy_view['country_nid'] = array(
    'title' => t('country_nid'),
    'help' => t("country_nid from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_component_discrepancy_view['country_name'] = array(
    'title' => t('country_name'),
    'help' => t("country_name from device_component_discrepancy_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  return $device_component_discrepancy_view;
}

/**
 * Implements callback function for ahah-report-trainer-exposed-callback
 */
function report_trainer_exposed_callback() {
  $post = filter_xss_arr($_POST);
  $_SESSION['default_dtype'] = $post['device_type'];
  $option = get_trainer_id($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Get a list of service Type
 */
function get_servicetype() {
  $option_arr = array();
  $option_arr['all'] = t('All');
  $qry = get_servicetype_query();
  $option_res = db_query($qry);
  while ($val = db_fetch_object($option_res)) {
    $option_arr[$val->nid] = $val->servicetype;
  }
  return $option_arr;
}

/**
 * sprint 7
 * Used for Service Records filter form
 */
function audit_trial_report() {
  drupal_add_js(drupal_get_path('module', 'covidien_users') . '/js/covidien_users.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter5.js');
  $form = array();
  $form['product_line'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['default_cot'],
    '#options' => get_productline(),
  );
  $form['activity_type'] = array(
    '#type' => 'select',
    '#default_value' => check_plain($_POST['activity_type']),
    '#validated' => TRUE,
    '#options' => getActivityTypes(),
  );
  $form['cid'] = array(
    '#type' => 'textfield',
    '#id' => 'customer_name',
    '#default_value' => check_plain($_POST['cid']),
    '#validated' => TRUE,
    '#autocomplete_path' => 'covidien/reports/filtertype/customername/autocomplete',
    '#attributes' => array(
      'onfocus' => 'covidien_customer_report_acl("account_number", "customer_name", "customername");',
      'onblur' => 'disable_field(this);'
    ),
  );
  $form['comp_account_no'] = array(
    '#type' => 'textfield',
    '#id' => 'account_number',
    '#default_value' => check_plain($_POST['comp_account_no']),
    '#validated' => TRUE,
    '#autocomplete_path' => 'covidien/reports/accountnumber/autocomplete',
    '#attributes' => array(
      'onfocus' => 'covidien_customer_report_acl("customer_name", "account_number", "account");',
      'onblur' => 'get_covidien_customer_name($("#account_number").val(), "customer_name");disable_field(this);'
    ),
  );
  $form['last_name'] = array(
    '#type' => 'textfield',
    '#default_value' => check_plain($_POST['last_name']),
    '#maxlength' => 400,
  );
  $form['last_name']['#autocomplete_path'] = 'firstname_lastname/autocomplete';
  $form['last_name']['#attributes'] = array();
  $form['username'] = array(
    '#type' => 'textfield',
    '#default_value' => check_plain($_POST['username']),
  );
  $form['username']['#autocomplete_path'] = 'username_ajax/autocomplete';
  $form['username']['#attributes'] = array(
    'onfocus' => 'covidien_username_acl();',
  );
  $form['from_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#date_format' => 'm/d/Y',
    '#maxlength' => 10,
    '#date_year_range' => '-5:+6',
  );
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#date_format' => 'm/d/Y',
    '#maxlength' => 10,
    '#date_year_range' => '-5:+6',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
  );
  return $form;
}

/**
 * use user email get user name first name last name
 * @param string $mail
 * @return string
 */
function covidien_user_get_name($mail) {
  $sql = "SELECT CONCAT(field_first_name_value, ' ', field_last_name_value) AS user_name FROM {content_type_person} WHERE field_person_username_value = '%s'";
  return db_result(db_query($sql, $mail));
}

/**
 * Implements hook_validate
 */
function audit_trial_report_validate(&$form, &$form_state) {
  form_set_error(NULL, '', TRUE);
  drupal_get_messages();
  $filter = $form_state['values'];
  //GATEWAY-1867 There is no error message when user and email address don't match in 'Audit Trail Report'
  if ($filter['username']) {
    if (!valid_email_address($filter['username'])) {
      form_set_error('username', t('Invalid Email Address'));
    }
    if ($filter['last_name'] && covidien_user_get_name($filter['username']) != $filter['last_name']) {
      form_set_error('last_name', t('User Name not match Email Address'));
    }
  }

  if (covidien_ui_input_validate($filter['from_date']) && covidien_ui_input_validate($filter['to_date'])) {
    $tomorrowMidnight = mktime(23, 59, 59, date('m'), date('d'), date('Y'));
    $isdate_valid = FALSE;
    $isdate_valid = date_is_valid($filter['from_date'], DATE_DATETIME, array('year', 'month', 'day'));
    $from_date = strtotime($filter['from_date']);

    if (!$isdate_valid || $from_date > $tomorrowMidnight) {
      form_set_error('from_date', t('Invalid From Date'));
    }
    $isdate_valid1 = FALSE;
    $isdate_valid1 = date_is_valid($filter['to_date'], DATE_DATETIME, array('year', 'month', 'day'));
    $to_date = $filter['to_date'] ? strtotime($filter['to_date']) : time();
    if (covidien_ui_input_validate($filter['to_date'], true)) {
      if (!$isdate_valid1 || $to_date > $tomorrowMidnight) {
        form_set_error('to_date', t('Invalid To Date'));
      }
    }
    if ($filter['from_date'] != '' && $filter['to_date'] != '') {
      if ($to_date < $from_date) {
        form_set_error('to_date', t('Invalid From/To Date'));
      }
    }
  }
}

/**
 * Implements hook_submit
 */
function audit_trial_report_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $url = "covidien/report/5/audit-trail";
  $query['v'] = 5;
  if ($filter['from_date'] != '') {
    $query['from_date'] = $filter['from_date'];
  }
  if ($filter['to_date'] != '') {
    $query['to_date'] = str_replace('00:00:00', '23:59:59', $filter['to_date']);
  } else {
    $query['to_date'] = gmdate('Y-m-d H:i:s', time());
  }
  if ($filter['product_line'] != 'all') {
    $query['productline_nid'] = $filter['product_line'];
  }
  if ($filter['last_name'] != '') {
    $query['last_name'] = $filter['last_name'];
  }
  if ($filter['username'] != '') {
    $query['username'] = $filter['username'];
  }
  if ($filter['activity_type'] != 'all') {
    $query['activity_type'] = $filter['activity_type'];
  }
  if ($filter['cid'] != 'all') {
    $query['cid'] = $filter['cid'];
  }
  if ($filter['comp_account_no'] != 'all') {
    $query['comp_account_no'] = $filter['comp_account_no'];
  }

  drupal_goto($url, $query);
  exit;
}

/**
 * sprint 7
 * @Reports navigation
 * @File : covidien_activity.module
 * @Function : allReportList
 * @Access Policy
 * @content Type : Product Line Report
 */
function covidien_reports_preprocess_audit_trial_report(&$vars, $hook) {
  drupal_set_title(t('Select Report and Set Report Parameters'));
  $vars['title'] = t('Select Report and Set Report Parameters');
  $vars['product_line'] = drupal_render($vars['form']['product_line']);
  $vars['last_name'] = drupal_render($vars['form']['last_name']);
  $vars['username'] = drupal_render($vars['form']['username']);
  $vars['activity_type'] = drupal_render($vars['form']['activity_type']);
  $vars['cid'] = drupal_render($vars['form']['cid']);
  $vars['comp_account_no'] = drupal_render($vars['form']['comp_account_no']);
  $vars['from_date'] = drupal_render($vars['form']['from_date']);
  $vars['to_date'] = drupal_render($vars['form']['to_date']);
  $vars['search_button'] = drupal_render($vars['form']['submit']);
  // this is must
  $vars['form_extras'] = drupal_render($vars['form']);
  $vars['report_menu'] = covidien_report_filter_list();
}

function covidien_report_filter_list() {
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportListByProductLine(); // Get all reports related to the Product line
  // build menu
  $report_menu = '';
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      if (arg(3) == $key) {
        $class = array('attributes' => array('style' => 'color:#000000'));
      }
      $report_menu .= l($val, "covidien/reports/filter/$key", $class) . "<br />";
    }
  }
  return $report_menu;
}

/**
 * sprint 7
 * Used for Component Discrepancy List
 */
function component_discrepancy_report_form() {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter3.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  $post = array();
  $post['form_id'] = 'component_discrepancy_report_form';
  $form = array();
  $form['product_line'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['default_cot'],
    '#options' => get_productline(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-device-type',
      'method' => 'replace',
      'path' => 'ahah-report-pl-dtype-exposed-callback',
    ),
  );
  $form['device_type'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_device_type(),
  );
  $form['country'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_country(),
  );
  $form['condition_button'] = array(
    '#type' => 'button',
    '#value' => t('and'),
    '#id' => t('condition_button'),
    //       '#attributes' => array('onclick' => 'this.value= this.value=="or"?"and":"or" ; return false ;'),
    '#attributes' => array('onclick' => 'return change_condeition();'),
    '#button_type' => 'submit',
    '#submit' => FALSE,
  );

  $form['hid_condition'] = array(
    '#type' => 'hidden',
    '#id' => t('hid_condition'),
    '#value' => 'and',
    '#name' => t('hid_condition'),
    '#default_value' => '',
  );

  $form['customer_name'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['customer_name']['#autocomplete_path'] = 'covidien/reports/filtertype/customername/autocomplete';
  $form['customer_name']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/filtertype/customername", "edit-customer-name");',
  );
  $form['device_type_hidden'] = array(
    '#type' => 'hidden',
  );
  if (is_numeric($_SESSION['default_dtype'])) {
    $form['device_type_hidden']['#default_value'] = $_SESSION['default_dtype'];
  }
  $form['customer_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['account_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['account_number']['#autocomplete_path'] = 'covidien/reports/accountnumber/autocomplete';
  $form['account_number']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/accountnumber", "edit-account-number");',
    'onblur' => "setcustomername('" . $form['customer_name']['#autocomplete_path'] . "');",
  );
  $form['account_number_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['ds_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['ds_number']['#autocomplete_path'] = 'covidien/reports/autocomplete';
  $form['ds_number']['#attributes'] = array(
    'onfocus' => 'parentvalues("reports");',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
  );
  return $form;
}

/**
 * Implements hook_validate
 */
function component_discrepancy_report_form_validate(&$form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter3.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  $filter = $form_state['values'];
  if ($filter['device_type'] == 'all') {
    form_set_error('device_type', t("Invalid Device Type"));
  }
  if (!covidien_ui_input_validate($filter['customer_name'], true)) {
    form_set_error('customer_name', t("Invalid Customer Name"));
  }
  if (!covidien_ui_input_validate($filter['account_number'])) {
    form_set_error('account_number', t("Invalid Customer Account Number"));
  }
  if (!covidien_ui_input_validate($filter['ds_number'])) {
    form_set_error('ds_number', t("Invalid Device Serial Number"));
  }
}

/**
 * Implements hook_submit
 */
function component_discrepancy_report_form_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $url = "/covidien/report/3?v=3";
  if ($filter['product_line'] != 'all') {
    $url .= "&productline_nid=" . $filter['product_line'];
  }
  if ($filter['device_type'] != 'all') {
    $url .= "&devicetype_nid=" . $filter['device_type'];
  }
  if ($filter['country'] != 'all') {
    $url .= "&country=" . $filter['country'];
  }

  $url .= "&hid_condition=" . check_plain($_POST['hid_condition']);

  if ($filter['customer_name'] != 'all') {
    $url .= "&customer_nid=" . $filter['customer_name'];
  }
  if ($filter['account_number'] != 'all') {
    $url .= "&accountnumber=" . $filter['account_number'];
  }
  $url .= "&deviceserial=" . $filter['ds_number'];
// Drupal goto encode the values and views filter not able to process.
  header('location:' . $base_url . $url);
  exit;
}

/**
 * sprint 7
 * Service Records report
 */
function device_service_history_view_data() {
  $device_service_history_view = array();
  $device_service_history_view['table']['group'] = t('device_service_history_view');
  $device_service_history_view['table']['base'] = array(
    'field' => 'servicehistory_nid',
    'title' => t('device_service_history_view'),
    'help' => t('Service Record from device_service_history_view'),
  );
  $device_service_history_view['servicehistory_nid'] = array(
    'title' => t('servicehistory_nid'),
    'help' => t("servicehistory_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['deviceserial'] = array(
    'title' => t('deviceserial'),
    'help' => t("deviceserial from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['technician_email'] = array(
    'title' => t('technician_email'),
    'help' => t("technician_email from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['service_date'] = array(
    'title' => t('service_date'),
    'help' => t("service_date from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['servicetype'] = array(
    'title' => t('servicetype'),
    'help' => t("servicetype from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['servicetype_nid'] = array(
    'title' => t('servicetype_nid'),
    'help' => t("servicetype_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['servicetype_status'] = array(
    'title' => t('servicetype_status'),
    'help' => t("servicetype_status from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_service_history_view['from_component_nid'] = array(
    'title' => t('from_component_nid'),
    'help' => t("from_component_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['to_component_nid'] = array(
    'title' => t('to_component_nid'),
    'help' => t("to_component_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['country_nid'] = array(
    'title' => t('country_nid'),
    'help' => t("country_nid from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_service_history_view['country_name'] = array(
    'title' => t('country_name'),
    'help' => t("country_name from device_service_history_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  return $device_service_history_view;
}

/**
 * Implements hook_validate
 */
function service_records_report_form_validate(&$form, &$form_state) {
  form_set_error(NULL, '', TRUE);
  drupal_get_messages();
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter4.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  $filter = $form_state['values'];
  if ($filter['device_type'] == 'all') {
    form_set_error('device_type', t("Invalid Device Type"));
  }
  if (!covidien_ui_input_validate($filter['customer_name'], true)) {
    form_set_error('customer_name', t("Invalid Customer Name"));
  }
  if (!covidien_ui_input_validate($filter['from_date'], true)) {
    form_set_error('from_date', t('Invalid From Date'));
  }
  if (!covidien_ui_input_validate($filter['account_number'])) {
    form_set_error('account_number', t('Invalid Customer Account Number'));
  }
  if (!covidien_ui_input_validate($filter['ds_number'])) {
    form_set_error('ds_number', t('Invalid Device Serial Number'));
  }
  if (covidien_ui_input_validate($filter['from_date'], true) && covidien_ui_input_validate($filter['to_date'], true)) {
    $tomorrowMidnight = mktime(23, 59, 59, date('m'), date('d'), date('Y'));
    $from_date = strtotime($filter['from_date']);
    if (!covidien_ui_input_validate($filter['to_date'], true)) {
      $filter['to_date'] = date('Y-m-d H:i:s');
    }
    $to_date = strtotime($filter['to_date']);
    $isdate_valid = FALSE;
    $isdate_valid = date_is_valid($filter['from_date'], DATE_DATETIME, array('year', 'month', 'day'));
    if (!covidien_ui_input_validate($filter['from_date'], true) || !$isdate_valid || $from_date > $tomorrowMidnight) {
      form_set_error('from_date', t('Invalid From Date'));
    }
    $isdate_valid1 = FALSE;
    $isdate_valid1 = date_is_valid($filter['to_date'], DATE_DATETIME, array('year', 'month', 'day'));
    if (!$isdate_valid1 && $to_date > $tomorrowMidnight) {
      form_set_error('to_date', t('Invalid To Date'));
    }
    if ($isdate_valid && $isdate_valid1) {
      $from_date = strtotime($filter['from_date']);
      if ($to_date < $from_date) {
        form_set_error('to_date', t('Invalid From/To Date'));
      }
    }
  }
}

/**
 * Implements hook_submit
 */
function service_records_report_form_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $url = "/covidien/report/4?v=4";
  if ($filter['product_line'] != 'all') {
    $url .= "&productline_nid=" . $filter['product_line'];
  }
  if ($filter['device_type'] != 'all') {
    $url .= "&devicetype_nid=" . $filter['device_type'];
  }
  if ($filter['customer_name'] != 'all') {
    $url .= "&customer_nid=" . $filter['customer_name'];
  }
  if ($filter['account_number'] != 'all') {
    $url .= "&accountnumber=" . $filter['account_number'];
  }
  if ($filter['country'] != 'all') {
    $url .= "&country=" . $filter['country'];
  }
  if ($filter['servicetype'] != 'all') {
    $url .= "&servicetype_nid=" . $filter['servicetype'];
  }
  $url .= "&deviceserial=" . $filter['ds_number'];
  if ($filter['from_date'] != '') {
    $url .= "&from_date=" . $filter['from_date'];
  }
  if ($filter['to_date'] != '') {
    $to_date = strtotime($filter['to_date']);
    $url .= "&to_date=" . date('Y-m-d', $to_date) . ' 23:59:59';
  } else {
    $url .= "&to_date=" . date('Y-m-d', time()) . ' 23:59:59';
  }
// Drupal goto encode the values and views filter not able to process.
  header('location:' . $base_url . $url);
  exit;
}

/**
 * Helper function for covidien_reports_theme
 * Define the form for reports filter.
 */
function training_report_form() {
  $post = array();
  $post['form_id'] = 'training_report_form';
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter6.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  $form = array();
  $form['product_line'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['default_cot'],
    '#options' => get_productline(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-device-type',
      'method' => 'replace',
      'path' => 'ahah-report-pl-dtype-exposed-callback',
    ),
  );
  $form['device_type'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_device_type(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-trainer-id',
      'method' => 'replace',
      'path' => 'ahah-report-trainer-exposed-callback',
    ),
  );
  $form['trainer_id'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_trainer_id(),
  );
  $form['trainer_id_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['customer_name'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['customer_name']['#autocomplete_path'] = 'covidien/reports/filtertype/tcname/autocomplete';
  $form['customer_name']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/filtertype/tcname", "edit-customer-name");',
  );
  $form['device_type_hidden'] = array(
    '#type' => 'hidden',
  );

  if (is_numeric($_SESSION['default_dtype'])) {
    $form['device_type_hidden']['#default_value'] = $_SESSION['default_dtype'];
  }
  $form['customer_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['account_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['account_number']['#autocomplete_path'] = 'covidien/reports/tacno/autocomplete';
  $form['account_number']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/tacno", "edit-account-number");',
    'onblur' => "setcustomername('" . $form['customer_name']['#autocomplete_path'] . "');",
  );
  $form['account_number_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['training_status'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_training_status(),
  );
  $form['training_status_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['from_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#date_format' => 'm/d/Y',
    //'#maxlength' => 30,
    '#date_year_range' => '-5:+6',
  );
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#attributes' => array(),
    '#date_format' => 'm/d/Y',
    //'#maxlength' => 30,
    '#date_year_range' => '-5:+6',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
  );
  return $form;
}

/**
 * Implements hook_form_validate for training_report_form
 */
function training_report_form_validate(&$form, &$form_state) {
  form_set_error(NULL, '', TRUE);
  drupal_set_message();
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter6.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  $filter = $form_state['values'];
  if ($filter['device_type'] == 'all') {
    form_set_error('device_type', t("Invalid Device Type"));
  }
  if (!covidien_ui_input_validate($filter['from_date'], true)) {
    form_set_error('from_date', t('Invalid From Date'));
  }
  if (!covidien_ui_input_validate($filter['to_date'])) {
    form_set_error('to_date', t('Invalid To Date'));
  }
  if (!covidien_ui_input_validate($filter['customer_name'])) {
    form_set_error('customer_name', t('Invalid Customer Name'));
  }
  if (!covidien_ui_input_validate($filter['account_number'])) {
    form_set_error('account_number', t('Invalid Customer Account Number'));
  }
  if (covidien_ui_input_validate($filter['from_date'], true) && covidien_ui_input_validate($filter['to_date'], true)) {
    $tomorrowMidnight = mktime(23, 59, 59, date('m'), date('d'), date('Y'));
    $from_date = strtotime($filter['from_date']);
    $to_date = strtotime($filter['to_date']);
    $isdate_valid = date_is_valid($filter['from_date'], DATE_DATETIME, array('year', 'month', 'day'));
    $isdate_valid1 = date_is_valid($filter['to_date'], DATE_DATETIME, array('year', 'month', 'day'));
    if ($isdate_valid && $isdate_valid1 && ($to_date < $from_date)) {
      form_set_error('from_date', ' ');
      form_set_error('to_date', t('Invalid From/To Date'));
    } else {
      if (!$isdate_valid || $from_date > $tomorrowMidnight) {
        form_set_error('from_date', t('Invalid From Date'));
      }
      if (!$isdate_valid1 || $to_date > $tomorrowMidnight) {
        form_set_error('to_date', t('Invalid To Date'));
      }
    }
  }
}

/**
 * Implements hook_form_submit for training_report_form
 * report_6
 */
function training_report_form_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $query = "v=6";
  if ($filter['product_line'] != 'all') {
    $query .= "&productline_nid=" . $filter['product_line'];
  }
  if ($filter['device_type'] != 'all') {
    $query .= "&devicetype_nid=" . $filter['device_type'];
  }
  if ($filter['trainer_id'] != 'all') {
    $query .= "&trainer_nid=" . $filter['trainer_id'];
  }
  if ($filter['training_status'] != 'all') {
    $query .= "&training_status=" . $filter['training_status'];
  }
  if ($filter['customer_name'] != 'all') {
    $query .= "&customername=" . $filter['customer_name'];
  }
  if ($filter['account_number'] != 'all') {
    $query .= "&accountnumber=" . $filter['account_number'];
  }
  if ($filter['from_date'] != '') {
    $query .= "&from_date=" . $filter['from_date'];
  }
  if ($filter['to_date'] != '') {
    $to_date = strtotime($filter['to_date']);
    $query .= "&to_date=" . date('Y-m-d', $to_date) . ' 23:59:59';
  } else {
    $query .= "&to_date=" . date('Y-m-d', time()) . ' 23:59:59';
  }
// Drupal goto encode the values and views filter not able to process.
  drupal_goto('covidien/report/6', $query);
  exit;
}

/**
 * Implements preprocess form
 * Used to set the template variabales for training_report_form
 */
function covidien_reports_preprocess_training_report_form(&$vars, $hook) {
  drupal_set_title(t('Select Report and Set Report Parameters'));
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  $vars['title'] = t('Select Report and Set Report Parameters');
  $vars['product_line'] = drupal_render($vars['form']['product_line']);
  $vars['device_type'] = drupal_render($vars['form']['device_type']);
  $vars['customer_name'] = drupal_render($vars['form']['customer_name']);
  $vars['account_number'] = drupal_render($vars['form']['account_number']);
  $vars['training_status'] = drupal_render($vars['form']['training_status']);
  $vars['trainer_id'] = drupal_render($vars['form']['trainer_id']);
  $vars['from_date'] = drupal_render($vars['form']['from_date']);
  $vars['to_date'] = drupal_render($vars['form']['to_date']);
  $vars['search_button'] = drupal_render($vars['form']['submit']);
// this is must
  $vars['form_extras'] = drupal_render($vars['form']);
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportListByProductLine(); // Get all reports related to the Product line
// build menu
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      if (arg(3) == $key) {
        $class = array('attributes' => array('style' => 'color:#000000'));
      }
      $vars['report_menu'] .= l($val, "covidien/reports/filter/$key", $class) . "<br />";
    }
  }
}

/**
 * Helper Function to get the values for training status
 */
function get_training_status() {
  $option_arr = array();
  $options = content_allowed_values(content_fields('field_active_flag'), FALSE);
  $option_arr['all'] = '';
  if (count($options) > 0) {
    foreach ($options as $key => $val) {
      $option_arr[$key] = $val;
    }
  }
  return $option_arr;
}

/**
 * Helper Function to get the values for trainer emailid
 */
function get_trainer_id($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  if ($post['device_type'] > 0) {
    $value = $post['device_type'];
    $view = views_get_view('devicetype_trainer_list');
    $view->init_display();
    $view->pre_execute(array($value));
    $view->execute();
    $result = $view->result;
    if (count($result) > 0) {
      foreach ($result as $rec) {
        $nid = $rec->node_node_data_field_person_pk_nid;
        $account = $rec->node_node_data_field_person_pk_title;
        $option_arr[$nid] = $account;
      }
    }
  }
  return $option_arr;
}

/**
 * Helper function to define the mysql view to drupal views
 */
function device_software_version_view_data() {
  $device_software_version_view = array();
  $device_software_version_view['table']['group'] = t('device_software_version_table');
  $device_software_version_view['table']['base'] = array(
    'field' => 'productline',
    'title' => t('device_software_version_table'),
    'help' => t('productline from device_software_version_table'),
  );
  $device_software_version_view['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['device_nid'] = array(
    'title' => t('device_nid'),
    'help' => t("device_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['deviceserial'] = array(
    'title' => t('deviceserial'),
    'help' => t("deviceserial from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['hardware_nid'] = array(
    'title' => t('hardware_nid'),
    'help' => t("hardware_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['hardware_part'] = array(
    'title' => t('hardware_part'),
    'help' => t("hardware_part from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['hardware_name'] = array(
    'title' => t('hardware_name'),
    'help' => t("hardware_name from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['hardware_version'] = array(
    'title' => t('hardware_version'),
    'help' => t("hardware_version from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );

  $device_software_version_view['hardware1_nid'] = array(
    'title' => t('hardware1_nid'),
    'help' => t("hardware1_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['hardware1_part'] = array(
    'title' => t('hardware1_part'),
    'help' => t("hardware1_part from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['hardware1_name'] = array(
    'title' => t('hardware1_name'),
    'help' => t("hardware1_name from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['hardware1_version'] = array(
    'title' => t('hardware1_version'),
    'help' => t("hardware1_version from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['software_nid'] = array(
    'title' => t('software_nid'),
    'help' => t("software_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['software_name'] = array(
    'title' => t('software_name'),
    'help' => t("software_name from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['software_part'] = array(
    'title' => t('software_part'),
    'help' => t("software_part from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['software_version'] = array(
    'title' => t('software_version'),
    'help' => t("software_version from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['software_component'] = array(
    'title' => t('software_component'),
    'help' => t("software_component from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['lastest_sw_update'] = array(
    'title' => t('lastest_sw_update'),
    'help' => t("lastest_sw_update from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['service_person'] = array(
    'title' => t('service_person'),
    'help' => t("service_person from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );

  $device_software_version_view['country_nid'] = array(
    'title' => t('country_nid'),
    'help' => t("country_nid from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_software_version_view['country_name'] = array(
    'title' => t('country_name'),
    'help' => t("country_name from device_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );

     
  return $device_software_version_view;
}

function view_named_configuration_data() {
  $view_named_configuration = array();
  $view_named_configuration['table']['group'] = t('view_named_configuration');
  $view_named_configuration['table']['base'] = array(
    'field' => 'id',
    'title' => t('view_named_configuration'),
    'help' => t('id from view_named_configuration'),
  );
  $device_software_version_view['configuration_name'] = array(
    'title' => t('configuration_name'),
    'help' => t("configuration_name from device_software_version_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_software_version_view['configuration_version'] = array(
    'title' => t('configuration_version'),
    'help' => t("configuration_version from device_software_version_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  return $view_named_configuration;
}

/**
 * Helper function to define the mysql view to drupal views
 */
function device_emerald_software_version_view_data() {
  $device_emerald_software_version_view = array();
  $device_emerald_software_version_view['table']['group'] = t('device_emerald_software_version_table');
  $device_emerald_software_version_view['table']['base'] = array(
    'field' => 'productline',
    'title' => t('device_emerald_software_version_table'),
    'help' => t('productline from device_emerald_software_version_table'),
  );
  $device_emerald_software_version_view['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['device_nid'] = array(
    'title' => t('device_nid'),
    'help' => t("device_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['deviceserial'] = array(
    'title' => t('deviceserial'),
    'help' => t("deviceserial from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['hardware_nid'] = array(
    'title' => t('hardware_nid'),
    'help' => t("hardware_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['hardware_part'] = array(
    'title' => t('hardware_part'),
    'help' => t("hardware_part from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['hardware_name'] = array(
    'title' => t('hardware_name'),
    'help' => t("hardware_name from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['hardware_version'] = array(
    'title' => t('hardware_version'),
    'help' => t("hardware_version from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );

  $device_emerald_software_version_view['hardware1_nid'] = array(
    'title' => t('hardware1_nid'),
    'help' => t("hardware1_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['hardware1_part'] = array(
    'title' => t('hardware1_part'),
    'help' => t("hardware1_part from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['hardware1_name'] = array(
    'title' => t('hardware1_name'),
    'help' => t("hardware1_name from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['hardware1_version'] = array(
    'title' => t('hardware1_version'),
    'help' => t("hardware1_version from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['software_nid'] = array(
    'title' => t('software_nid'),
    'help' => t("software_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['software_name'] = array(
    'title' => t('software_name'),
    'help' => t("software_name from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['software_part'] = array(
    'title' => t('software_part'),
    'help' => t("software_part from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['software_version'] = array(
    'title' => t('software_version'),
    'help' => t("software_version from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['software_component'] = array(
    'title' => t('software_component'),
    'help' => t("software_component from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['lastest_sw_update'] = array(
    'title' => t('lastest_sw_update'),
    'help' => t("lastest_sw_update from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_emerald_software_version_view['service_person'] = array(
    'title' => t('service_person'),
    'help' => t("service_person from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );

  $device_emerald_software_version_view['country_nid'] = array(
    'title' => t('country_nid'),
    'help' => t("country_nid from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_emerald_software_version_view['country_name'] = array(
    'title' => t('country_name'),
    'help' => t("country_name from device_emerald_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  return $device_emerald_software_version_view;
}

/**
 * Helper function to define the mysql view to drupal views
 */
function device_scd700_software_version_view_data() {
  $device_scd700_software_version_view = array();
  $device_scd700_software_version_view['table']['group'] = t('device_scd700_software_version_table');
  $device_scd700_software_version_view['table']['base'] = array(
    'field' => 'productline',
    'title' => t('device_scd700_software_version_table'),
    'help' => t('productline from device_scd700_software_version_table'),
  );
  $device_scd700_software_version_view['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_scd700_software_version_view['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_scd700_software_version_view['device_nid'] = array(
    'title' => t('device_nid'),
    'help' => t("device_nid from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_scd700_software_version_view['deviceserial'] = array(
    'title' => t('deviceserial'),
    'help' => t("deviceserial from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $device_scd700_software_version_view['hardware_nid'] = array(
    'title' => t('hardware_nid'),
    'help' => t("hardware_nid from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_scd700_software_version_view['hardware_part'] = array(
    'title' => t('hardware_part'),
    'help' => t("hardware_part from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['hardware_name'] = array(
    'title' => t('hardware_name'),
    'help' => t("hardware_name from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['hardware_version'] = array(
    'title' => t('hardware_version'),
    'help' => t("hardware_version from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['software_nid'] = array(
    'title' => t('software_nid'),
    'help' => t("software_nid from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_scd700_software_version_view['software_name'] = array(
    'title' => t('software_name'),
    'help' => t("software_name from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['software_part'] = array(
    'title' => t('software_part'),
    'help' => t("software_part from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['software_version'] = array(
    'title' => t('software_version'),
    'help' => t("software_version from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['software_component'] = array(
    'title' => t('software_component'),
    'help' => t("software_component from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_scd700_software_version_view['lastest_sw_update'] = array(
    'title' => t('lastest_sw_update'),
    'help' => t("lastest_sw_update from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $device_scd700_software_version_view['service_person'] = array(
    'title' => t('service_person'),
    'help' => t("service_person from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );

  $device_scd700_software_version_view['country_nid'] = array(
    'title' => t('country_nid'),
    'help' => t("country_nid from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $device_scd700_software_version_view['country_name'] = array(
    'title' => t('country_name'),
    'help' => t("country_name from device_scd700_software_version_table"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  ); 
  return $device_scd700_software_version_view;
}

/**
 * Helper function for Training Record report data to drupal views
 */
function training_record_view_data() {
  $training_record_view = array();
  $training_record_view['table']['group'] = t('training_record_view');
  $training_record_view['table']['base'] = array(
    'field' => 'productline',
    'title' => t('training_record_view'),
    'help' => t('productline from training_record_view'),
  );
  $training_record_view['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $training_record_view['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $training_record_view['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $training_record_view['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $training_record_view['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $training_record_view['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $training_record_view['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $training_record_view['trainee_name'] = array(
    'title' => t('trainee_name'),
    'help' => t("trainee_name from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $training_record_view['trainee_nid'] = array(
    'title' => t('trainee_nid'),
    'help' => t("trainee_nid from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $training_record_view['trainer_name'] = array(
    'title' => t('trainer_name'),
    'help' => t("trainer_name from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $training_record_view['trainer_nid'] = array(
    'title' => t('trainer_nid'),
    'help' => t("trainer_nid from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $training_record_view['training_completion_date'] = array(
    'title' => t('training_completion_date'),
    'help' => t("training_completion_date from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $training_record_view['training_status'] = array(
    'title' => t('training_status'),
    'help' => t("training_status from training_record_view"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  return $training_record_view;
}

/**
 * Autosugesstion for customername
 * @parm
 * arg4: devicetype
 * arg5: search string
 */
function covidien_reports_customername_autocomplete($arg1 = '', $arg2 = '', $arg3 = '', $arg4 = '', $arg5 = '', $arg6 = '') {
  $post = array();
  $post['product_line'] = $arg3;
  $post['device_type'] = $arg4;
  $post['customer_str'] = trim($arg6);
  if ($arg5 == 'all') {
    $post['account_no'] = '';
  } else {
    $post['account_no'] = $arg5;
  }
  $post = filter_xss_arr($post);
  if (strlen($arg6) > 2) {
    if (trim($arg5) == 'all') {
      $items = get_customer_name($post);
    } else {
      $items = get_acno_customer_name($post, 'autocomplete');
    }
  } else {
    $items = array();
  }
  print drupal_to_js($items);
  exit();
}

/**
 * Autosugesstion for customername
 * @parm
 * arg4: devicetype
 * arg6: search string
 */
function covidien_reports_filtertype_customername_autocomplete($arg1 = '', $arg2 = '', $arg3 = '', $arg4 = '', $arg6 = '', $arg7 = '') {
  $post = array();
  $post['product_line'] = $arg3;
  $post['device_type'] = $arg4;
  $post['filtertype'] = $arg1;
  if ($arg6 == 'all') {
    $post['account_no'] = '';
  } else {
    $post['account_no'] = $arg6;
  }
  $post['customer_str'] = trim($arg7);
  $post = filter_xss_arr($post);
  if (strlen($arg7) > 2 || $arg6 != 'all') {
    if (trim($post['account_no']) == '') {
      $items = get_customer_name($post);
    } else {
      $items = get_acno_customer_name($post, 'autocomplete');
    }
  } else {
    $items = array();
  }
  print drupal_to_js($items);
  exit();
}

/**
 * Autosugesstion for customername
 * @parm
 * arg4: devicetype
 * arg5: search string
 */
function covidien_reports_accountnumber_autocomplete($arg1 = '', $arg2 = '', $arg3 = '', $arg4 = '', $arg5 = '', $arg6 = '') {
  $post = array();
  $post['product_line'] = $arg3;
  $post['device_type'] = $arg4;
  if ($arg5 != 'all') {
    $post['customer_name'] = $arg5;
  } else {
    $post['customer_name'] = '';
  }
  $post['filtertype'] = $arg1;
  $post['account_str'] = trim($arg6);
  $post = filter_xss_arr($post);
  if (strlen($arg6) > 2) {
    $items = get_account_number($post, 'autocomplete');
  } else {
    $items = array();
  }
  print drupal_to_js($items);
  exit();
}

/**
 * Helper function for report_account_number_exposed_filters_callback
 */
function get_acno_customer_name($post = array(), $rtype = '') {
  global $user;
  $option_arr = array();
  $customer_str = $post['customer_str'];
  $account_no = $post['account_no'];
  if ($account_no != '') {
    $query = get_acno_customer_name_query($user, $post);
    $option_res = db_query($query, $account_no, $customer_str);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[trim($val->customername)] = $val->customername;
    }
  }
  return $option_arr;
}

/**
 * Helper function to get the country
 */
function get_country($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  $query = get_country_query();
  $option_res = db_query($query);
  while ($val = db_fetch_object($option_res)) {
    $option_arr[trim($val->nid)] = $val->title;
  }
  return $option_arr;
}

/**
 * Helper function to get the country
 */
function get_region($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  $query = "SELECT nid, title FROM {node} WHERE type='region'";
  $result = db_query($query);
  while ($row = db_fetch_object($result)) {
    $option_arr[$row->nid] = $row->title;
  }
  return $option_arr;
}

/**
 * Helper function to get the Hardware
 */
function get_hw_name($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  if ($post['device_type'] != '') {
    $qry = get_hw_name_query();
    $option_res = db_query($qry, $post['device_type']);
    while ($val = db_fetch_object($option_res)) {
      $option_arr[strtolower(trim($val->hardware_name))] = $val->hardware_name;
    }
  }
  return $option_arr;
}

/**
 * Helper function to get the Hardware
 */
function get_hwpart_number($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  $qry = get_hwpart_number_query();
  $option_res = db_query($qry, $post['hw_name']);
  while ($val = db_fetch_object($option_res)) {
    $option_arr[trim($val->field_hw_part_value)] = $val->field_hw_part_value;
  }
  return $option_arr;
}

/**
 * Helper function to get the Hardware
 */
function get_hwversion($post = array()) {
  $option_arr = array();
  $option_arr['all'] = '';
  $query = get_hwversion_query();
  $option_res = db_query($query, $post['hw_name'], $post['hw_part_number']);
  while ($val = db_fetch_object($option_res)) {
    $option_arr[trim($val->field_hw_version_value)] = $val->field_hw_version_value;
  }
  return $option_arr;
}

/**
 * Implements call back function for Hardware Name
 */
function report_hw_name_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $_SESSION['default_dtype'] = $post['device_type'];
  $option = get_hw_name($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Implements call back function for Hardware Part#
 */
function report_hw_part_number_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $_SESSION['default_dtype'] = $post['device_type'];
  $option = get_hwpart_number($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Implements call back function for Hardware Revision
 */
function report_hw_version_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $option = get_hwversion($post);
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

function get_CustomerName_report($name, $email, $value, $string) {
  $post = filter_xss($value);
  $value = trim($post);
  $matches = array();
  global $user;
  $length = strlen($string);
  if ($length < 3) {
    echo drupal_json($matches);
    exit;
  }
  $string = trim($string);
  $string = str_replace("_", "\_", $string);
  $query = get_CustomerName_report_query($user, $value);
  $result = db_query($query, $string);
  while ($row = db_fetch_object($result)) {
    if ($row->customername != "Unknown") {
      $matches[$row->customername] = $row->customername;
    }
  }
  drupal_json($matches);
  exit;
}

function get_CustomerAccount_report($name, $email, $value, $string) {
  $post = filter_xss($value);
  $value = trim($post);
  $matches = array();
  global $user;
  $length = strlen($string);
  if ($length < 3) {
    echo drupal_json($matches);
    exit;
  }
  $string = trim($string);
  $string = str_replace("_", "\_", $string);
  $qry = get_CustomerAccount_report_query($user, $value);
  $result = db_query($qry, $string);
  while ($row = db_fetch_object($result)) {
    $matches[$row->field_bu_customer_account_number_value] = $row->field_bu_customer_account_number_value;
  }
  drupal_json($matches);
  exit;
}

function total_device_report_view() {
  drupal_set_title(t('Total Devices Report'));
  global $base_url;
  $row = array();
  $result = array();
  $total_devices = 0;
  $query = db_query(get_total_device_report_query());
  $header = array(
    array('data' => t('Device type')),
    array('data' => t('Device Count')),
  );
  while ($record = db_fetch_object($query)) {
    $row[0] = $record->title;
    $row[1] = $record->totaldevices;
    $total_devices += $record->totaldevices;
    $result[] = $row;
  }
  $result[] = array('', $total_devices);
  $output = theme('table', $header, $result, array('style' => "width:300px; margin-left:30%", 'align' => 'center'));
  $form['returnbtn'] = array(
    '#type' => 'submit',
    '#value' => 'Return',
    '#attributes' => array(
      'class' => 'secondary_submit',
      //'onclick' => "window.location=\"" . $base_url . "/covidien/reports/filter/7\"; return true;", 
      'style' => 'float:right'
    ),
  );

  $output .= drupal_render($form);
  return $output;
}

function sw_configuration_report_form() {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter8.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  $form = array();

  $form['product_line'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['default_cot'],
    '#options' => get_productline(),
    '#ahah' => array(
      'event' => 'change',
      'wrapper' => 'edit-device-type',
      'method' => 'replace',
      'path' => 'ahah-report-pl-dtype-exposed-callback',
    )
  );
  $form['device_type'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_device_type(),
  );
  $form['customer_name'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['customer_name']['#autocomplete_path'] = 'covidien/reports/customername/autocomplete';
  $form['customer_name']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/customername", "edit-customer-name");',
  );
  $form['device_type_hidden'] = array(
    '#type' => 'hidden',
  );
  if (is_numeric($_SESSION['default_dtype'])) {
    $form['device_type_hidden']['#default_value'] = $_SESSION['default_dtype'];
  }
  $form['customer_name_hidden'] = array(
    '#type' => 'hidden',
  );
  $form['account_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['account_number']['#autocomplete_path'] = 'covidien/reports/accountnumber/autocomplete';
  $form['account_number']['#attributes'] = array(
    'onfocus' => 'reportparentvalues("reports/accountnumber", "edit-account-number");',
    'onblur' => "setcustomername('" . $form['customer_name']['#autocomplete_path'] . "');",
  );
  $form['country'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#validated' => TRUE,
    '#options' => get_country(),
  );
  $form['ds_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
  );
  $form['ds_number']['#autocomplete_path'] = 'covidien/reports/autocomplete';
  $form['ds_number']['#attributes'] = array(
    'onfocus' => 'parentvalues("reports");',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View Report'),
  );

  return $form;
}

function sw_configuration_report_form_validate(&$form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report.js');
  drupal_add_js(drupal_get_path('module', 'covidien_reports') . '/js/covidien_report_filter8.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  $filter = $form_state['values'];
  if ($filter['device_type'] == 'all') {
    form_set_error('device_type', t("Invalid Device Type"));
  }
}

function sw_configuration_report_form_submit(&$form, &$form_state) {
  global $base_url;
  $filter = $form_state['values'];
  $url = "/covidien/report/8?v=8";
  if ($filter['device_type'] != 'all') {
    $url .= "&devicetype_nid=" . $filter['device_type'];
  }
  if ($filter['product_line'] != 'all') {
    $url .= "&productline_nid=" . $filter['product_line'];
  }
  if ($filter['customer_name'] != '') {
    $url .= "&customer_nid=" . $filter['customer_name'];
  }
  if ($filter['account_number'] != '') {
    $url .= "&accountnumber=" . $filter['account_number'];
  }
  if ($filter['country'] != 'all') {
    $url .= "&country=" . $filter['country'];
  }
  $url .= "&deviceserial=" . $filter['ds_number'];
  // Drupal goto encode the values and views filter not able to process.
  header('location:' . $base_url . $url);
  exit;
}

function covidien_reports_preprocess_sw_configuration_report_form(&$vars, $hook) {
  drupal_set_title(t('Select Report and Set Report Parameters'));
  $vars['title'] = t('Select Report and Set Report Parameters');
  $vars['product_line'] = drupal_render($vars['form']['product_line']);
  $vars['device_type'] = drupal_render($vars['form']['device_type']);
  $vars['customer_name'] = drupal_render($vars['form']['customer_name']);
  $vars['account_number'] = drupal_render($vars['form']['account_number']);
  $vars['ds_number'] = drupal_render($vars['form']['ds_number']);
  $vars['country'] = drupal_render($vars['form']['country']);

  $vars['search_button'] = drupal_render($vars['form']['submit']);
  // this is must
  $vars['form_extras'] = drupal_render($vars['form']);
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportListByProductLine(); // Get all reports related to the Product line
  // build menu
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      if (arg(3) == $key) {
        $class = array('attributes' => array('style' => 'color:#000000'));
      }
      $vars['report_menu'] .= l($val, "covidien/reports/filter/$key", $class) . "<br />";
    }
  }
}

/**
 * Phase2.1 for SW Configuration Report
 */
function view_device_sw_configuration_data() {
  $view_device_sw_configuration = array();
  $view_device_sw_configuration['table']['group'] = t('view_device_sw_configuration');
  $view_device_sw_configuration['table']['base'] = array(
    'field' => 'productline',
    'title' => t('view_device_sw_configuration'),
    'help' => t('productline from view_device_sw_configuration'),
  );
  $view_device_sw_configuration['productline'] = array(
    'title' => t('productline'),
    'help' => t("productline from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['productline_nid'] = array(
    'title' => t('productline_nid'),
    'help' => t("productline_nid from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $view_device_sw_configuration['devicetype'] = array(
    'title' => t('devicetype'),
    'help' => t("devicetype from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['devicetype_nid'] = array(
    'title' => t('devicetype_nid'),
    'help' => t("devicetype_nid from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $view_device_sw_configuration['device_nid'] = array(
    'title' => t('device_nid'),
    'help' => t("device_nid from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $view_device_sw_configuration['deviceserial'] = array(
    'title' => t('deviceserial'),
    'help' => t("deviceserial from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['accountnumber'] = array(
    'title' => t('accountnumber'),
    'help' => t("accountnumber from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['customername'] = array(
    'title' => t('customername'),
    'help' => t("customername from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['customer_nid'] = array(
    'title' => t('customer_nid'),
    'help' => t("customer_nid from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $view_device_sw_configuration['software_nid'] = array(
    'title' => t('software_nid'),
    'help' => t("software_nid from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $view_device_sw_configuration['software_name'] = array(
    'title' => t('software_name'),
    'help' => t("software_name from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['software_part'] = array(
    'title' => t('software_part'),
    'help' => t("software_part from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['software_version'] = array(
    'title' => t('software_version'),
    'help' => t("software_version from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['software_component'] = array(
    'title' => t('software_component'),
    'help' => t("software_component from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $view_device_sw_configuration['lastest_sw_update'] = array(
    'title' => t('lastest_sw_update'),
    'help' => t("lastest_sw_update from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  $view_device_sw_configuration['country_nid'] = array(
    'title' => t('country_nid'),
    'help' => t("country_nid from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $view_device_sw_configuration['country_name'] = array(
    'title' => t('country_name'),
    'help' => t("country_name from view_device_sw_configuration"),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_string',
    ),
  );
  return $view_device_sw_configuration;
}

/**
 * Implements cron functioanlity.
 * Update the activity_log table to get the product_line_nid in for each record
 */
function covidien_reports_cron() {
  covidien_update_log('Run Start ' . __FUNCTION__);

  // make sure the cron job sends only once notification per-day.
  $today_date = gmdate('Y-m-d', time());
  $last_run_day = variable_get('last_run_date', '');
  //watchdog('Covidien Report Testing', 'Report cron last run date '.$last_run_day ); 
  if ($today_date == $last_run_day) {
    //watchdog('Covidien Report Cron', 'Report cron already run for today '.$today_date ); 
    return;
  }
  variable_set('last_run_date', $today_date);
  //Part I
  //Get all user nid from activity_log that have the device field empty
  //watchdog('Covidien Report Testing', 'Part I start cron'); 
  $query = "select nid from {activity_log} where device = '' GROUP BY nid";
  $results = db_query($query);
  $operations = array();
  //get the result and pass the user nid to get the cot
  while ($data = db_fetch_object($results)) {
    $operations[] = array('update_user_cot_batch_process', array($data->nid));
  }

  $batch = array(
    'operations' => $operations,
  );
  //watchdog('Covidien Report Testing', 'Part I start batch');
  $batch['progressive'] = FALSE;
  batch_set($batch);
  $batch = & batch_get();
  $batch['progressive'] = FALSE;
  batch_process('');

  //================Part 2. get the device name and map it to it own cot ============== 
  $devices_query = "SELECT device FROM {activity_log} where device > '' group by device";
  $devices_results = db_query($devices_query);
  $devices_operations = array();
  while ($device_data = db_fetch_object($devices_results)) {
    $devices_operations[] = array('update_device_cot_batch_process', array($device_data->device));
  }
  $devices_batch = array(
    'operations' => $devices_operations,
  );
  //watchdog('Covidien Report Testing', 'Part II start batch on activity_log');
  $devices_batch['progressive'] = FALSE;
  batch_set($devices_batch);
  $devices_batch = & batch_get();
  $devices_batch['progressive'] = FALSE;
  batch_process('');
  covidien_update_log('Finished ' . __FUNCTION__);

  //update Device Current Configuration tables
  update_compression_and_vesselsealing_table();
    
}

/**
 * update Device Current Configuration Report tables
 */

function update_compression_and_vesselsealing_table(){
    
  //Update Table device_software_version_table 
  $truncate_query = "truncate device_software_version_table";
  $truncate_result = db_query($truncate_query); 
  $insert_query = "INSERT INTO device_software_version_table SELECT Device_VW.productline AS productline, Device_VW.productline_nid AS productline_nid,
                    Device_VW.devicetype AS devicetype,
                    Device_VW.devicetype_nid AS devicetype_nid,
                    Device_VW.device_nid AS device_nid,
                    Device_VW.deviceserial AS deviceserial,
                    Customer_VW.accountnumber AS accountnumber,
                    Customer_VW.customername AS customername,
                    Customer_VW.customer_nid AS customer_nid,
                    Hardware_VW.hardware_nid AS hardware_nid,
                    Hardware_VW.hardware_part AS hardware_part,
                    Hardware_VW.hardware_name AS hardware_name,
                    Hardware_VW.hardware_version AS hardware_version,
                    Hardware_VW1.hardware_nid AS hardware1_nid,
                    Hardware_VW1.hardware_part AS hardware1_part,
                    Hardware_VW1.hardware_name AS hardware1_name,
                    Hardware_VW1.hardware_version AS hardware1_version,
                    Software_VW.software_nid AS software_nid,
                    Software_VW.software_name AS software_name,
                    Software_VW.software_part AS software_part,
                    Software_VW.software_version AS software_version,
                    Software_VW.software_component AS software_component,
                    Software_VW.lastest_sw_update AS lastest_sw_update,
                    device_service_history_VW.service_person AS service_person,
                    Country_VW.country_nid AS country_nid,
                    Country_VW.country_name AS country_name
                    FROM Device_VW
                    LEFT JOIN Country_VW ON Country_VW.device_nid = Device_VW.device_nid
                    JOIN Customer_VW ON Device_VW.device_owner = Customer_VW.account_nid
                    JOIN Hardware_VW ON Hardware_VW.component_device = Device_VW.device_nid AND Hardware_VW.hardware_name = 'BdPcba'
                    JOIN Hardware_VW Hardware_VW1 ON Hardware_VW1.component_device = Device_VW.device_nid AND Hardware_VW1.hardware_name = 'GuiPcba'
                    JOIN Software_VW ON Software_VW.component_device = Device_VW.device_nid AND Software_VW.software_name = 'BdSoftware'
                    JOIN device_service_history_VW ON device_service_history_VW.field_to_device_component_nid = Software_VW.software_component
                      AND device_service_history_VW.service_device_nid = Device_VW.device_nid
                      AND device_service_history_VW.field_service_datetime_value = Software_VW.lastest_sw_update
                  ORDER BY Device_VW.deviceserial, Software_VW.lastest_sw_update DESC";
  $insert_result = db_query($insert_query);
  
  //Udate device_scd700_software_version_table 
  $truncate_scd700_query = "truncate device_scd700_software_version_table";
  $truncate_scd700_result = db_query($truncate_scd700_query); 
  $insert_scd700_query = "INSERT INTO device_scd700_software_version_table 
                  SELECT Device_VW.productline AS productline,Device_VW.productline_nid AS productline_nid,
                  Device_VW.devicetype AS devicetype,Device_VW.devicetype_nid AS devicetype_nid,
                  Device_VW.device_nid AS device_nid,Device_VW.deviceserial AS deviceserial,
                  Customer_VW.accountnumber AS accountnumber,Customer_VW.customername AS customername,
                  Customer_VW.customer_nid AS customer_nid,Hardware_VW.hardware_nid AS hardware_nid,
                  Hardware_VW.hardware_part AS hardware_part,Hardware_VW.hardware_name AS hardware_name,
                  Hardware_VW.hardware_version AS hardware_version,Software_VW.software_nid AS software_nid,
                  Software_VW.software_name AS software_name,Software_VW.software_part AS software_part,
                  Software_VW.software_version AS software_version,Software_VW.software_component AS software_component,
                  Software_VW.lastest_sw_update AS lastest_sw_update,device_service_history_VW.service_person AS service_person,
                  Country_VW.country_nid AS country_nid,Country_VW.country_name AS country_name
                  FROM Device_VW
                  LEFT JOIN Country_VW ON Country_VW.device_nid = Device_VW.device_nid
                  JOIN Customer_VW ON Device_VW.device_owner = Customer_VW.account_nid
                  JOIN Hardware_VW ON Hardware_VW.component_device = Device_VW.device_nid AND Hardware_VW.hardware_name = 'Control Board'
                  JOIN Software_VW ON Software_VW.component_device = Device_VW.device_nid AND Software_VW.software_name = 'Control'
                  JOIN device_service_history_VW ON device_service_history_VW.field_to_device_component_nid = Software_VW.software_component
                  AND device_service_history_VW.service_device_nid = Device_VW.device_nid
                  AND device_service_history_VW.field_service_datetime_value = Software_VW.lastest_sw_update
                  ORDER BY Device_VW.deviceserial,Software_VW.lastest_sw_update DESC";
  $insert_scd700_result = db_query($insert_scd700_query);
  
  
  //Udate device_emerald_software_version_table 
  $truncate_emerald_query = "truncate device_emerald_software_version_table";
  $truncate_emerald_result = db_query($truncate_emerald_query); 
  $insert_emerald_query = "INSERT INTO device_emerald_software_version_table 
                          SELECT Device_VW.productline AS productline, Device_VW.productline_nid AS productline_nid, Device_VW.devicetype AS devicetype,
                          Device_VW.devicetype_nid AS devicetype_nid, Device_VW.device_nid AS device_nid, Device_VW.deviceserial AS deviceserial,
                          Customer_VW.accountnumber AS accountnumber, Customer_VW.customername AS customername, Customer_VW.customer_nid AS customer_nid,
                          Hardware_VW.hardware_nid AS hardware_nid, Hardware_VW.hardware_part AS hardware_part, Hardware_VW.hardware_name AS hardware_name,
                          Hardware_VW.hardware_version AS hardware_version,
                          Hardware_VW1.hardware_nid AS hardware1_nid,
                          Hardware_VW1.hardware_part AS hardware1_part,
                          Hardware_VW1.hardware_name AS hardware1_name,
                          Hardware_VW1.hardware_version AS hardware1_version,
                          Software_VW.software_nid AS software_nid,
                          Software_VW.software_name AS software_name,
                          Software_VW.software_part AS software_part,
                          Software_VW.software_version AS software_version,
                          Software_VW.software_component AS software_component,
                          Software_VW.lastest_sw_update AS lastest_sw_update,
                          device_service_history_VW.service_person AS service_person,
                          Country_VW.country_nid AS country_nid,
                          Country_VW.country_name AS country_name
                          FROM Device_VW
                          LEFT JOIN Country_VW ON Country_VW.device_nid = Device_VW.device_nid
                          JOIN Customer_VW ON Device_VW.device_owner = Customer_VW.account_nid
                          JOIN Hardware_VW ON Hardware_VW.component_device = Device_VW.device_nid AND Hardware_VW.hardware_name = 'Main PCBA'
                          JOIN Hardware_VW Hardware_VW1 ON Hardware_VW1.component_device = Device_VW.device_nid AND Hardware_VW1.hardware_name = 'VIBE'
                          JOIN Software_VW ON Software_VW.component_device = Device_VW.device_nid
                          JOIN device_service_history_VW ON device_service_history_VW.field_to_device_component_nid = Software_VW.software_component
                            AND device_service_history_VW.service_device_nid = Device_VW.device_nid
                            AND device_service_history_VW.field_service_datetime_value = Software_VW.lastest_sw_update
                          ORDER BY Device_VW.deviceserial, Software_VW.lastest_sw_update DESC";
  $insert_emerald_result = db_query($insert_emerald_query);
}
/**
 * pass in the user nid and update the record with the product_line_nid base on user nid
 */
function update_user_cot_batch_process($nid, &$context) {
  //Get user cot base on user nid
  $query = "SELECT activity_log.nid,
            content_type_roles.field_role_product_line_nid as cot_nid 
            FROM activity_log  
            LEFT JOIN content_field_person_pk content_field_person_pk on content_field_person_pk.field_person_pk_nid = activity_log.nid 
            LEFT JOIN content_field_app_role_pk content_field_app_role_pk on content_field_person_pk.nid = content_field_app_role_pk.nid 
            LEFT JOIN content_type_roles content_type_roles on content_type_roles.nid = content_field_app_role_pk.field_app_role_pk_nid 
            WHERE activity_log.nid = '%d' and content_type_roles.field_role_product_line_nid IS NOT NULL
            limit 1";

  $results = db_query($query, $nid);
  $operations = array();
  $cot_nid = '';
  while ($data = db_fetch_object($results)) {
    $cot_nid = $data->cot_nid;
  }
  //get the user cot base on the user nid
  $sql = "update {activity_log} set product_line_nid = '%d' where nid = %d and device = '' ";

  db_query($sql, $cot_nid, $nid);
  //watchdog('Covidien Report Testing', 'after update '.$nid);

  $context['message'] = t('Processing @title', array('@title' => $nid));
}

/**
 * pass in the device name and update activity_log table with the cot nid on product_line_nid
 */
function update_device_cot_batch_process($device, &$context) {

  //Get user cot base on device name
  $query = "SELECT content_field_device_product_line.field_device_product_line_nid as cot_nid
            FROM activity_log 
            LEFT JOIN node node_device on node_device.title = activity_log.device 
            LEFT JOIN content_field_device_product_line ON content_field_device_product_line.nid=node_device.nid 
            WHERE activity_log.device = '%s'
            limit 1";

  $results = db_query($query, $device);
  $operations = array();
  //get the result and pass the user nid to get the cot
  $cot_nid = '';
  while ($data = db_fetch_object($results)) {
    $cot_nid = $data->cot_nid;
  }
  //get the user cot base on the user nid
  $sql = "update {activity_log} set product_line_nid = '%d' where device = '%s' and product_line_nid = 0 ";

  db_query($sql, $cot_nid, $device);
  //watchdog('Covidien Report Testing', 'Part II after update '.$device);

  $context['message'] = t('Processing @title', array('@title' => $device));
}
