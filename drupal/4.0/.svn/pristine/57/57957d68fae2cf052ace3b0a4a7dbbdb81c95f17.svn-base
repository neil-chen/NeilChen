<?php

/**
 * @file
 * This module extends the Views module and allows to create customized lists
 * (pages, blocks, feeds) of watchdog entries.
 */


/**
 * Implementation of hook_help().
 */
function views_watchdog_help($path, $arg) {

  switch ($path) {

    case 'admin/help#views_watchdog':
      $output = '<p>'. t('The <em>Views Watchdog</em> module extends the <a href="@views">Views</a> module and allows to create customized lists (pages, blocks, feeds) of watchdog entries.', array('@views' => 'http://drupal.org/project/views')) .'</p>';
      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@views_watchdog">Views Watchdog module</a>.', array('@views_watchdog' => 'http://drupal.org/project/views_watchdog')) .'</p>';
      return $output;
  }
}


/**
 * Implementation of hook_views_api().
 */
function views_watchdog_views_api() {

  $api = array(
    'api' => 2,
    'path' => drupal_get_path('module', 'views_watchdog') .'/views',
  );

  return $api;
}


/**
 * Helper function; retrieves list of severity levels.
 */
function _views_watchdog_get_severity($code = NULL, $item = NULL) {

  static $severity = array();

  if (!$severity) {

    $severity[WATCHDOG_EMERG] = array(
      'title' => t('Emergency'),
      'text' => t('System is unusable.'),
      'icon' => 'misc/watchdog-error.png',
      'arg' => 'emergency',
    );
    $severity[WATCHDOG_ALERT] = array(
      'title' => t('Alert'),
      'text' => t('Action must be taken immediately.'),
      'icon' => 'misc/watchdog-error.png',
      'arg' => 'alert',
    );
    $severity[WATCHDOG_CRITICAL] = array(
      'title' => t('Critical'),
      'text' => t('Critical conditions.'),
      'icon' => 'misc/watchdog-error.png',
      'arg' => 'critical',
    );
    $severity[WATCHDOG_ERROR] = array(
      'title' => t('Error'),
      'text' => t('Error conditions.'),
      'icon' => 'misc/watchdog-error.png',
      'arg' => 'error',
    );
    $severity[WATCHDOG_WARNING] = array(
      'title' => t('Warning'),
      'text' => t('Warning conditions.'),
      'icon' => 'misc/watchdog-warning.png',
      'arg' => 'warning',
    );
    $severity[WATCHDOG_NOTICE] = array(
      'title' => t('Notice'),
      'text' => t('Normal but significant condition.'),
      'icon' => '',
      'arg' => 'notice',
    );
    $severity[WATCHDOG_INFO] = array(
      'title' => t('Info'),
      'text' => t('Informational messages.'),
      'icon' => '',
      'arg' => 'info',
    );
    $severity[WATCHDOG_DEBUG] = array(
      'title' => t('Debug'),
      'text' => t('Debug-level messages.'),
      'icon' => '',
      'arg' => 'debug',
    );
  }

  return $code ? ($item ? $severity[$code][$item] :  $severity[$code]) : $severity;
}

/**
 * Helper function; retrieves severity icon.
 */
function _views_watchdog_get_severity_icon($code, $path) {

  static $severity_icon = array();

  if (!isset($severity_icon[$code])) {

    $path = trim($path);
    $title = _views_watchdog_get_severity($code, 'title');
    $severity_icon[$code] = (!empty($path) && is_file($path)) ? theme('image', $path, $title, $title) : '';
  }

  return $severity_icon[$code];
}

/**
 * Helper function; retrieves list of watchdog types.
 */
function _views_watchdog_get_type() {

  static $type = array();

  if (!$type) {

    $result = db_query('SELECT DISTINCT(type) FROM {watchdog} ORDER BY type');
    while ($record = db_fetch_object($result)) {
      $type[] = $record->type;
    }
  }

  return $type;
}

/**
 * Helper function; formats watchdog message.
 */
function _views_watchdog_format_message($message, $variables) {

  return $variables === 'N;' ? $message : t($message, unserialize($variables));
}
