<?php

/**
 * @file
 * Document catlog Form Customization done here.
 */
function covidien_doc_menu() {
  $items = array();
  $items['covidien/document'] = array(
    'title' => 'System Administration',
    'page callback' => 'covidien_doc_list',
    'access callback' => 'covidien_doc_check_access',
    'type' => MENU_CALLBACK,
    'file' => 'covidien_doc.pages_default.inc',
  );
  $items['covidien/document/filter/ajax'] = array(
    'title' => '',
    'page callback' => 'covidien_doc_filter_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'covidien_doc.pages_default.inc',
  );

  $items['covidien/document/reader/%'] = array(
    'page callback' => 'covidien_doc_reader',
    'access callback' => 'covidien_doc_check_access',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/document/ajax/%/%/%/%'] = array(
    'title' => '',
    'page callback' => 'covidien_doc_process_ajax_call',
    // arguments in the processing function
    'page arguments' => array(3, 4, 5, 6),
    'access callback' => 'covidien_doc_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/document/ajax/%/%/%/%/%'] = array(
    'title' => '',
    'page callback' => 'covidien_doc_process_ajax_call',
    // arguments in the processing function
    'page arguments' => array(3, 4, 5, 6, 7),
    'access callback' => 'covidien_doc_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['covidien/document/ajax/%/%/%/%/%/%'] = array(
    'title' => '',
    'page callback' => 'covidien_doc_process_ajax_call',
    // arguments in the processing function
    'page arguments' => array(3, 4, 5, 6, 7, 8),
    'access callback' => 'covidien_doc_check_access',
    'type' => MENU_CALLBACK,
  );
  $items['ahah-dochwlist-exposed-callback'] = array(
    'page callback' => 'dochwlist_search_exposed_filters_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ahah-swverson-exposed-callback'] = array(
    'page callback' => 'swverson_search_exposed_filters_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ahah-docswlist-exposed-callback'] = array(
    'page callback' => 'docswlist_search_exposed_filters_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ahah-conflist-exposed-callback'] = array(
    'page callback' => 'conflist_search_exposed_filters_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ahah-dochwtype-exposed-callback'] = array(
    'page callback' => 'dochwtype_search_exposed_filters_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/document/autocomplete'] = array(
    'title' => '',
    'page callback' => 'covidien_doc_autocomplete',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/document/ajax/%/%'] = array(
    'title' => '',
    'page callback' => 'covidien_doc_process_ajax_call',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Adding the JS
 */
function covidien_doc_init() {
  global $reader_abs_path;
  module_load_include('php', 'covidien_doc', 'includes/covidien_doc_query');
  module_load_include('module', 'covidien_named_config', 'module');
  $reader_abs_path = 'sites/default/files/reader';
  if ((arg(0) == 'covidien' && arg(2) == 'document')) {
    drupal_add_js(drupal_get_path('module', 'covidien_doc') . '/js/covidien_doc.js');
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ahah.js');
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_autocomplete.js');
  }
  doc_device_permission();
}

/**
 * GATEWAY-2534 Add document status type
 * @return type
 */
function covidien_doc_node_info() {
  return array(
    'documentstatus' => array(
      'name' => t('Document Status'),
      'module' => 'covidien_doc',
      'description' => t('A document has one status'),
    )
  );
}

/**
 * Autosugesstion
 * @parm
 * arg1: devicetype
 * arg2: search string
 */
function covidien_doc_autocomplete($arg1, $arg2) {
  $items = catalog_autocomplete('document', $arg1, $arg2);
  print drupal_to_js($items);
  exit();
}

/**
 * Form customization
 */
function covidien_doc_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'document_node_form') {
    drupal_add_js(drupal_get_path('module', 'covidien_doc') . '/js/covidien_doc.js');
    //Button customize
    $butcancel = array(
      '#type' => 'submit',
      '#access' => TRUE,
      '#value' => t('Cancel'),
      '#submit' => array('covidien_doc_form_cancel'),
      '#attributes' => array(
        'class' => 'secondary_submit',
      ),
    );
    //document status
    $doc_status_option = _get_document_status();
    $document_status = $form['#node'] ? $form['#node']->doc_status : '';
    $form['document_status'] = array(
      '#type' => 'select',
      '#name' => 'document_status',
      '#id' => 'document_status',
      '#options' => $doc_status_option,
      '#default_value' => $document_status,
      '#value' => $document_status,
    );
    $form['buttons']['cancel'] = $butcancel;
    unset($form['title']['#title']);
    //node reference type fileds
    unset($form['field_device_type']['#title']);
    unset($form['field_documnet_type']['#title']);
    unset($form['field_document_language']['#title']);
    //cck fields
    unset($form['field_document_part_number'][0]['#title']);
    unset($form['field_document_version'][0]['#title']);
    unset($form['field_document_file'][0]['#title']);
    unset($form['field_document_description'][0]['#title']);
    if ($form['nid']['#value']) {
      //edit
      $form['buttons']['submit']['#value'] = t('Save Changes');
      $form['field_device_type']['#pre_render'] = array('field_device_type_disabled');
      $butdelete = array(
        '#type' => 'submit',
        '#access' => TRUE,
        '#value' => t('Delete this Document'),
        '#submit' => array('covidien_doc_form_delete', 'document_form_submit'),
      );
      $form['buttons']['delete'] = $butdelete;
      $confirmdelmsg = t('Are you sure you want to delete this document?');
      $form['buttons']['delete']['#attributes'] = array(
        'onclick' => 'if(!confirm("' . $confirmdelmsg . '")){return false;}',
        'class' => 'secondary_submit',
      );
    } else {
      $form['field_device_type']['#default_value'][0]['nid'] = $_SESSION['default_dtype'];
      //add
      //Setting Default value
      if ($form['title']['#default_value'] == '') {
        $form['title']['#default_value'] = t('Enter Document Title');
      }
      if ($form['field_document_part_number'][0]['#default_value']['value'] == '') {
        $form['field_document_part_number'][0]['#default_value']['value'] = t('Enter Document Part #');
      }
      if ($form['field_document_version'][0]['#default_value']['value'] == '') {
        $form['field_document_version'][0]['#default_value']['value'] = t('Enter Document Version');
      }
      $form['buttons']['submit']['#value'] = t('Add New Document');
    }
    // Add a blank value to the dropdown.
    // $form['field_documnet_type']['#pre_render']=array(field_doc_type_pre_ren);
    unset($form['buttons']['preview']);
    $butfiltergo = array(
      '#type' => 'button',
      '#value' => t('Go'),
      '#attributes' => array('class' => 'secondary_submit', 'onclick' => 'return false;'),
    );
    $view_name = 'doc_lang';
    $hw_type_val = _getoptions($view_name, 0);
    $butfilter = array(
      '#type' => 'select',
      '#options' => $hw_type_val,
    );
    $form['filter']['doc_sw_list_sort'] = array(
      '#type' => 'hidden',
      '#name' => 'doc_sw_list_sort',
      '#default_value' => 'asc',
    );
    $form['filter']['doc_sw_list_order'] = array(
      '#type' => 'hidden',
      '#name' => 'doc_sw_list_order',
      '#default_value' => 'title',
    );
    $form['filter']['doc_sw_list_page'] = array(
      '#type' => 'hidden',
      '#name' => 'doc_sw_list_page',
      '#default_value' => '0',
    );
    $form['filter']['doc_hw_list_sort'] = array(
      '#type' => 'hidden',
      '#name' => 'doc_hw_list_sort',
      '#default_value' => 'asc',
    );
    $form['filter']['doc_hw_list_order'] = array(
      '#type' => 'hidden',
      '#name' => 'doc_hw_list_order',
      '#default_value' => 'title',
    );
    $form['filter']['doc_hw_list_page'] = array(
      '#type' => 'hidden',
      '#name' => 'doc_hw_list_page',
      '#default_value' => '0',
    );
    $form['filter']['filter_lang'] = $butfilter;
    $form['filter']['filter_lang']['#default_value'] = '';
    $form['filter']['go'] = $butfiltergo;
    //Get the hardware type list using views
    $view_name = 'hw_type';
    $hw_type_val = _getoptions($view_name, 'all');
    $butfilter_type = array(
      '#type' => 'select',
      '#options' => $hw_type_val,
    );
    $form['filter']['filter_type'] = $butfilter_type;
    $form['filter']['filter_type']['#default_value'] = '';
    $form['filter']['filter_type_go'] = $butfiltergo;
    //document node form add relation ship
    $relation_type_options[] = '--Select--';
    $relation_type_result = db_query("SELECT id, title FROM {named_configuration_type} WHERE name IN ('hardware_item', 'software_item', 'firmware_item')");
    while ($row = db_fetch_object($relation_type_result)) {
      $relation_type_options[$row->id] = $row->title;
    }
    $relation_type_value = 0;
    if ($form['nid']['#value']) {
      $relation_type_value = db_result(db_query("SELECT right_type FROM named_configuration_relation WHERE left_nid = %d", $form['nid']['#value']));
    }
    $form['doc_assoicate_type_selection'] = array(
      '#type' => 'select',
      '#id' => 'doc_assoicate_type_selection',
      '#options' => $relation_type_options,
      '#default_value' => $relation_type_value,
      '#value' => $relation_type_value,
    );
    // validate input  text
    $form['#validate'][] = 'document_form_validate';
    $form['buttons']['submit']['#submit'][] = 'document_form_submit';
  }
  if ($form_id == 'views_exposed_form' && $form['submit']['#id'] == 'edit-submit-documentlist') {
    // validate
    $form['#validate'][] = 'document_list_validate';

    $request = filter_xss_arr($_REQUEST);
    $form['submit']['#value'] = t('Filter');
    drupal_set_title(t('System Administration'));
    $form['field_device_type_nid']['#options']['All'] = t('All');
    $form['field_hw_type_nid']['#options']['All'] = t('All');
    $confnid = trim($request['field_config_value']);
    if ($confnid != 'All' && $confnid != '') {
      $form['field_hw_type_nid']['#options'] = config_hwtype($confnid);
    }
    $field_doc_hw_list_nid = array(
      '#type' => 'select',
      '#validated' => TRUE,
      '#options' => array('' => t('All')),
      '#default_value' => '',
    );
    $form['field_doc_hw_list_nid'] = $field_doc_hw_list_nid;
    $form['field_doc_hw_list_nid']['#options'][''] = t('All');
    $form['field_sw_status_nid']['#options']['All'] = t('All');
    $field_sw_title_value = array(
      '#type' => 'select',
      '#validated' => TRUE,
      '#options' => array('' => t('All'),),
      '#default_value' => '',
    );
    $form['title_1'] = $field_sw_title_value;
    array_unshift($form['#submit'], 'doc_manage_custom_filters');
    $form['field_device_type_nid']['#ahah'] = array(
      'event' => 'change',
      'wrapper' => 'edit-title-1',
      'method' => 'replace',
      'path' => 'ahah-docswlist-exposed-callback',
    );
    // Display the device type specific config using ahah
    $conflist_arr = array('All' => t('All'));
    $ref = array('advanced_view' => 'Configlist');
    if (is_numeric($request['field_device_type_nid']) && $request['field_device_type_nid'] > 0) {
      $ref['advanced_view_args'] = $request['field_device_type_nid'];
    }
    $res = _nodereference_potential_references_views($ref);
    $rescnt = count($res);
    if ($rescnt > 0) {
      foreach ($res as $key => $val) {
        //$conflist_arr[$key] = $val['title'];
        $conflist_arr[trim($val['title'])] = $val['title'];
      }
    }
    /**
     * default_value modified.
     */
    $field_config = array(
      '#type' => 'select',
      '#validated' => TRUE,
      '#options' => $conflist_arr,
      '#default_value' => 'All'
    );
    $form['field_config_value'] = $field_config;
    $form['field_config_value']['#ahah'] = array(
      'event' => 'change',
      'wrapper' => 'edit-title-1',
      'method' => 'replace',
      'path' => 'ahah-docswlist-exposed-callback',
    );
    $form['field_config_value']['#prefix'] = '<div id="config-ahah">';
    $form['field_config_value']['#suffix'] = '</div>';
    $form['#info']['filter-field_config_value'] = array(
      'operator' => 'field_config_value_op',
      'value' => 'field_config_value',
      'label' => '',
    );
    $form['#info']['filter-field_doc_hw_list_nid'] = array(
      'operator' => 'field_doc_hw_list_nid_op',
      'value' => 'field_doc_hw_list_nid',
      'label' => '',
    );
    $form['field_hw_type_nid']['#ahah'] = array(
      'event' => 'change',
      'wrapper' => 'edit-field-doc-hw-list-nid',
      'method' => 'replace',
      'path' => 'ahah-dochwlist-exposed-callback',
    );
    $field_config_value = $request['field_config_value'];
    //optimized
    $post['field_hw_type_nid'] = $request['field_hw_type_nid'];
    $post['field_device_type_nid'] = $request['field_device_type_nid'];
    $post['field_config_value'] = $request['field_config_value'];
    $hwlist_arr = getdoc_hwlist($post);
    if (count($hwlist_arr) == 0) {
      $hwlist_arr = array('' => t('All'));
    }
    $form['field_doc_hw_list_nid']['#options'] = $hwlist_arr;
    $form['field_doc_hw_list_nid']['#default_value'] = '';
    $form['title_1']['#ahah'] = array(
      'event' => 'change',
      'wrapper' => 'swverson-ahah',
      'method' => 'replace',
      'path' => 'ahah-swverson-exposed-callback',
    );
    if (!empty($request['field_config_value'])) {
      $swlistarr = _doc_config_swlist($request['field_device_type_nid'], $request['field_config_value']);
      $form['title_1']['#options'] = $swlistarr;
    } else {
      $swlistarr = _doc_config_swlist();
      $form['title_1']['#options'] = $swlistarr;
    }
    $swversion_arr = array('' => t('All'));
    //Title based version search
    global $user;
    $field_device_type_nid = $request['field_device_type_nid']; //Device type based version
    if ($field_device_type_nid == 'All') {
      $devicenid = $user->devices_nid;
      $tmp = explode(',', $devicenid);
      $devicenid = implode('+', $tmp);
    } else {
      $devicenid = $field_device_type_nid;
    }
    $post = array();
    $post['field_config_value'] = $request['field_config_value'];
    $post['field_device_type_nid'] = $devicenid;
    $post['title_1'] = $request['title_1'];
    $swversion_arr = get_swversion($post);
    $field_sw_version_value = array(
      '#type' => 'select',
      '#options' => $swversion_arr,
      '#default_value' => 'all',
    );
    $form['field_sw_version_value'] = $field_sw_version_value;
    $form['field_sw_version_value']['#prefix'] = '<div id="swverson-ahah">';
    $form['field_sw_version_value']['#suffix'] = '</div>';
    $form['title']['#autocomplete_path'] = 'covidien/document/autocomplete';
    $form['title']['#attributes'] = array(
      'onfocus' => 'parentSelected($("#edit-field-device-type-nid"), "document");',
    );
    $form['title']['#validated'] = TRUE;
    $form['title_2']['#validated'] = TRUE;
  }
}

function _get_document_status() {
  $result = db_query("SELECT nid, title FROM {node} WHERE type='documentstatus'");
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->nid] = $row->title;
  }
  return $rows;
}

function document_list_validate(&$form_state) {
  $document_title = $form_state['#post']['title'];
  if (!covidien_ui_input_validate($document_title)) {
    form_set_error('title', t('Invalid Document Title'));
  }
}

/**
 * validate document list
 */
function document_form_validate(&$form_state) {
  $document_title = $form_state['#post']['title'];
  if (!covidien_ui_input_validate($document_title)) {
    form_set_error('title', t('Invalid Document Title'));
  }

  $document_part = $form_state['#post']['field_document_part_number'][0]['value'];
  if (!covidien_ui_input_validate($document_part)) {
    form_set_error('field_document_part_number', t('Invalid Document Part'));
  }

  $document_version = $form_state['#post']['field_document_version'][0]['value'];
  if (!covidien_ui_input_validate($document_version)) {
    form_set_error('field_document_version', t('Invalid Document Version'));
  }


  $document_desc = $form_state['#post']['field_document_description'][0]['value'];
  if (!covidien_ui_input_validate($document_desc)) {
    form_set_error('field_document_description', t('Invalid Hardware Description'));
  }
}

/**
 * Implements hook_ajax_data_alter() to modify the ajax callback 
 * function to retrive the checked items.
 */
function covidien_doc_ajax_data_alter(&$object, $module, $view) {
  /*
   * Overwrite the 'Drupal.Views.Ajax.ajaxViewResponse' callback that's in Views core
   * as we don't want both callbacks running concurrently.
   */
  $view_details = $view->ajax_path[1];
  $display_id = $view->display['default']->handler->handlers['field']['title']->view->current_display;
  $is_check1 = ($view->name == 'doc_sw_list' || $view->name == 'doc_hw_list');
  $is_check2 = ($display_id == 'block_1' || $display_id == 'block_2');
  if ($is_check1 && $is_check2) {
    $object->__callbacks = array('Drupal.covidien_doc.Ajax');
  }
}

/**
 * Implements hook_views_api() to placed the exported view in module.
 */
function covidien_doc_views_api() {
  return array(
    'api' => '2.0',
  );
}

/**
 * Implements hook_views_default_views().
 */
function covidien_doc_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'covidien_doc') . '/views', '.inc');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function covidien_doc_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of delete based on requirement
 */
function covidien_doc_form_delete($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  $node->field_expiration_datetime[0]['value'] = date('Y-m-d h:i:s');
  $node->revision = TRUE;
  node_save($node);
}

/**
 * Implements cancel button.
 */
function covidien_doc_form_cancel() {
  form_set_error(NULL, '', TRUE);
  drupal_get_messages();
  drupal_goto('covidien/admin/document');
}

/**
 * Implements hook_nodeapi().
 * customized the node validation error message.
 */
function covidien_doc_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'document' && $op == 'validate') {
    drupal_add_js(drupal_get_path('module', 'covidien_doc') . '/js/covidien_doc.js');
    if ($node->op == $node->cancel) {
      $node_op = 'cancel';
      covidien_doc_form_cancel();
    } elseif ($node->op == $node->delete) {
      $node_op = 'delete';
    } else {
      $node_op = 'drupal';
    }
    if ($node_op == 'drupal') {
      $tmp_error = form_get_errors();
      form_set_error(null, '', TRUE);
      $errors = drupal_get_messages();
      if ($node->field_device_type[0]['nid'] == 0) {
        form_set_error('field_device_type', t('Invalid Device Type'));
      }
      if (trim($node->title) == '' || $node->title == t('Enter Document Title')) {
        form_set_error('title', t('Invalid Document Title'));
      }
      $is_check1 = (trim($node->field_document_part_number[0]['value']) == '');
      $is_check2 = ($node->field_document_part_number[0]['value'] == t('Enter Document Part #'));
      if ($is_check1 || $is_check2) {
        form_set_error('field_document_part_number', t('Invalid Document Part #'));
      }
      $is_check1 = (trim($node->field_document_version[0]['value']) == '');
      $is_check2 = ($node->field_document_version[0]['value'] == t('Enter Document Version'));
      if ($is_check1 || $is_check2) {
        form_set_error('field_document_version', t('Invalid Document Version'));
      }
      if ($node->field_documnet_type[0]['nid'] == 0) {
        form_set_error('field_documnet_type', t('Invalid Document Type'));
      }
      if ($node->field_document_language[0]['nid'] == 0) {
        form_set_error('field_document_language', t('Invalid Language'));
      }
      $is_check1 = (trim($node->field_document_file[0]['filepath']) == '');
      if ($is_check1 && $node->field_document_file[0]['fid'] == 0) {
        $msgtxt = "An unrecoverable error occurred. The uploaded ";
        $msgtxt .= "file likely exceeded the maximum file size that this server supports.";
        $chkmsg = t($msgtxt);
        if ($tmp_error['field_document_file_0'] != $chkmsg) {
          form_set_error('files[field_document_file_0]', t('Invalid File'));
        } else {
          $msg_txt = "An unrecoverable error occurred. The uploaded file ";
          $msg_txt .= "likely exceeded the maximum file size that this server supports.";
          $msg = t($msg_txt);
          form_set_error('files[field_document_file_0]', $msg);
        }
      }
    } else {
      form_set_error(NULL, '', TRUE);
      drupal_get_messages();
    }
  }
  if ($node->type == 'document' && $op == 'presave') {
    if (isset($node->nid) && $node->nid > 0) {
      //New file uploaded clear the field_sw_integrity_check.
      $query = doc_integrity_query();
      $old_field_res = db_fetch_object(db_query($query, $node->vid, $node->nid));
      $old_field_document_md5sum_value = $old_field_res->field_document_md5sum_value;
      $oldnode = node_load($node->nid);
      if ($node->field_document_file[0]['timestamp'] == $oldnode->field_document_file[0]['timestamp']) {
        $node->field_document_md5sum[0] = array(
          'value' => $old_field_document_md5sum_value
        );
      } else {
        $node->field_document_md5sum[0] = array('value');
      }
    } else {
      $node->field_document_md5sum[0] = array('value');
    }
    // Remove default value
    if ($node->field_document_description[0]['value'] == t('Enter Document Description')) {
      $node->field_document_description[0]['value'] = '';
    }
    $node->title = trim($node->title);
    $node->field_document_part_number[0]['value'] = trim($node->field_document_part_number[0]['value']);
    $node->field_document_version[0]['value'] = trim($node->field_document_version[0]['value']);

    //rename file GATEWAY-1994
    $old_fid = db_result(db_query("SELECT field_document_file_fid FROM {content_type_document} WHERE vid=%d AND nid=%d", $node->vid, $node->nid));
    if ($node->field_document_file[0]['fid'] != $old_fid) {
      module_load_include('module', 'covidien_sw');
      rename_upload_file($node->field_document_file[0]['filepath'], $node->field_document_file[0]['fid'], 'doc');
    }
  }
  //load document status
  if ($node->type == 'document' && $op == 'load') {
    $doc_status = db_result(db_query("SELECT doc_status FROM {content_type_document} WHERE vid=%d", $node->vid));
    $node->doc_status = $doc_status;
  }
  if ($node->type == 'document' && ($op == 'update' || $op == 'insert')) {
    //update document status
    $node->doc_status = check_plain($_POST['document_status']);
    db_query("UPDATE {content_type_document} SET doc_status=%d WHERE vid=%d", $node->doc_status, $node->vid);
    //save relation list 
    covidien_doc_form_save($node->nid);
  }
}

/**
 * Implements node form select option pre render functionality.
 */
function field_doc_type_pre_ren($element) {
  $element['nid']['nid']['#options'][0] = '';
  ksort($element['nid']['nid']['#options']);
  return $element;
}

// Access callback, for this allow anyone to access the 'ACTION_URL'
function covidien_doc_check_access() {
  return covidien_cot_admin_access_callback('document');
}

/**
 * AJAX callback function
 * @param
 * arg1:viewid
 * arg2:device type
 * arg6:lang used in software, type used in Hardware
 * arg3:sort
 * arg4:order
 * arg5:page
 */
function covidien_doc_process_ajax_call($arg1, $arg2, $arg3 = '', $arg4 = '', $arg5 = 0, $arg6 = '') {
  if ($arg2 == 'undefined') {
    return drupal_json(array('view_output' => 'undefined input', 'view_id' => $arg1,));
  }
  //devices access policy
  $arg2 = __covidien_access_devices_nid($arg2);
  $_SESSION['default_dtype'] = $arg2;
  if ($arg2 == 0) {
    $returnval = array(
      'view_id' => $arg1,
      'view_output' => t('Access denied'),
    );
    return drupal_json($returnval);
  }
  if ($arg3 == 'asc') {
    $block = 'block_1';
    $sort = 'ASC';
  } else {
    $block = 'block_2';
    $sort = 'DESC';
  }
  switch ($arg1) {
    case 'doc_hw_list':
      $output = _views_by_sort('doc_hw_list', $block, $sort, $arg4, array($arg2, $arg6), $arg5);
      return drupal_json(array('view_id' => 'doc_hw_list', 'view_output' => $output));
      break;
    case 'doc_sw_list':
      if ($arg6 != 0) {
        $output = _views_by_sort('doc_sw_list', $block, $sort, $arg4, array($arg2, $arg6), $arg5);
      } else {
        $output = _views_by_sort('doc_sw_list', $block, $sort, $arg4, array($arg2), $arg5);
      }
      return drupal_json(array('view_id' => 'doc_sw_list', 'view_output' => $output));
      break;
    case 'doc_hc_list':
      $output = _views_by_sort('doc_hc_list', $block, $sort, $arg4, array($arg2, $arg6), $arg5);
      return drupal_json(array('view_id' => 'doc_hc_list', 'view_output' => $output));
      break;
    case 'doc_sc_list':
      $output = _views_by_sort('doc_sc_list', $block, $sort, $arg4, array($arg2, $arg6), $arg5);
      return drupal_json(array('view_id' => 'doc_sc_list', 'view_output' => $output));
      break;
    case 'doc_fc_list':
      $output = _views_by_sort('doc_fc_list', $block, $sort, $arg4, array($arg2, $arg6), $arg5);
      return drupal_json(array('view_id' => 'doc_fc_list', 'view_output' => $output));
      break;
    default:
      $output = t('arg Missing');
      return drupal_json(array('view_output' => $output, 'view_id' => $arg1));
  }
}

/**
 * Implements functionality to customize the views sort.
 */
function _views_by_sort($view_name, $display = 'default', $sort = '', $order = '', $arg = array(), $page) {
  switch ($view_name) {
    case 'doc_hw_list':
      $output = '';
      $view = views_get_view($view_name);
      $view->set_display($display);
      $view->set_item($display, 'sort', 'random', NULL);
      if ($sort != '' && $order != '') {
        if ($order == 'title') {
          $view->add_item($display, 'sort', 'node', 'title', array('order' => $sort));
          $view->add_item($display, 'sort', 'node_data_field_hw_version', 'field_hw_version_value', array('order' => $sort));
        } elseif ($order == 'title-1') {
          $view->add_item($display, 'sort', 'node', 'title', array('relationship' => 'field_hw_type_nid', 'order' => $sort));
        }
      }
      break;
    case 'doc_sw_list':
      $output = '';
      $view = views_get_view($view_name);
      $view->set_display($display);
      $view->set_item($display, 'sort', 'random', NULL);
      if ($sort != '' && $order != '') {
        if ($order == 'title') {
          $view->add_item($display, 'sort', 'node', 'title', array('order' => $sort));
          $view->add_item($display, 'sort', 'node_data_field_sw_version', 'field_sw_version_value', array('order' => $sort));
        } elseif ($order == 'title-1') {
          $view->add_item($display, 'sort', 'node', 'title', array('relationship' => 'field_sw_language_nid', 'order' => $sort));
        } elseif ($order == 'title-2') {
          $view->add_item($display, 'sort', 'node', 'title', array('relationship' => 'field_sw_status_nid', 'order' => $sort));
        }
      }
      break;
    case 'doc_hc_list':
      return doc_get_cfg_list_table($arg[0], 'hardware_configuration', $arg[1]);
      break;
    case 'doc_sc_list':
      return doc_get_cfg_list_table($arg[0], 'software_configuration', $arg[1]);
      break;
    case 'doc_fc_list':
      return doc_get_cfg_list_table($arg[0], 'firmware_configuration', $arg[1]);
      break;
  }
  $items_per_page = 10;
  $view->display_handler->set_option('items_per_page', $items_per_page);
  $view->set_items_per_page($items_per_page);
  $view->pager['current_page'] = $page;
  //template.php covidien_theme_pager
  $view->set_arguments($arg);
  $view->build($display);
  $view->pre_execute();
  $output = $view->display_handler->preview();
  $view->post_execute();
  $output = $view->preview();
  return $output;
}

/**
 * Implements views default value clear on query build.
 */
function doc_manage_custom_filters($form, &$form_state) {
  //When converting from text box to select box remove default value.
  if ($form_state['values']['field_sw_version_value'] == 'all') {
    $form_state['values']['field_sw_version_value'] = '';
  }
  //Remove jquery default value
  if ($form_state['values']['title'] == t('Search - Enter document Title')) {
    $form_state['values']['title'] = '';
  }
}

/**
 * Views filter ahah
 */
function dochwlist_search_exposed_filters_callback() {
//optimized
  $opt = array();
  $post = filter_xss_arr($_POST);
  $hwtype = $post['field_hw_type_nid'];
  $devicenid = $post['field_device_type_nid'];
  $field_config_value = $post['field_config_value'];
  $opt = getdoc_hwlist($post);
  if (is_numeric($hwtype) && $hwtype > 0) {
    //$opt 
    $output = _doc_hwlist_option($opt);
  } else {
    $output = '<option value="All">' . t('All') . '</option>';
  }
  drupal_json($output);
}

/**
 * Helper function
 */
function _getfiltercckoptions($view_name, $opt, $arg = '') {
  $hw_type_opt = array();
  if ($opt == 'All') {
    $hw_type_opt['All'] = t('All');
  }
  $ref = array('advanced_view' => $view_name);
  if ($arg != '') {
    $ref['advanced_view_args'] = $arg;
  }
  $hw_type_val = _nodereference_potential_references_views($ref);
  $hw_type_cnt = count($hw_type_val);
  if ($hw_type_cnt > 0) {
    foreach ($hw_type_val as $hw_nid => $hwtype) {
      $hw_type_opt[$hw_nid] = $hwtype['title'];
    }
  }
  return $hw_type_opt;
}

/**
 * Callback function for ahah-swverson-exposed-callback
 */
function swverson_search_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $swversion_arr = get_swversion($post);
  $field_sw_version_value = array(
    '#type' => 'select',
    '#options' => $swversion_arr,
    '#name' => 'field_sw_version_value',
    '#id' => 'edit-field-sw-version-value',
  );
  $output = drupal_render($field_sw_version_value);
  drupal_json($output);
}

/**
 * Implements hook_views_query_alter.
 */
function covidien_doc_views_query_alter(&$view, &$query) {
  if ($view->name == 'documentlist') {
    $request = filter_xss_arr($_REQUEST);
    $remove = array();
    if ($query->where[0]['args'][0] == '') {
      // To remove the empty arg where clause.
      $remove[] = 0;
    }
    if ($query->where[0]['args'][1] == '') {
      // To remove the empty arg where clause.
      $remove[] = 1;
    } elseif ($query->where[0]['clauses'][1] == "(node_node_data_field_doc_hw_list.title) = ('%s')") {
      $query->where[0]['clauses'][1] = "(node_node_data_field_doc_hw_list.title) like ('%s')";
    }
    if ($query->where[0]['args'][2] == '') {
      // To remove the empty arg where clause.
      $remove[] = 2;
    }
    if ($query->where[0]['args'][3] == '') {
      // To remove the empty arg where clause.
      $remove[] = 3;
    }
    if ($query->where[0]['args'][4] == '') {
      // To remove the empty arg where clause.
      $remove[] = 4;
    } elseif ($query->where[0]['clauses'][4] == "(node_node_data_field_doc_sw_list.title) = ('%s')") {
      $query->where[0]['clauses'][4] = "(node_node_data_field_doc_sw_list.title) like ('%s')";
    }
    $noof = count($remove);
    if ($noof > 0) {
      foreach ($remove as $i) {
        unset($query->where[0]['clauses'][$i]);
        unset($query->where[0]['args'][$i]);
      }
    }
    //custom condition
    if (!empty($request['field_config_value']) && $request['field_config_value'] != 'All') {
      $config_value = $request['field_config_value'];
      $docid_valuearr = getdocid_config($config_value);
      $docid_value = implode(',', $docid_valuearr);
      if (!empty($docid_value)) {
        $query->where[0]['clauses'][] = 'node.nid IN(%s)';
        $query->where[0]['args'][] = $docid_value;
      } else {
        $query->where[0]['clauses'][] = 'node.nid =0';
      }
    }
    //GATEWAY-2544 Add product line filter
    $query->where[0]['clauses'][] = " (node.nid IN (SELECT content_field_device_type.nid FROM content_field_device_product_line 
      JOIN content_field_device_type ON content_field_device_product_line.nid = content_field_device_type.field_device_type_nid
      WHERE field_device_product_line_nid = '%s')) ";
    $query->where[0]['args'][] = $_SESSION['default_cot'];
  }
}

/**
 * Implements the hook_cron
 */
function covidien_doc_cron() {
  covidien_update_log('Run Start ' . __FUNCTION__);

  global $drupal_abs_path;
  $view = views_get_view('files_cron_doc');
  $view->init_display();
  $view->pre_execute();
  $view->execute();
  $result = $view->result;
  if (count($result) > 0) {
    $i = 0;
    foreach ($result as $rec) {
      $filepath = $rec->filepath;
      $sourcebasepath = $drupal_abs_path . $filepath;
      //added by Guangfeng: if the software package file does not exist in this server, skip the integrity check.
      if (!file_exists($sourcebasepath)) {
        continue;
      }
      $rep_output = upload_repo_custom($rec);
      if (empty($rep_output['error'])) {
        $filesha1 = $rep_output['filesha1'];
        $filesize = $rep_output['filesize'];
        $filepath = $rep_output['filepath'];
      } else {
        $filesha1 = '';
      }
      drupal_set_message($i . ' ' . print_r($rep_output, 1));
      //$node = node_load($rec->nid);
      $query = covidien_doc_cron_query(0);
      $node_qry = db_query($query, $rec->nid);
      $node = db_fetch_object($node_qry);
      if (trim($filesha1) != '') {
        $query1 = covidien_doc_cron_query(1);
        db_query($query1, $filesha1, $node->vid, $node->nid);
        $query2 = covidien_doc_cron_query(2);
        db_query($query2, $filepath, $filesize, $rec->fid);
        $msg = 'Content nid:' . $rec->nid . ' fid' . $rec->fid . ' Path:' . $rec->filepath;
        watchdog("covidien_doc", $msg, array(), WATCHDOG_INFO);
      } else {
        $msg = 'Content nid:' . $rec->nid . ' fid : ' . $rec->fid . ' Path:' . $rec->filepath;
        watchdog("covidien_doc", $msg, array(), WATCHDOG_ERROR);
      }
      $i++;
    }
  }
  global $reader_abs_path;
  //helper to remove files
  remove_reader_files($reader_abs_path);
  //update hardware sofware document files
  covidien_doc_create_file();
  covidien_doc_config_create_file();
  covidien_update_log('Finished ' . __FUNCTION__);
}

/**
 * Helper function for uploading a file to repo
 */
function upload_repo_custom($file) {
  global $drupal_abs_path;
  global $drupal_repourl;
  global $drupal_docrepo;
  $filepath = $file->filepath;
  $filepatharr = explode('/', $filepath);
  $filename = array_pop($filepatharr);
  $filepath = implode('/', $filepatharr);
  $sourcebasepath = $drupal_abs_path . $filepath . '/';
  $repourl = $drupal_repourl;
  $doc_type = $file->node_node_data_field_documnet_type_title;
  $doc_type = strtolower($doc_type);
  $doc_type = str_replace(' ', '', $doc_type);
  $path = $drupal_docrepo . $doc_type . '/';
  /**
   * $newfilename created with timestamp to avoid file update.
   */
  $newfilename = time() . '_' . $filename;
  $command = 'zip -j "' . $sourcebasepath . $newfilename . '.zip" "' . $sourcebasepath . $filename . '"';
  $out = array();
  exec($command, $out) or $output = array('error' => 'Compression of File Failed');
  if (!empty($output['error'])) {
    return $output;
  }
  if ($filename != "") {
    unlink($sourcebasepath . $filename) or $output = array('error' => 'Error on UNLINKING Original File');
  }
  if (!empty($output['error'])) {
    return $output;
  }
  encrypt_file($sourcebasepath, $newfilename, '.zip');
  $filesha1 = sha1_file($sourcebasepath . $newfilename . '.zip');
  // File size
  $filesize = filesize($sourcebasepath . $newfilename . '.zip');
  $command = 'curl -k -s https://' . $repourl . '/upload.php?path=' . $path . '  -F file=@"' . $sourcebasepath . $newfilename . '.zip"  -A "Mozilla/5.0  Firefox/1.5.0.2"';
  $out = array();
  $rtn = exec($command, $out);
  if (empty($rtn) || !preg_match('/.+uploaded$/', $rtn)) {
    $output = array('error' => 'Upload to Repository Failed');
  }
  if (!empty($output['error'])) {
    return $output;
  }
  if ($newfilename != "") {
    unlink($sourcebasepath . $newfilename . '.zip') or $output = array('error' => 'Error on UNLINKING Zip');
  }
  if (empty($output['error'])) {
    $newfilepath = $path . $newfilename . '.zip';
    return array('filesha1' => $filesha1, 'filepath' => $newfilepath, 'filesize' => $filesize, 'module' => 'document');
  } else {
    return $output;
  }
}

/**
 * Device type based software
 * 
 */
function docswlist_search_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $devicenid = $post['field_device_type_nid'];
  $_SESSION['default_dtype'] = $devicenid;
  $field_config_value = $post['field_config_value'];
  $sw_opt = _doc_config_swlist($devicenid, $field_config_value);
  $field_doc_sw_list_nid = array(
    '#type' => 'select',
    '#options' => $sw_opt,
    '#default_value' => '',
    '#name' => 'title_1',
    '#id' => 'edit-title-1',
  );
  $output = drupal_render($field_doc_sw_list_nid);
  drupal_json($output);
}

/**
 * Device type based configuration list.
 */
function conflist_search_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $_SESSION['default_dtype'] = $post['field_device_type_nid_value'];
  $conflist_arr = array('All' => t('All'));
  $ref = array('advanced_view' => 'Configlist');
  if (is_numeric($post['field_device_type_nid_value']) && $post['field_device_type_nid_value'] > 0) {
    $ref['advanced_view_args'] = $post['field_device_type_nid_value'];
  }
  $res = _nodereference_potential_references_views($ref);
  $rescnt = count($res);
  if ($rescnt > 0) {
    foreach ($res as $key => $val) {
      //$conflist_arr[$key] = $val['title'];
      $conflist_arr[trim($val['title'])] = $val['title'];
    }
  }
  $field_config = array(
    '#type' => 'select',
    '#options' => $conflist_arr,
    '#default_value' => 'all',
    '#name' => 'field_config_value',
    '#id' => 'edit-field-config-value',
  );
  $form['field_config_value'] = $field_config;
  $output = drupal_render($form);
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Device type, configuration based hardware type.
 */
function dochwtype_search_exposed_filters_callback() {
  $post = filter_xss_arr($_POST);
  $confnid = $post['field_config_value'];
  if ($confnid != 'All') {
    $option = config_hwtype($confnid);
  } else {
    $option = array('All' => t('All'));
    $ref = array('advanced_view' => 'hw_type');
    $res = _nodereference_potential_references_views($ref);
    $rescnt = count($res);
    if ($rescnt > 0) {
      foreach ($res as $key => $val) {
        $option[trim($key)] = $val['title'];
      }
    }
  }
  $_field = array(
    '#type' => 'select',
    '#options' => $option,
    '#default_value' => 'all',
    '#name' => 'field_hw_type_nid',
    '#id' => 'edit-field-hw-type-nid',
  );
  $output = drupal_render($_field);
  $output = strip_tags($output, '<option>');
  drupal_json(array('status' => 0, 'data' => $output));
}

/**
 * Helper function used in getdoc_hwlist
 */
function _doc_config_hwlist($devicenid, $confnid, $hwtype) {
  global $user;
  $arg = $devicenid;
  if (is_numeric($arg) && $arg > 0) {
    $valid_devices = explode(',', $user->devices_nid);
    if (in_array($arg, $valid_devices)) {
      $devicenid = $arg;
    } else {
      $devicenid = helper_queryin($user->devices_nid);
    }
  } else {
    $devicenid = helper_queryin($user->devices_nid);
  }
  if (!is_numeric($hwtype)) {
    $hwtype = 'all';
  }
  $option = array('All' => t('All'));
  $qry_process = _doc_config_hwlist_query($qry_arg, $confnid, $devicenid, $hwtype);
  $qry_str = $qry_process['qry_str'];
  $qry_arg = $qry_process['qry_arg'];
  $qry1 = db_query($qry_str, $qry_arg);
  while ($qry1_res = db_fetch_object($qry1)) {
    $hw_name = $qry1_res->node_node_data_field_device_config_hardware_title . ' r' . $qry1_res->node_node_data_field_device_config_hardware_node_data_field_hw_version_field_hw_version_value;
    $hw_namek = $qry1_res->node_node_data_field_device_config_hardware_title . ' ,r' . $qry1_res->node_node_data_field_device_config_hardware_node_data_field_hw_version_field_hw_version_value;
    $option[trim($hw_namek)] = $hw_name;
  }
  return $option;
}

/**
 * Helper function for dochwlist_search_exposed_filters_callback
 */
function _doc_hwlist_option($opt) {
  $element = '';
  $hw_namearr = array();
  if (count($opt) > 0) {
    foreach ($opt as $key => $val) {
      if ($val == 'All') {
        $sel = 'selected="selected"';
      } else {
        $sel = '';
      }
      $element .= '<option value="' . $key . '" ' . $sel . '>' . $val . '</option>';
    }
  }
  return $element;
}

/**
 * Helper function for docswlist_search_exposed_filters_callback
 */
function _doc_config_swlist($devicenid = 'all', $confnid = 'All') {
  global $user;
  $arg = $devicenid;
  $option = array('' => t('All'));
  if (is_numeric($arg) && $arg > 0) {
    $valid_devices = explode(',', $user->devices_nid);
    if (in_array($arg, $valid_devices)) {
      $devicenid = $arg;
    } else {
      $devicenid = $user->devices_nid;
      $tmp = explode(',', $devicenid);
      $devicenid = implode('+', $tmp);
    }
  } else {
    $devicenid = $user->devices_nid;
    $tmp = explode(',', $devicenid);
    $devicenid = implode('+', $tmp);
  }
  if ($confnid == 'All') {
    $ref = array('advanced_view' => 'doc_sw_list');
    $tmp = explode(',', $devicenid);
    $devicenid = implode('+', $tmp);
    $ref['advanced_view_args'] = $devicenid;
    $res = _nodereference_potential_references_views($ref);
    $res_cnt = count($res);
    if ($res_cnt > 0) {
      foreach ($res as $sw_nid => $sw) {
        $option[trim($sw['title'])] = $sw['title'];
      }
    }
  } else {
    $view = views_get_view('doc_configuration_list');
    $view->init_display();
    $view->set_arguments(array($confnid, $devicenid));
    $view->pre_execute();
    $view->execute();
    $result = $view->result;
    $result_cnt = count($result);
    $option = array('' => t('All'));
    if ($result_cnt > 0) {
      foreach ($result as $rec) {
        $vn = 'node_node_data_field_device_config_software_node_data';
        $vn .= '_field_expiration_datetime_field_expiration_datetime_value';
        $expdatetime = $rec->$vn;
        if ($rec->node_node_data_field_device_config_software_nid > 0 && empty($expdatetime)) {
          $config_software_title = $rec->node_node_data_field_device_config_software_title;
          $option[trim($config_software_title)] = $config_software_title;
        }
      }
    }
  }
  return $option;
}

/**
 * Helper function to query the doc associated hw,sw
 */
function getdocid_config($configval) {
  $docid = array();
  $qry = getdocid_config_query();
  $configres = db_query($qry, $configval, $configval);
  while ($configrec = db_fetch_object($configres)) {
    $docid[] = $configrec->nid;
  }
  return $docid;
}

// Helper function for hw type
function config_hwtype($confnid = 0) {
  $view = views_get_view('doc_configuration_list');
  $view->init_display();
  $view->set_arguments(array($confnid));
  $view->pre_execute();
  $view->execute();
  $result = $view->result;
  $result_cnt = count($result);
  $option = array('All' => t('All'));
  if ($result_cnt > 0) {
    foreach ($result as $rec) {
      $expdatetime = $rec->node_node_data_field_device_config_hardware_node_data_field_expiration_datetime_field_expiration_datetime_value;
      if (empty($expdatetime)) {
        $option[$rec->node_node_data_field_hw_type_nid] = $rec->node_node_data_field_hw_type_title;
      }
    }
  }
  return $option;
}

//Helper function for dochwlist_search_exposed_filters_callback
function getdoc_hwlist($post) {
  global $user;
  $opt = array();
  $field_config_value = $post['field_config_value'];
  if ($field_config_value == 'All') {
    if ($post['field_hw_type_nid'] > 0) {
      $hwtype = $post['field_hw_type_nid'];
      if ($post['field_device_type_nid'] > 0) {
        $devicenid = $post['field_device_type_nid'];
      } else {
        $devicenid = helper_queryin($user->devices_nid);
      }
      //$opt =_getfilteroptions('doc_hw_list','All',$arg);
      $qry_arg = array();
      $opt[''] = t('All');
      $qry_process = getdoc_hwlist_query($qry_arg, $hwtype, $user, $devicenid);
      $qry_str = $qry_process['qry_str'];
      $qry_arg = $qry_process['qry_arg'];
      $qry1 = db_query($qry_str, $qry_arg);
      while ($qry1_res = db_fetch_object($qry1)) {
        $hw_name = $qry1_res->node_title . ' r' . $qry1_res->hardware_version;
        $hw_namek = $qry1_res->node_title . ' ,r' . $qry1_res->hardware_version;
        $opt[trim($hw_namek)] = $hw_name;
      }
    }
  } elseif (is_numeric($post['field_hw_type_nid']) && $post['field_hw_type_nid'] > 0) {
    $hwtype = $post['field_hw_type_nid'];
    $devicenid = $post['field_device_type_nid'];
    $field_config_value = $post['field_config_value'];
    $opt = _doc_config_hwlist($devicenid, $field_config_value, $hwtype);
  }
  return $opt;
}

//helper function for swverson_search_exposed_filters_callback
function get_swversion($post) {
  global $user;
  $field_config_value = $post['field_config_value'];
  $field_device_type_nid = $post['field_device_type_nid'];
  if ($field_device_type_nid == 'All') {
    $devicenid = $user->devices_nid;
    $devicenid = str_replace(",", "+", $devicenid);
  } else {
    $devicenid = $field_device_type_nid;
  }
  if ($field_config_value == 'All') {
    $swversion_arr = array('' => t('All'));
    //Title based search
    if ($post['title_1'] != '') {
      $view = views_get_view('doc_sw_version');
      $view->init_display();
      $view->set_arguments(array($post['title_1'], $devicenid));
      $view->pre_execute();
      $view->execute();
      $result = $view->result;
      $rescnt = count($result);
      if ($rescnt > 0) {
        foreach ($result as $key => $val) {
          $swversion_arr[trim($val->node_data_field_sw_version_field_sw_version_value)] = $val->node_data_field_sw_version_field_sw_version_value;
        }
      }
    }
  } else {
    $swversion_arr = array('' => t('All'));
    $swtitle = $post['title_1'];
    $view = views_get_view('doc_configuration_list');
    $view->init_display();
    $view->set_arguments(array($field_config_value, $devicenid, 'all', $swtitle));
    $view->pre_execute();
    $view->execute();
    $result = $view->result;
    $result_cnt = count($result);
    $swversion_arr = array('' => t('All'));
    if ($result_cnt > 0) {
      foreach ($result as $rec) {
        $expdatetime = $rec->node_node_data_field_device_config_software_node_data_field_expiration_datetime_field_expiration_datetime_value;
        if ($rec->node_node_data_field_device_config_software_nid > 0 && empty($expdatetime)) {
          $config_software_ver = $rec->node_node_data_field_device_config_software_node_data_field_sw_version_field_sw_version_value;
          $swversion_arr[trim($config_software_ver)] = $config_software_ver;
        }
      }
    }
  }
  return $swversion_arr;
}

/**
 * Helper function for downloading a file to temp
 */
function download_repo_custom($file) {
  global $drupal_repourl, $drupal_abs_path, $user, $reader_abs_path;
  $ch = curl_init();
  $url = 'https://' . $drupal_repourl . '/' . str_replace(' ', '%20', $file->filepath);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $resp = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $data = curl_exec($ch);
  curl_close($ch);

  if (($resp != 0 && $resp != 200) || $data == '') {
    return array('error' => 'File not found');
  }
  if ($reader_abs_path == '') {
    return array('error' => 'reader_abs_path variable missing');
  }
  $ext = '.zip';
  if ($file->filename) {
    $fileinfo = pathinfo($file->filename);
    $filepath = stristr(str_replace($ext, '', basename($file->filepath)), $file->filename['filename']); //L01_Staff-Paper.1414659254.pdf
    $filename = basename($file->filepath); //1414659273_L01_Staff-Paper.1414659254.pdf.zip
  } else {
    return array('error' => 'Unknown file name!');
  }
  $readerpath = $reader_abs_path . '/' . $user->uid;
  //helper to remove files
  remove_reader_files($readerpath);
  file_check_directory($reader_abs_path, FILE_CREATE_DIRECTORY);
  file_check_directory($readerpath, FILE_CREATE_DIRECTORY);
  $readerpath = $readerpath . '/';

  $sourcebasepath = $drupal_abs_path . $readerpath; //sites/default/files/reader/1/
  //write file to local
  file_check_directory($sourcebasepath, FILE_CREATE_DIRECTORY);
  $sourcebasepath = $sourcebasepath . '/';
  file_put_contents($sourcebasepath . $filename . $ext, $data); //sites/default/files/reader/1/1414659273_L01_Staff-Paper.1414659254.pdf.zip.zip
  decrypt_file($sourcebasepath, $filename, $ext);
  //unzip file
  $command = 'unzip -o ' . str_replace(' ', '\ ', $sourcebasepath . $filename . $ext) . ' -d ' . $sourcebasepath;
  $out = array();
  exec($command, $out) or $output = array('error' => 'UnCompression of File Failed');
  if (!empty($output['error'])) {
    return $output;
  }
  //unzip file end
  $tmpfile = $sourcebasepath . $filepath; //sites/default/files/reader/1/L01_Staff-Paper.1414659254.pdf
  if (!file_exists($tmpfile)) {
    return array('error' => 'Unzip file error!');
  }
  $password = rand(0, 9) . rand(0, 9) . substr($user->name, 0, 4) . $user->uid;
  $rand = rand(0, 9999);
  $destFile = $readerpath . $rand . 'protected_' . $filepath . '.pdf';
  //user lib read pdf file
  _views_pdf_include_pdf_lib();

  $pdf = & new PdfTemplate();
  $pagecount = $pdf->setSourceFile($tmpfile);
  //Copy all pages from the old unprotected pdf to the new one.
  for ($loop = 1; $loop <= $pagecount; $loop++) {
    $tplidx = $pdf->importPage($loop);
    $pdf->addPage();
    $pdf->SetFont("helvetica", "B", 14);
    $pdf->useTemplate($tplidx);
    $pdf->Text(1, 1, format_date(time(), 'custom', 'm/d/Y') . ' viewed by: ' . $user->name);
  }
  //Protect the new pdf file, and allow no printing, copy, etc. and
  //leave only reading allowed.
  $pdf->SetProtection(array('print', 'copy', 'modify', 'annot-forms'), $password);
  $js = "this.closeDoc(1);";
  $pdf->IncludeJS($js);
  $pdf->Output($destFile, 'F');
  //pdf file end
  if (file_exists($sourcebasepath . $filename)) {
    unlink($sourcebasepath . $filename);
  }
  if ($sourcebasepath . $filename . $ext) {
    unlink($sourcebasepath . $filename . $ext);
  }
  $output = array('password' => $password, 'filepath' => $destFile, 'error' => '');
  return $output;
}

/**
 * Helper function to Dycrypt.
 */
function decrypt_file($sourcebasepath, $filename, $ext) {
  global $encrypt_key;
  $size = 1048576;
  $source_file = $sourcebasepath . $filename . $ext;
  $decrypt_file = $sourcebasepath . $filename . '_decrypt' . $ext;
  $fp = fopen($source_file, 'r');
  $fpw = fopen($decrypt_file, 'w');
  $key = $encrypt_key;
  $alg = MCRYPT_RIJNDAEL_128;
  $mode = MCRYPT_MODE_CFB;
  $iv = "123^&6781#@$456%";
  // read some data
  while (!feof($fp)) {
    $contents = fread($fp, $size);
    $data = mcrypt_decrypt($alg, md5($key), $contents, $mode, $iv);
    fwrite($fpw, $data);
  }
  fclose($fp);
  fclose($fpw);
  unlink($source_file);
  rename($decrypt_file, $source_file);
}

/**
 * callback function
 */
function covidien_doc_reader($arg1 = '') {
  global $base_url, $user;
  $output = '';
  $view = views_get_view('doc_reader');
  $view->init_display();
  $view->set_arguments(array($arg1));
  $view->pre_execute();
  $view->execute();
  $result = $view->result;
  $result_cnt = count($result);
  if ($result_cnt > 0) {
    $file = $result[0];
  }
  $validdevice = $user->devices_access['document_reader'];
  $type = $file->node_node_data_field_documnet_type_title;
  $devicetype = $file->node_data_field_device_type_field_device_type_nid;
  $case_one = ($user->covidien_user == 'Yes');
  if ($user->product_line > 0) {
    $plnode = node_load($user->product_line);
  }
  $node_pl_qry = node_pl_query();
  $node_pl = db_fetch_object(db_query($node_pl_qry, $devicetype));
  $case_two = ($plnode->title == 'Ventilation' && (array_key_exists($devicetype, $validdevice) && $type == 'Service Manual'));
  $case_doc = ($file->node_data_field_doc_external_users_field_doc_external_users_value == 1);
  $case_three = ($plnode->title != 'Ventilation');
  $case_default = ($node_pl->title == $plnode->title);
  if ($user->uid == 1 || (($case_one || (($case_two || $case_three) && $case_doc)) && $case_default)) {
    $fileembed = download_repo_custom($file);
    if (empty($fileembed['error'])) {
      $output .= t('Your Password:') . ' <b>' . $fileembed['password'] . '</b>';
      $filearr = explode('.', $fileembed['filepath']);
      $pdffile = $base_url . '/' . $filearr[0];
      $pdffile = base64_encode($pdffile);
      $pdffile = urlencode($pdffile);
      $output .= '<embed width="800" height="600" src="' . $base_url . '/' . $fileembed['filepath'] . '#toolbar=0&navpanes=0">';
    } else {
      $output = $fileembed['error'];
    }
  } else {
    drupal_goto("covidien/page-not-found");
  }
  return $output;
}

/**
 * Helper function to get document view permission based on device.
 */
function doc_device_permission() {
  global $user;
  $option = array();
  $qry_str = doc_device_permission_query();
  $qry1 = db_query($qry_str, $user->product_line, $user->name);
  while ($qry1_res = db_fetch_object($qry1)) {
    $option[$qry1_res->devicetype_nid] = $qry1_res->devicetype;
  }
  $user->devices_access['document_reader'] = $option;
  return $option;
}

/**
 * Helper function to delete the files
 */
function remove_reader_files($readerpath) {
  global $drupal_abs_path;
  if ($readerpath != '') {
    $files = file_scan_directory($drupal_abs_path . $readerpath, '.');
    $filecnt = count($files);
    foreach ($files as $key => $filepath) {
      unlink($key);
    }
  }
  return 1;
}

/*
 * create file when submit
 */

function document_form_submit(&$form_state) {
  $device_type_nid = $form_state['#node']->field_device_type[0]['nid'];
  increase_components_version();
  module_load_include('module', 'covidien_ui');
  covidien_ui_create_device_type_file($device_type_nid, '_document');
  covidien_ui_create_device_type_file($device_type_nid, '_docconfig');
  covidien_doc_create_file($device_type_nid);
  covidien_doc_config_create_file($device_type_nid);
  drupal_goto('covidien/admin/document');
}

/*
 * create document infomation files
 */

function covidien_doc_create_file($device_type = 0) {
  global $hw_sw_config, $hw_sw_config_url;
  if (!file_exists($hw_sw_config)) {
    mkdir($hw_sw_config, 0777);
  }
  //GATEWAY-2734 remove Limited Release
  $sql = "SELECT d.field_doc_external_users_value AS external_user,
    d.field_documnet_type_nid AS doc_type, d.nid, n.title AS name,
    d.field_document_part_number_value AS part_number, d.field_document_version_value AS revision,
    ddn.title AS documenttype, f.filename, f.filepath, f.filesize, field_document_description_value,field_document_language_nid,
    field_document_md5sum_value AS md5_value ,field_document_upload_datetime_value, 
    dtn.title AS device_type, ed.field_expiration_datetime_value AS expiration
    FROM {content_type_document} d
    JOIN {files} f ON d.field_document_file_fid = f.fid AND d.field_document_md5sum_value IS NOT NULL 
    JOIN {content_field_device_type} dt ON dt.vid = d.vid 
    JOIN {node} dtn ON dt.field_device_type_nid = dtn.nid 
    JOIN {node} ddn ON d.field_documnet_type_nid = ddn.nid
    JOIN {node} n ON n.nid = d.nid AND d.vid = n.vid 
    JOIN {node} dsn ON d.doc_status = dsn.nid AND dsn.title IN ('In Production', 'Limited Release')
    LEFT JOIN {content_field_expiration_datetime} ed ON ed.vid = n.vid 
    WHERE ed.field_expiration_datetime_value IS NULL";
  if ($device_type) {
    $sql .= " AND dtn.nid = %d ";
  }
  $result = db_query($sql, $device_type);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->device_type][$row->nid]['document_type'] = $row->documenttype;
    $rows[$row->device_type][$row->nid]['expiration'] = $row->expiration ? $row->expiration : 0;
    $rows[$row->device_type][$row->nid]['external_user'] = $row->external_user;
    $rows[$row->device_type][$row->nid]['file_size'] = $row->filesize;
    $rows[$row->device_type][$row->nid]['hash'] = md5(json_encode(array(
      'name' => strtolower($row->name),
      'revision' => $row->revision,
      'part_number' => $row->part_number)));
    $rows[$row->device_type][$row->nid]['md5'] = $row->md5_value;
    $rows[$row->device_type][$row->nid]['name'] = $row->name;
    $rows[$row->device_type][$row->nid]['nid'] = $row->nid;
    $rows[$row->device_type][$row->nid]['part_number'] = $row->part_number;
    $rows[$row->device_type][$row->nid]['revision'] = $row->revision;
    $rows[$row->device_type][$row->nid]['status'] = 'update';
    $rows[$row->device_type][$row->nid]['filepath'] = $row->filepath;
  }
  $files = array();
  foreach ($rows as $device_type => $document) {
    if (!$device_type) {
      continue;
    }
    $file_name = $device_type . '_document';
    $content = '<?xml version="1.0" encoding="UTF-8"?>';
    $content .= '<components>';
    foreach ($document as $item) {
      $content .= '<component type="document">';
      $content .= '<documentType>' . $item['document_type'] . '</documentType>';
      $content .= '<expiration>' . $item['expiration'] . '</expiration>';
      $content .= '<external_user>' . $item['external_user'] . '</external_user>';
      $content .= '<file_size>' . $item['file_size'] . '</file_size>';
      $content .= '<hash>' . $item['hash'] . '</hash>';
      $content .= '<md5>' . $item['md5'] . '</md5>';
      $content .= '<name>' . $item['name'] . '</name>';
      $content .= '<nid>' . $item['nid'] . '</nid>';
      $content .= '<part_number>' . $item['part_number'] . '</part_number>';
      $content .= '<revision>' . $item['revision'] . '</revision>';
      $content .= '<status>' . $item['status'] . '</status>';
      $content .= '<uri>' . $hw_sw_config_url . '/' . $item['filepath'] . '</uri>';
      $content .= '</component>';
    }
    $content .= '</components>';
    file_put_contents($hw_sw_config . '/' . $file_name, $content);
    $files[] = $file_name;
  }
  return $files;
}

/**
 * create file document software relationship
 */
function covidien_doc_config_create_file($device_type = 0) {
  global $hw_sw_config;
  if (!file_exists($hw_sw_config)) {
    mkdir($hw_sw_config, 0777);
  }
  //GATEWAY-2734 remove Limited Release
  //add hardware hash to document config file
  $sql = "SELECT dtn.title AS device_type, d.nid, dn.title AS document_name, d.field_document_part_number_value, d.field_document_version_value,
    sn.nid AS software_nid, sn.title AS software_name, s.field_sw_part_value, s.field_sw_version_value,
    hn.nid AS hardware_nid, hn.title AS hardware_name, h.field_hw_part_value, h.field_hw_version_value
    FROM content_type_document d 
    JOIN node dn ON d.vid = dn.vid
    JOIN named_configuration_relation r ON r.left_nid = d.nid 
    JOIN content_field_device_type dt ON d.vid = dt.vid
    JOIN node dtn ON dt.field_device_type_nid = dtn.nid
    JOIN node dsn ON d.doc_status = dsn.nid AND dsn.title IN ('In Production', 'Limited Release')
    LEFT JOIN content_field_expiration_datetime edd ON edd.vid = dn.vid 
    LEFT JOIN node sn ON r.right_nid = sn.nid AND sn.type = 'software'
    LEFT JOIN content_type_software s ON s.vid = sn.vid
    LEFT JOIN node ssn ON s.field_sw_status_nid = ssn.nid AND ssn.title IN ('In Production', 'Limited Release') 
    LEFT JOIN content_field_expiration_datetime eds ON eds.vid = sn.vid 
    LEFT JOIN node hn ON r.right_nid = hn.nid AND hn.type = 'hardware'
    LEFT JOIN content_type_hardware h ON hn.vid = h.vid 
    LEFT JOIN content_field_expiration_datetime edh ON edh.vid = hn.vid 
    LEFT JOIN node hsn ON h.hw_status = hsn.nid AND hsn.title IN ('In Production', 'Limited Release')
    WHERE edd.field_expiration_datetime_value IS NULL 
    AND eds.field_expiration_datetime_value IS NULL 
    AND edh.field_expiration_datetime_value IS NULL";
  if ($device_type) {
    $sql .= " AND dtn.nid = %d ";
  }
  $result = db_query($sql, $device_type);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->device_type][$row->nid]['hash'] = md5(json_encode(array(
      'name' => strtolower($row->document_name),
      'revision' => $row->field_document_version_value,
      'part_number' => $row->field_document_part_number_value)));
    if ($row->software_nid) {
      $rows[$row->device_type][$row->nid]['software'][$row->software_nid] = md5(json_encode(array(
        'name' => strtolower($row->software_name),
        'revision' => $row->field_sw_version_value,
        'part_number' => $row->field_sw_part_value)));
    } else {
      $rows[$row->device_type][$row->nid]['software'][$row->hardware_nid] = md5(json_encode(array(
        'name' => strtolower($row->hardware_name),
        'revision' => $row->field_hw_version_value,
        'part_number' => $row->field_hw_part_value)));
    }
  }
  $files = array();
  foreach ($rows as $device_type => $document) {
    if (!$device_type) {
      continue;
    }
    $file_name = $device_type . '_docconfig';
    $content = '<?xml version="1.0" encoding="UTF-8"?>';
    $content .= '<components>';
    foreach ($document as $item) {
      $content .= '<component type="docRelationship">';
      $content .= '<hash>' . $item['hash'] . '</hash>';
      $content .= '<software>';
      foreach ($item['software'] as $software_hash) {
        $content .= '<component>' . $software_hash . '</component>';
      }
      $content .= '</software>';
      $content .= '</component>';
    }
    $content .= '</components>';
    file_put_contents($hw_sw_config . '/' . $file_name, $content);
    $files[] = $file_name;
  }
  return $files;
}

function doc_get_cfg_list_table($device_type_id = '', $config_type, $config_id = '') {
  $product_line = $product_line ? $product_line : check_plain($_GET['product_line']);
  $device_type_id = $device_type_id ? $device_type_id : check_plain($_GET['device_type_id']);
  // pagesize need to customize
  $page_size = 10;
  // sql need to customize
  $sql = "SELECT vc.nid, nc.title, vc.version, vc.description
			FROM {named_configuration} vc
			JOIN {node} nc ON nc.nid = vc.nid
			LEFT JOIN {named_configuration_type} nt ON vc.type_id = nt.id
			WHERE nc.status = 1 ";
  // sql extends start
  $args = array();

  if ($device_type_id && is_numeric($device_type_id)) {
    $sql .= " AND vc.device_type_id = %d ";
    $args[] = $device_type_id;
  }
  $sql .= " AND nt.name = '%s' ";
  $args[] = $config_type;
  $header = array(
    array('width' => '10%'),
    array('data' => t('Name & Version'), 'field' => 'nc.title', 'sort' => 'desc', 'onclick' => 'return filter_doc_cfg_table($(\'#doc_assoicate_type_selection option:selected\').val(),$(this).find(\'a\').attr(\'href\'));'),
    array('data' => t('Description'), 'field' => 'vc.description', 'onclick' => 'return filter_doc_cfg_table($(\'#doc_assoicate_type_selection option:selected\').val(),$(this).find(\'a\').attr(\'href\'));'),
  );
  $sql .= check_plain($_GET['sort']) ? tablesort_sql($header) : " ORDER BY nc.changed DESC ";
  $ref_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name='%s'", $config_type));
  $refs = array();
  if (is_numeric($config_id)) {
    $refs = get_configuration_ref_list($config_id);
  }
  // sql extends end
  $result = pager_query($sql, $page_size, 0, NULL, $args);
  while ($row = db_fetch_object($result)) {
    //check reference
    $checked = check_ref_checked($row->nid, $refs, $ref_type);
    $rows[$row->nid]['nid'] = "<input type=\"checkbox\" class=\"form-checkbox\" {$checked['checked']} value=\"$row->nid\" id=\"reference_list-$row->nid\" name=\"reference_list[$ref_type][$row->nid]\">";
    $rows[$row->nid]['title'] = l($row->title . " " . $row->version, "named-config/edit/$row->nid", array('attributes' => array('configid' => $row->nid, 'target' => '_blank')));
    $rows[$row->nid]['description'] = $row->description;
  }

  // table head need to customize
  $output = '';
  $output .= theme_table($header, $rows);
  $output .= theme('pager', NULL, 10, 0);

  return $output;
}

function covidien_doc_form_save($doc_nid) {
  $post = filter_xss_arr($_POST);
  $cfg_list = $post['reference_list'];
  $relation_type = $post['doc_assoicate_type_selection'];
  //save to document relation
  module_load_include('module', 'covidien_firmware', 'module');
  $left_type = db_result(db_query("SELECT id FROM {named_configuration_type} WHERE name = '%s'", 'document_item'));
  //relation_type hardware software firmware item
  save_config_item_relation($doc_nid, $left_type, $cfg_list, $relation_type);
}

function covidien_doc_views_data() {
  $data['content_type_document']['table']['group'] = t('Content Custom');
  $data['content_type_document']['table']['base'] = array(
    'field' => 'vid',
    'title' => t('Document table'),
    'help' => t('content_type_document doc_status can be related to nodes.'),
    'weight' => -10,
  );
  $data['content_type_document']['table']['join'] = array(
    'node' => array(
      'left_field' => 'vid',
      'field' => 'vid',
    ),
  );
  $data['content_type_document']['doc_status'] = array(
    'title' => t('Document - doc_status'),
    'help' => t('doc_status that references a node.'),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('Document status'),
    ),
  );
  return $data;
}

/**
 * Implements hook_theme()
 * @return type
 */
function covidien_doc_theme() {
  return array(
    'covidien_doc_list' => array(
      'template' => 'covidien_doc_list',
      'arguments' => array('form' => NULL, 'get' => NULL),
    ),
  );
}
