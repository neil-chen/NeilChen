<?php

/**
 * @file
 * This file used to customize the drupal node form based on the covidien UI.
 */

/**
 * Implements hook_init().
 */
function covidien_ui_init() {
  drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien_ui_common.js');
  module_load_include('inc', 'covidien_ui', 'covidien_ui_query');
  module_load_include('inc', 'covidien_ui', 'covidien_common');
  /**
   * Used for text wrap
   */
  global $wordwraplength, $wordwrapchar, $useremail_wordwraplength;
  $wordwraplength = 30;
  $useremail_wordwraplength = 35;
  $wordwrapchar = '<br/>';
  // end
  /**
   * Used for autologout
   */
  $requesturi = request_uri();
  $requesturi_arr = explode('/', $requesturi);
  if (in_array('filefield', $requesturi_arr)) {
    $_SESSION['lastaccess'] = time();
  }
  //end  
  if (!isset($_REQUEST['field_device_type_nid'])) {
    $ctype = array('hardware', 'software', 'document', 'configuration');
    $cond1 = (arg(1) == 'admin' && in_array(arg(2), $ctype) && is_numeric($_SESSION['default_dtype']));
    if ($cond1) {
      global $base_url;
      drupal_goto($base_url . '/' . implode('/', arg()) . "?field_device_type_nid=" . $_SESSION['default_dtype']);
    }
  }
  if (!isset($_REQUEST['device_type'])) {
    $ctype = array('device');
    $cond1 = (arg(0) == 'covidien' && in_array(arg(1), $ctype) & (arg(2) == '') && is_numeric($_SESSION['default_dtype']));
    if ($cond1) {
      global $base_url;
      drupal_goto($base_url . '/' . implode('/', arg()) . "?device_type=" . $_SESSION['default_dtype']);
    }
  }
}

/**
 * Helper function to the select.
 * $product_line == 0 use session 
 * $product_line == 'all' get all
 */
function field_device_type_select($device_type_id = 0, $product_line = 0, $gateway_version = null) {
  $form = array();
  $device_type_id = $device_type_id ? $device_type_id : check_plain($_GET['device_type_id']); //get
  $device_type_id = $device_type_id ? $device_type_id : check_plain($_SESSION['default_dtype']);  //session
  if (!$product_line) {
    $product_line = $_SESSION['default_cot'];
  }

  $arg = array();
  $sql = "SELECT node.nid, node.title FROM {node} JOIN {content_field_device_product_line} pl ON node.nid = pl.nid AND node.type = 'devicetype'
      JOIN {content_type_devicetype} dt on dt.nid = node.nid WHERE node.status = 1 ";

  if ($gateway_version) {
    $sql .= " AND dt.device_type_gateway_version >= '%s' ";
    $arg[] = $gateway_version;
  }

  if ($product_line && is_numeric($product_line)) {
    $sql .= " AND pl.field_device_product_line_nid = %d";
    $arg[] = $product_line;
  }
  $result = db_query($sql, $arg);

  $rows = $options = array();
  $rows['All'] = t('All');
  $options['All'] = t('All');
  while ($row = db_fetch_object($result)) {
    $rows[$row->nid] = $row->nid;
    $options[$row->nid] = $row->title;
  }
  if (!in_array($device_type_id, $rows)) {
    $device_type_id = 'All';
  }
  $form['select_device_type'] = array(
    '#type' => 'select',
    '#id' => 'edit-field-device-type-nid',
    '#name' => 'field_device_type_nid',
    '#options' => $options,
    '#default_value' => $device_type_id,
    '#value' => $device_type_id,
  );
  return $form;
}

function get_device_type_gateway_version($device_type_nid) {
  if (!empty($device_type_nid) && is_numeric($device_type_nid)) {
    $sql = "select device_type_gateway_version from content_type_devicetype where nid=%d";
    return db_result(db_query($sql, $device_type_nid));
  } else {
    return 0;
  }
}

/**
 * Helper function to disable the element.
 */
function field_device_type_disabled($element) {
  $element['nid']['nid']['#attributes'] = array('disabled' => 'disabled');
  return $element;
}

/**
 * Implements hook_form_alter() to customize the node form.
 * @note : php5.4
 */
function covidien_ui_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('theme', 'covidien_theme') . '/js/covidien.js');
  if ($form_id == 'user_login_block' || $form_id == 'user_login' || arg(0) == 'covidien') {
    drupal_add_js(drupal_get_path('module', 'covidien_ui') . '/js/covidien.js');
  } elseif ($form_id == 'hardware_node_form' || $form_id == 'software_node_form') {
    $form['field_activation_datetime'] = array('#default_value' => '');
  } elseif ($form_id == 'document_node_form') {
    $form['field_document_upload_datetime'] = array('#default_value' => '');
  }
}

/**
 * Implements hook_menu().
 */
function covidien_ui_menu() {
  $items['covidien/password/ajax'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'covidien_password_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/home'] = array(
    'page callback' => 'covidien_ui_home',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/globalcot/ajax'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'covidien_cot_set',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['covidien/globaldtype/ajax'] = array(
    'title' => t('Ajax'),
    'description' => t('Ajax'),
    'page callback' => 'covidien_devicetype_set',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *
 */
function covidien_password_ajax() {
  global $user;
  $pass = '';
  if ($user->uid > 0) {
    $pass = getrandompassword();
  }
  drupal_json(array("status" => 0, "data" => $pass));
}

/**
 *
 */
function getrandompassword() {
  $pass = '';
  $pass_length = 10;
  $allowable_characters = array();
  $allowable_characters[0] = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
  $allowable_characters[1] = 'abcdefghjkmnpqrstuvwxyz';
  $allowable_characters[2] = '234567891';
  $allowable_characters[3] = '!#$%()*+,-.:;=?@[]^_{}~';
  for ($i = 0; $i <= 3; $i++) {
    $len = strlen($allowable_characters[$i]) - 1;
    $pass .= $allowable_characters[$i][mt_rand(0, $len)];
    $pass .= $allowable_characters[$i][mt_rand(0, $len)];
  }
  return $pass;
}

/**
 * Implements the page callback for covidien/home.
 */
function covidien_ui_home() {
  $output = drupal_get_form('covidien_home');
  return $output;
}

/**
 * Home screen form defined here.
 */
function covidien_home() {
  $options = array();
  if (!empty($_SESSION['user_activity'])) {
    $options = array_slice($_SESSION['user_activity'], -8, 8);
    unset($_SESSION['user_activity']);
    $_SESSION['user_activity'] = $options;
  }
  if (empty($options)) {
    $options = array('' => '');
  }
  $form['recent_activities'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => "",
  );
  return $form;
}

/**
 * Implements hook_theme()
 */
function covidien_ui_theme() {
  return array(
    'covidien_home' => array(
      'arguments' => array('form' => NULL),
      'template' => 'covidien_home'
    ),
  );
}

/**
 * Template variables defined using this hook.
 */
function template_preprocess_covidien_home(&$vars) {
  global $user;
  $vars['notice'] = getPasswordExpiredNotice();
  if (!empty($user->devices_access['hardware'])) {
    if (empty($vars['catalog_page_url'])) {
      $vars['catalog_page_url'] = 'covidien/admin/hardware';
    }
  }
  if (!empty($user->devices_access['software'])) {
    if (empty($vars['catalog_page_url'])) {
      $vars['catalog_page_url'] = 'covidien/admin/software';
    }
  }
  if (!empty($user->devices_access['document'])) {
    if (empty($vars['catalog_page_url'])) {
      $vars['catalog_page_url'] = 'covidien/admin/document';
    }
  }
  $vars['conf_page_url'] = 'named-config/list';
  /**
   * Set default URL to hardware if user doesn't have any catalog access.
   */
  if (empty($vars['catalog_page_url'])) {
    $vars['catalog_page_url'] = 'covidien/admin/hardware';
  }
  $total_reports = allReportList(); // Get all reports
  $report_list = getReportList(); // Get all reports related to the Product line
  // build menu
  foreach ($total_reports as $key => $val) {
    $class = array();
    if (in_array($val, $report_list)) {
      $vars['report_url'] .= "covidien/reports/filter/$key";
      break;
    }
  }
  if (empty($vars['report_url'])) {
    $vars['report_url'] = "covidien/reports/no-reports";
  }
  $vars['generalNotice'] = getGeneralNotificationList();
}

function getGeneralNotificationList() {
  $res = array();
  //GATEWAY-2747 add check complete_flag is N, use -5 UTC time zone
  $sql = "SELECT message_text FROM {technical_notification} WHERE active_status='Y' AND display_flag='Y' AND complete_flag = 'N' 
    AND now() BETWEEN ((from_date - INTERVAL time_zone SECOND) + INTERVAL -5 HOUR) AND ((to_date - INTERVAL time_zone SECOND) + INTERVAL -5 HOUR)";
  $result = db_query($sql);
  while ($row = db_fetch_object($result)) {
    $res[] = $row->message_text;
  }
  return $res;
}

/**
 * Helper function used in template_preprocess_covidien_home
 */
function getPasswordExpiredNotice() {
  global $user;
  global $system_users;
  if (!is_array($system_users)) {
    $system_users = array();
  }
  if (in_array($user->name, $system_users)) {
    return '';
  }
  $result = getpasswordnotice($user->uid);
  if (!$result) {
    return '';
  }
  module_load_include('module', 'covidien_users');
  //use message for expire 
  return expire_notice_time($result);
}

/**
 * Helper function for autocomplete.
 * Used in catalog list screens
 */
function catalog_autocomplete($nodetype, $arg1, $arg2) {
  $items = array();
  if (strlen($arg2) > 2) {
    global $user;
    $arg = $arg1;
    $arg2 = trim($arg2);
    if (is_numeric($arg) && $arg > 0) {
      $valid_devices = explode(',', $user->devices_nid);
      if (in_array($arg, $valid_devices)) {
        $devicenid = $arg;
      } elseif ($user->devices_nid == 'all') {
        $devicenid = $arg;
      }
    } else {
      $devicenid = $user->devices_nid;
    }
    $display = 'default';
    $view = views_get_view('catalog_autocomplete');
    $view->init_display();
    $view->set_arguments(array($devicenid));
    $item = $view->get_item($display, 'filter', 'title');
    $item['value'] = str_replace("_", "\_", $arg2); // filter argument set
    $view->set_item($display, 'filter', 'title', $item);
    $item = $view->get_item($display, 'filter', 'type');
    $item['value'] = array($nodetype => $nodetype); // filter argument set
    $view->set_item($display, 'filter', 'type', $item);
    $view->pre_execute();
    $view->execute();
    $result = $view->result;
    $result_cnt = count($result);
    if ($result_cnt > 0) {
      foreach ($result as $rec) {
        $items[$rec->node_title] = $rec->node_title;
      }
    }
  }
  return $items;
}

/**
 * Implements hook_user function to log the activity
 */
function covidien_ui_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case "logout": logUserActivity("Logout", "User Logout " . $account->name, '', '', '', $account->uid, ip_address(), time());
      break;
  }
}

/**
 * Implements the hook_cron
 */
function covidien_ui_cron() {
  set_time_limit(0);
  //GATEWAY-2733 add cron log
  covidien_update_log('Run Start ' . __FUNCTION__);

  global $drupal_password_expiration_day;
  $old_expiry_date = variable_get('password_day', $drupal_password_expiration_day);
  if ($old_expiry_date > $drupal_password_expiration_day) {
    variable_set('password_day', $drupal_password_expiration_day);
    $result = getalluserexpiredate();
    $diff_date = $old_expiry_date - $drupal_password_expiration_day;
    while ($row = db_fetch_object($result)) {
      $nid = $row->nid;
      $expiration_date = $row->field_password_expiration_date_value;
      if (!empty($expiration_date)) {
        updateuserexpirydatesub($diff_date, $nid);
      }
    }
  } elseif ($old_expiry_date < $drupal_password_expiration_day) {
    variable_set('password_day', $drupal_password_expiration_day);
    $result = getalluserexpiredate();
    $diff_date = $drupal_password_expiration_day - $old_expiry_date;
    while ($row = db_fetch_object($result)) {
      $nid = $row->nid;
      $expiration_date = $row->field_password_expiration_date_value;
      if (!empty($expiration_date)) {
        updateuserexpirydateadd($diff_date, $nid);
      }
    }
  } else {
    variable_set('password_day', $drupal_password_expiration_day);
  }
  // For Reset Password: Clear all Password hash on Person table every 12 hours
  clearallpasswordhash();

  //update hardware sofware document files
  covidien_ui_create_all_config_file();
  covidien_hw_create_file();
  //change version after cron job completed.
  increase_components_version();

  covidien_update_log('Finished ' . __FUNCTION__);
}

/**
 * Helper function for filter xss
 */
function filter_xss_arr($arg = array()) {
  $retarg = array();
  if (is_array($arg)) {
    if (count($arg) > 0) {
      foreach ($arg as $key => $val) {
        if (!is_array($val)) {
          $retarg[$key] = check_plain($val);
        } else {
          $retarg[$key] = filter_xss_arr($val);
        }
      }
    }
  } else {
    return check_plain($arg);
  }
  return $retarg;
}

/**
 * Helper function for watchdog
 */
function manual_watchdog($uid, $message, $variables, $ip, $time) {
  db_query('INSERT INTO {watchdog} (uid,type, message,variables,severity,hostname,timestamp) values ( "%s","Device", "%s","%s",6,"%s","%s")', $uid, $message, serialize($variables), $ip, $time);
}

/**
 * Block to display Product line drop down
 */
function covidien_ui_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Product line'),
      'weight' => 0,
      'status' => 1,
    );
    return $blocks;
  } elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        $block = array(
          'content' => drupal_get_form('productline_dropdown'),
        );
        break;
    }
    return $block;
  }
}

/**
 * Block to display Product line drop down
 */
function productline_dropdown($form_id) {
  $result = getUserProductlinelist();
  $default_pl = $_SESSION['default_cot'];
  $form['global_product_line'] = array(
    '#type' => 'select',
    '#options' => $result['pl'],
    '#value' => $default_pl,
    '#id' => 'global_product_line',
    '#prefix' => '<div class="pl-dropdown_div"><div class="cot_header">' . t('Class of Trade: ') . '</div><div class="cot_header">',
    '#suffix' => '</div><div style="clear:both"></div></div>',
  );
  $is_nodeedit = (arg(0) == 'node' && arg(2) == 'edit');
  $is_appedit = (arg(0) == 'application' && arg(1) == 'edit');
  $is_report = (arg(1) == 'report' && arg(0) == 'covidien');
  $is_devices = (arg(1) == 'device' && arg(2) != '') || (arg(1) == 'logdetails');
  if ($is_nodeedit || $is_appedit || $is_report || $is_devices || (arg(3) == 'sw_regulatory_approval')) {
    $form['global_product_line']['#attributes'] = array('disabled' => 'disabled');
  }
  return $form;
}

function getUserProductlinelist() {
  $return = array();
  $array = array();
  $pl_values = array();
  $default = '';
  global $user;
  if ($user->uid == 1) {
    $result = getadminproductline();
  } else {
    $result = getusersproductline($user->uid);
  }
  while ($row = db_fetch_object($result)) {
    $array[$row->nid] = $row->title;
    $pl_values[] = $row->nid;
    if ($row->default_val == 1) {
      $default = $row->nid;
    }
  }
  $return['pl'] = $array;
  if (!empty($default)) {
    $return['default'] = $default;
  } else {
    $return['default'] = $pl_values[0];
  }
  return $return;
}

function covidien_cot_set() {
  global $user;
  $cot = check_plain($_POST['value']);
  $_SESSION['default_cot'] = $cot;
  $_SESSION['default_dtype'] = '';
  echo url($_SESSION['last_access_url']);
  exit;
}

/**
 * Helper function for query IN formater
 */
function helper_queryin($nids) {
  $devicenid = '';
  $devicenid_arr = explode(',', $nids);
  if (count($devicenid_arr) > 0) {
    foreach ($devicenid_arr as $dnid) {
      if ($devicenid != '') {
        $devicenid .= ',';
      }
      $devicenid .= "'" . $dnid . "'";
    }
  }
  return $devicenid;
}

/**
 * Helper function to set devicetype in user session 
 */
function covidien_devicetype_set() {
  $_SESSION['default_dtype'] = check_plain($_POST['value']);
  echo url($_SESSION['last_access_url']);
  exit;
}

/**
 * @name: input validate
 * the blacklist: \ / > < 
 * " [null] (0x00), [CR] (0x0D), [LF] (0x0A), [ESC] (0x1B), [space] (0x20), ! (0x21), "" (0x22), # (0x23), $ (0x24), % (0x25), 
 * & (0x26), ' (0x27), ( (0x28), ) (0x29), * (0x2A), - (0x2D), . (0x2E),
 * / (0x2F), : (0x3A), ; (0x3B), < (0x3C), = (0x3D), > (0x3E), ? (0x3F), @ (0x40), ` (0x60), | (0x7C), ~ (0x7E)
 * @arguments: $value can use string or array, $empty if this is false we can use NULL
 * @reutrn: array return array  ||  string return boolean
 */
function covidien_ui_input_validate($value, $empty = false) {
  //GATEWAY-2251  - / . + _ ! 
  //the blacklist: \ > < " # $ % & ' ( ) * ; ? ` | ~ 
  $partten = '/[\\\"<>#$%&\'()*;?`|~]+/';
  $validate = array();
  if (is_array($value)) {
    foreach ($value as $key => $val) {
      $val = trim($val);
      //check blacklist, check value is not empty
      if (empty($val) && $empty && ($val !== 0 || $val !== '0')) {
        return false;
      } else {
        if (preg_match($partten, $val)) {
          $validate[$key] = false;
        } else {
          $validate[$key] = true;
        }
      }
    }
    return $validate;
  } else {
    $value = trim($value);
    //check blacklist, check value is not empty
    if (empty($value) && $empty && ($value !== 0 || $val !== '0')) {
      return false;
    } else {
      if (preg_match($partten, $value)) {
        return false;
      }
    }
  }
  return true;
}

/**
 * create all null device type config file
 */
function covidien_ui_create_all_config_file() {
  global $hw_sw_config;
  $result = db_query("SELECT nid, title FROM {node} WHERE type = 'devicetype'");
  $rows = array();
  while ($row = db_fetch_object($result)) {
    $rows[$row->nid] = $row->title;
  }
  $files = array();
  foreach ($rows as $device_type) {
    if (!$device_type) {
      continue;
    }
    $hw_name = $device_type . '_hardware';
    $sw_name = $device_type . '_software';
    $conf_name = $device_type . '_config';
    $doc_name = $device_type . '_document';
    $doc_conf_name = $device_type . '_docconfig';
    $files[] = $hw_name;
    $files[] = $sw_name;
    $files[] = $conf_name;
    $files[] = $doc_name;
    $files[] = $doc_conf_name;
    $content = '<?xml version="1.0" encoding="UTF-8"?><components></components>';
    file_put_contents($hw_sw_config . '/' . $hw_name, $content);
    file_put_contents($hw_sw_config . '/' . $sw_name, $content);
    file_put_contents($hw_sw_config . '/' . $conf_name, $content);
    file_put_contents($hw_sw_config . '/' . $doc_name, $content);
    file_put_contents($hw_sw_config . '/' . $doc_conf_name, $content);
  }
  return $files;
}

/**
 * create one null device type config file
 */
function covidien_ui_create_device_type_file($device_type_nid, $file_suffix) {
  global $hw_sw_config;
  $device_type = db_result(db_query("SELECT title FROM {node} WHERE type = 'devicetype' AND nid = %d", $device_type_nid));
  if (!$device_type) {
    return '';
  }
  $file_name = $device_type . $file_suffix;
  $content = '<?xml version="1.0" encoding="UTF-8"?><components></components>';
  file_put_contents($hw_sw_config . '/' . $file_name, $content);
  return $file_name;
}

/**
 * increase components version when software component change.
 */
function increase_components_version() {
  $version_id = db_result(db_query("select max(version_id) from components_version"));
  db_query("delete from components_version");
  db_query("insert into components_version values (%d)", $version_id + 1);
}

function getUserPersonNid($uid = 0) {
  global $user;
  if (!$uid) {
    $uid = $user->uid;
  }
  $person_nid = db_result(db_query("select nid from node where type='person' and uid = %d", $uid));
  return $person_nid;
}

function covidien_get_product_line($product_line = 0) {
  $product_line = $product_line ? $product_line : $_REQUEST['product_line'];
  if ($product_line) {
    $_SESSION['default_cot'] = $product_line;
  } else {
    $product_line = $_SESSION['default_cot'];
  }
  return $product_line;
}

function covidien_get_device_type($device_type = 0) {
  $device_type = $device_type ? $device_type : $_REQUEST['default_dtype'];
  if ($device_type) {
    $_SESSION['default_dtype'] = $device_type;
  } else {
    $device_type = $_SESSION['default_dtype'];
  }
  return $device_type;
}

function covidien_cot_admin_access_callback($menu_type) {
  global $user;
  //admin user has access
  if ($user->uid == 1) {
    return true;
  }
  //cot admin roles has access
  /* GATEWAY-2937 GATEWAY-2940 access use role config
    if ($user->product_line && is_array($user->roles)) {
    if (in_array($user->product_line . '__CoT Admin', $user->roles)) {
    return true;
    }
    } */
  //has $menu_type access 
  if (is_array($user->devices_access[$menu_type])) {
    if (in_array('view', $user->devices_access[$menu_type]) || in_array('edit', $user->devices_access[$menu_type])) {
      return true;
    }
  }
  //has not access
  return false;
}

/**
 * get user has access in type 
 * @global type $user
 * @param type $type
 * @return boolean
 */
function check_user_has_edit_access($type) {
  //check edit access 
  global $user;
  $has_edit_access = false;
  if ($user->uid == 1 || (is_array($user->devices_access) && in_array('edit', $user->devices_access[$type]))) {
    $has_edit_access = true;
  }
  return $has_edit_access;
}

function is_login_user() {
  global $user;
  //admin user has access
  if ($user->uid) {
    return true;
  }
  return false;
}

function is_cot_admin() {
  global $user;
  //admin user has access
  if ($user->uid == 1) {
    return true;
  }
  //cot admin roles has access
  if ($user->product_line && is_array($user->roles)) {
    if (in_array($user->product_line . '__CoT Admin', $user->roles)) {
      return true;
    }
  }
  return false;
}

function covidien_update_log($message) {
  $path = '/var/log/httpd/';
  $name = 'gateway_web.log';
  file_check_directory($path, FILE_CREATE_DIRECTORY);
  $fp = fopen($path . '/' . $name, 'a+');
  if ($fp) {
    fwrite($fp, date('[Y-m-d H:i:s] ') . $message . "\n");
    fclose($fp);
  }
}
